* using log directory ‘/var/scratch2/tomas/cran/rcnst/check/msSPChelpR.Rcheck’
* using R Under development (unstable) (2021-03-03 r80059)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘msSPChelpR/DESCRIPTION’ ... OK
* this is package ‘msSPChelpR’ version ‘0.8.6’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘msSPChelpR’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘msSPChelpR-Ex.R’ failed
The error most likely occurred in:

> ### Name: ir_crosstab_byfutime
> ### Title: Calculate crude incidence rates and cross-tabulate results by
> ###   break variables; cumulative FU-times as are used as xbreak_var
> ### Aliases: ir_crosstab_byfutime
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #prep step - make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     #only use sample
+                     dplyr::filter(as.numeric(fake_id) < 200000) %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 2)
Long dataset had too many cases per patient. Wide dataset is limited to  2  cases per id as defined in timevar_max option.
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 8 x 3
  p_alive.1 p_status     n
  <chr>        <dbl> <int>
1 Alive            1  1728
2 Alive            2  1896
3 Alive           98   275
4 Dead             1   275
5 Dead             2   231
6 Dead             3  2052
7 Dead             4  1002
8 Dead            98    27
# A tibble: 5 x 2
  p_status     n
*    <dbl> <int>
1        1  2003
2        2  2127
3        3  2052
4        4  1002
5       98   302
>  
> #now we can run the function
> usdata_wide <- usdata_wide %>%
+                  msSPChelpR::calc_futime(., 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
# A tibble: 5 x 5
  p_status mean_futime min_futime max_futime median_futime
*    <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        1        9.22     0.0438       27.0          8.13
2        2        8.87     0            26.8          7.75
3        3        8.39     0            25.5          7.38
4        4        6.38     0            23.3          5.24
5       98      NaN      Inf          -Inf           NA   
>                     
> #for example, you can calculate incidence and summarize by sex and registry
> msSPChelpR::ir_crosstab_byfutime(usdata_wide,
+       dattype = "seer",
+       count_var = "count_spc",
+       futime_breaks = c(0, .5, 1, 5, 10, Inf),
+       ybreak_vars = c("sex.1", "registry.1"),
+       collapse_ci = FALSE,
+       add_total = "no",
+       futime_var = "p_futimeyrs",
+       alpha = 0.05)
Warning: The variable for follow-up time has: 309 missings. These will be omitted when creating the crosstabs.
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 2
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!

* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ... OK
  Running ‘testthat.R’
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... NONE
  ‘introduction.Rmd’ using ‘UTF-8’... OK
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR
