
R Under development (unstable) (2021-02-20 r80030) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "msSPChelpR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('msSPChelpR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("asir")
> ### * asir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asir
> ### Title: Calculate age-standardized incidence rates
> ### Aliases: asir
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> data("standard_population")
> data("population_us")
> 
> #make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     #only use sample
+                     dplyr::filter(as.numeric(fake_id) < 200000) %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 2)
Long dataset had too many cases per patient. Wide dataset is limited to  2  cases per id as defined in timevar_max option.
>                     
> #create count variable
> usdata_wide <- usdata_wide %>%
+                     dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                     TRUE ~ 0))
>  
> #remove cases for which no reference population exists
> usdata_wide <- usdata_wide %>%
+                     dplyr::filter(t_yeardiag.2 %in% c("1990 - 1994", "1995 - 1999", "2000 - 2004",
+                                                        "2005 - 2009", "2010 - 2014"))
>                     
> 
> #now we can run the function
> msSPChelpR::asir(usdata_wide,
+       dattype = "seer",
+       std_pop = "ESP2013",
+       truncate_std_pop = FALSE,
+       futime_src = "refpop",
+       summarize_groups = "none",
+       count_var = "count_spc",
+       refpop_df = population_us,
+       region_var = "registry.1", 
+       age_var = "fc_agegroup.1",
+       sex_var = "sex.1",
+       year_var = "t_yeardiag.2", 
+       site_var = "t_site_icd.2",
+       pyar_var = "population_pyar")
Using person-years at risk [PYAR] from reference population as pyears for calculating incidence rates.
Be careful, in this calculation it is assumed that all included regions have collected data for the full time period: 1990 to 2010
                       If you have included registries with differing times, please check this assumption by looking at groups with 0 incidence and specify option 'inclusion_restrictions' if needed.
The following regions, age groups, years, sexes and ICD codes are considered:  SEER Reg 01 - San Francisco-Oakland SMSA, SEER Reg 02 - Connecticut, SEER Reg 20 - Detroit (Metropolitan), SEER Reg 21 - Hawaii 1995 - 1999, 2000 - 2004, 2005 - 2009, 2010 - 2014, 1990 - 1994 00 - 04, 05 - 09, 10 - 14, 15 - 19, 20 - 24, 25 - 29, 30 - 34, 35 - 39, 40 - 44, 45 - 49, 50 - 54, 55 - 59, 60 - 64, 65 - 69, 70 - 74, 75 - 79, 80 - 84, 85 - 120 Female, Male C18, C34, C44, C50, C54, C64, C80, C14
# A tibble: 320 x 17
   age   region sex   year  t_site  asir observed   pyar abs_ir abs_ir_lci
   <chr> <chr>  <chr> <chr> <chr>  <dbl>    <dbl>  <dbl>  <dbl>      <dbl>
 1 Age … SEER … Fema… 1990… C14        0        0 1.92e7      0          0
 2 Age … SEER … Fema… 1990… C18        0        0 1.92e7      0          0
 3 Age … SEER … Fema… 1990… C34        0        0 1.92e7      0          0
 4 Age … SEER … Fema… 1990… C44        0        0 1.92e7      0          0
 5 Age … SEER … Fema… 1990… C50        0        0 1.92e7      0          0
 6 Age … SEER … Fema… 1990… C54        0        0 1.92e7      0          0
 7 Age … SEER … Fema… 1990… C64        0        0 1.92e7      0          0
 8 Age … SEER … Fema… 1990… C80        0        0 1.92e7      0          0
 9 Age … SEER … Fema… 1995… C14        0        0 2.01e7      0          0
10 Age … SEER … Fema… 1995… C18        0        0 2.01e7      0          0
# … with 310 more rows, and 7 more variables: abs_ir_uci <dbl>,
#   asir_copy <dbl>, asir_lci <dbl>, asir_lci_gam <dbl>, asir_uci <dbl>,
#   asir_uci_gam <dbl>, asir_e6 <dbl>
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_futime")
> ### * calc_futime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_futime
> ### Title: Calculate follow-up time per case until end of follow-up
> ###   depending on pat_status - tidyverse version
> ### Aliases: calc_futime
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #prep step - make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 10)
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 11 x 3
   p_alive.1 p_status     n
   <chr>        <dbl> <int>
 1 Alive            1 15884
 2 Alive            2 17609
 3 Alive           97    19
 4 Alive           98  2488
 5 Dead             1  2544
 6 Dead             2  2147
 7 Dead             3 18358
 8 Dead             4  8822
 9 Dead            97     2
10 Dead            98   182
11 Dead            NA     5
# A tibble: 7 x 2
  p_status     n
*    <dbl> <int>
1        1 18428
2        2 19756
3        3 18358
4        4  8822
5       97    21
6       98  2670
7       NA     5
>  
> #now we can run the function
> msSPChelpR::calc_futime(usdata_wide, 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
# A tibble: 7 x 5
  p_status mean_futime min_futime max_futime median_futime
*    <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        1        9.23     0.0438       27.0          8.04
2        2        8.94     0            26.9          7.83
3        3        8.60     0            25.8          7.55
4        4        6.46     0            26.5          5.25
5       97      NaN      Inf          -Inf           NA   
6       98      NaN      Inf          -Inf           NA   
7       NA      NaN      Inf          -Inf           NA   
# A tibble: 68,060 x 122
   fake_id registry.1 sex.1 race.1 datebirth.1 t_datediag.1 t_site_icd.1 t_dco.1
   <chr>   <chr>      <chr> <chr>  <date>      <date>       <chr>        <chr>  
 1 100004  SEER Reg … Male  White  1926-01-01  1992-07-15   C50          histol…
 2 100034  SEER Reg … Male  White  1979-01-01  2000-06-15   C50          histol…
 3 100037  SEER Reg … Fema… White  1938-01-01  1996-01-15   C54          histol…
 4 100038  SEER Reg … Male  White  1989-01-01  1991-04-15   C50          histol…
 5 100039  SEER Reg … Fema… White  1946-01-01  2003-08-15   C50          histol…
 6 100047  SEER Reg … Fema… White  1927-01-01  1998-04-15   C50          histol…
 7 100057  SEER Reg … Male  Black  1961-01-01  2010-04-15   C18          histol…
 8 100060  SEER Reg … Fema… White  1947-01-01  2003-08-15   C50          histol…
 9 100063  SEER Reg … Fema… Black  1938-01-01  1995-12-15   C50          histol…
10 100073  SEER Reg … Male  White  1960-01-01  1993-11-15   C44          histol…
# … with 68,050 more rows, and 114 more variables: fc_age.1 <int>,
#   datedeath.1 <date>, p_alive.1 <chr>, p_dodmin.1 <date>,
#   fc_agegroup.1 <chr>, t_yeardiag.1 <chr>, registry.2 <chr>, sex.2 <chr>,
#   race.2 <chr>, datebirth.2 <date>, t_datediag.2 <date>, t_site_icd.2 <chr>,
#   t_dco.2 <chr>, fc_age.2 <int>, datedeath.2 <date>, p_alive.2 <chr>,
#   p_dodmin.2 <date>, fc_agegroup.2 <chr>, t_yeardiag.2 <chr>,
#   registry.3 <chr>, sex.3 <chr>, race.3 <chr>, datebirth.3 <date>,
#   t_datediag.3 <date>, t_site_icd.3 <chr>, t_dco.3 <chr>, fc_age.3 <int>,
#   datedeath.3 <date>, p_alive.3 <chr>, p_dodmin.3 <date>,
#   fc_agegroup.3 <chr>, t_yeardiag.3 <chr>, registry.4 <chr>, sex.4 <chr>,
#   race.4 <chr>, datebirth.4 <date>, t_datediag.4 <date>, t_site_icd.4 <chr>,
#   t_dco.4 <chr>, fc_age.4 <int>, datedeath.4 <date>, p_alive.4 <chr>,
#   p_dodmin.4 <date>, fc_agegroup.4 <chr>, t_yeardiag.4 <chr>,
#   registry.5 <chr>, sex.5 <chr>, race.5 <chr>, datebirth.5 <date>,
#   t_datediag.5 <date>, t_site_icd.5 <chr>, t_dco.5 <chr>, fc_age.5 <int>,
#   datedeath.5 <date>, p_alive.5 <chr>, p_dodmin.5 <date>,
#   fc_agegroup.5 <chr>, t_yeardiag.5 <chr>, registry.6 <chr>, sex.6 <chr>,
#   race.6 <chr>, datebirth.6 <date>, t_datediag.6 <date>, t_site_icd.6 <chr>,
#   t_dco.6 <chr>, fc_age.6 <int>, datedeath.6 <date>, p_alive.6 <chr>,
#   p_dodmin.6 <date>, fc_agegroup.6 <chr>, t_yeardiag.6 <chr>,
#   registry.7 <chr>, sex.7 <chr>, race.7 <chr>, datebirth.7 <date>,
#   t_datediag.7 <date>, t_site_icd.7 <chr>, t_dco.7 <chr>, fc_age.7 <int>,
#   datedeath.7 <date>, p_alive.7 <chr>, p_dodmin.7 <date>,
#   fc_agegroup.7 <chr>, t_yeardiag.7 <chr>, registry.8 <chr>, sex.8 <chr>,
#   race.8 <chr>, datebirth.8 <date>, t_datediag.8 <date>, t_site_icd.8 <chr>,
#   t_dco.8 <chr>, fc_age.8 <int>, datedeath.8 <date>, p_alive.8 <chr>,
#   p_dodmin.8 <date>, fc_agegroup.8 <chr>, t_yeardiag.8 <chr>,
#   registry.9 <chr>, sex.9 <chr>, race.9 <chr>, …
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_futime_tt")
> ### * calc_futime_tt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_futime_tt
> ### Title: Calculate follow-up time per case until end of follow-up
> ###   depending on pat_status - tidytable version
> ### Aliases: calc_futime_tt
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 10)
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 11 x 3
   p_alive.1 p_status     n
   <chr>        <dbl> <int>
 1 Alive            1 15884
 2 Alive            2 17609
 3 Alive           97    19
 4 Alive           98  2488
 5 Dead             1  2544
 6 Dead             2  2147
 7 Dead             3 18358
 8 Dead             4  8822
 9 Dead            97     2
10 Dead            98   182
11 Dead            NA     5
# A tibble: 7 x 2
  p_status     n
*    <dbl> <int>
1        1 18428
2        2 19756
3        3 18358
4        4  8822
5       97    21
6       98  2670
7       NA     5
>  
> #now we can run the function
> msSPChelpR::calc_futime_tt(usdata_wide, 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning in min(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in min(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in min(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(p_futimeyrs, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
# tidytable [7 × 5]
  p_status mean_futime min_futime max_futime median_futime
     <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        2        8.94     0            26.9          7.83
2        3        8.60     0            25.8          7.55
3        4        6.46     0            26.5          5.25
4        1        9.23     0.0438       27.0          8.04
5       98      NaN      Inf          -Inf           NA   
6       97      NaN      Inf          -Inf           NA   
7       NA      NaN      Inf          -Inf           NA   
# tidytable [68,060 × 122]
   fake_id registry.1 sex.1 race.1 datebirth.1 t_datediag.1 t_site_icd.1 t_dco.1
   <chr>   <chr>      <chr> <chr>  <date>      <date>       <chr>        <chr>  
 1 100004  SEER Reg … Male  White  1926-01-01  1992-07-15   C50          histol…
 2 100034  SEER Reg … Male  White  1979-01-01  2000-06-15   C50          histol…
 3 100037  SEER Reg … Fema… White  1938-01-01  1996-01-15   C54          histol…
 4 100038  SEER Reg … Male  White  1989-01-01  1991-04-15   C50          histol…
 5 100039  SEER Reg … Fema… White  1946-01-01  2003-08-15   C50          histol…
 6 100047  SEER Reg … Fema… White  1927-01-01  1998-04-15   C50          histol…
 7 100057  SEER Reg … Male  Black  1961-01-01  2010-04-15   C18          histol…
 8 100060  SEER Reg … Fema… White  1947-01-01  2003-08-15   C50          histol…
 9 100063  SEER Reg … Fema… Black  1938-01-01  1995-12-15   C50          histol…
10 100073  SEER Reg … Male  White  1960-01-01  1993-11-15   C44          histol…
# … with 68,050 more rows, and 114 more variables: fc_age.1 <int>,
#   datedeath.1 <date>, p_alive.1 <chr>, p_dodmin.1 <date>,
#   fc_agegroup.1 <chr>, t_yeardiag.1 <chr>, registry.2 <chr>, sex.2 <chr>,
#   race.2 <chr>, datebirth.2 <date>, t_datediag.2 <date>, t_site_icd.2 <chr>,
#   t_dco.2 <chr>, fc_age.2 <int>, datedeath.2 <date>, p_alive.2 <chr>,
#   p_dodmin.2 <date>, fc_agegroup.2 <chr>, t_yeardiag.2 <chr>,
#   registry.3 <chr>, sex.3 <chr>, race.3 <chr>, datebirth.3 <date>,
#   t_datediag.3 <date>, t_site_icd.3 <chr>, t_dco.3 <chr>, fc_age.3 <int>,
#   datedeath.3 <date>, p_alive.3 <chr>, p_dodmin.3 <date>,
#   fc_agegroup.3 <chr>, t_yeardiag.3 <chr>, registry.4 <chr>, sex.4 <chr>,
#   race.4 <chr>, datebirth.4 <date>, t_datediag.4 <date>, t_site_icd.4 <chr>,
#   t_dco.4 <chr>, fc_age.4 <int>, datedeath.4 <date>, p_alive.4 <chr>,
#   p_dodmin.4 <date>, fc_agegroup.4 <chr>, t_yeardiag.4 <chr>,
#   registry.5 <chr>, sex.5 <chr>, race.5 <chr>, datebirth.5 <date>,
#   t_datediag.5 <date>, t_site_icd.5 <chr>, t_dco.5 <chr>, fc_age.5 <int>,
#   datedeath.5 <date>, p_alive.5 <chr>, p_dodmin.5 <date>,
#   fc_agegroup.5 <chr>, t_yeardiag.5 <chr>, registry.6 <chr>, sex.6 <chr>,
#   race.6 <chr>, datebirth.6 <date>, t_datediag.6 <date>, t_site_icd.6 <chr>,
#   t_dco.6 <chr>, fc_age.6 <int>, datedeath.6 <date>, p_alive.6 <chr>,
#   p_dodmin.6 <date>, fc_agegroup.6 <chr>, t_yeardiag.6 <chr>,
#   registry.7 <chr>, sex.7 <chr>, race.7 <chr>, datebirth.7 <date>,
#   t_datediag.7 <date>, t_site_icd.7 <chr>, t_dco.7 <chr>, fc_age.7 <int>,
#   datedeath.7 <date>, p_alive.7 <chr>, p_dodmin.7 <date>,
#   fc_agegroup.7 <chr>, t_yeardiag.7 <chr>, registry.8 <chr>, sex.8 <chr>,
#   race.8 <chr>, datebirth.8 <date>, t_datediag.8 <date>, t_site_icd.8 <chr>,
#   t_dco.8 <chr>, fc_age.8 <int>, datedeath.8 <date>, p_alive.8 <chr>,
#   p_dodmin.8 <date>, fc_agegroup.8 <chr>, t_yeardiag.8 <chr>,
#   registry.9 <chr>, sex.9 <chr>, race.9 <chr>, …
> 
> 
> 
> 
> cleanEx()
> nameEx("ir_crosstab")
> ### * ir_crosstab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ir_crosstab
> ### Title: Calculate crude incidence rates and crosstabulate results by
> ###   break variables
> ### Aliases: ir_crosstab
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #prep step - make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 10)
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 11 x 3
   p_alive.1 p_status     n
   <chr>        <dbl> <int>
 1 Alive            1 15884
 2 Alive            2 17609
 3 Alive           97    19
 4 Alive           98  2488
 5 Dead             1  2544
 6 Dead             2  2147
 7 Dead             3 18358
 8 Dead             4  8822
 9 Dead            97     2
10 Dead            98   182
11 Dead            NA     5
# A tibble: 7 x 2
  p_status     n
*    <dbl> <int>
1        1 18428
2        2 19756
3        3 18358
4        4  8822
5       97    21
6       98  2670
7       NA     5
>  
> #now we can run the function
> usdata_wide <- usdata_wide %>%
+                  msSPChelpR::calc_futime(., 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
# A tibble: 7 x 5
  p_status mean_futime min_futime max_futime median_futime
*    <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        1        9.23     0.0438       27.0          8.04
2        2        8.94     0            26.9          7.83
3        3        8.60     0            25.8          7.55
4        4        6.46     0            26.5          5.25
5       97      NaN      Inf          -Inf           NA   
6       98      NaN      Inf          -Inf           NA   
7       NA      NaN      Inf          -Inf           NA   
>                     
> #for example, you can calculate incidence and summarize by sex and registry
> msSPChelpR::ir_crosstab(usdata_wide,
+       dattype = "seer",
+       count_var = "count_spc",
+       xbreak_var = "none",
+       ybreak_vars = c("sex.1", "registry.1"),
+       collapse_ci = FALSE,
+       add_total = "no",
+       add_n_percentages = FALSE,
+       futime_var = "p_futimeyrs",
+       alpha = 0.05)
# A tibble: 6 x 8
  yvar_name  yvar_label      n_base observed   pyar abs_ir abs_ir_lci abs_ir_uci
  <chr>      <chr>            <int>    <dbl>  <dbl>  <dbl>      <dbl>      <dbl>
1 sex.1      Female           33786    18218 279226  6524.      6430.      6620.
2 sex.1      Male             34274    18375 281930  6518.      6424.      6613.
3 registry.1 SEER Reg 01 - …  22738    12194 187898  6490.      6375.      6606.
4 registry.1 SEER Reg 02 - …  15156     8233 124511  6612.      6470.      6757.
5 registry.1 SEER Reg 20 - …  22722    12241 188025  6510.      6395.      6627.
6 registry.1 SEER Reg 21 - …   7444     3925  60721  6464.      6263.      6669.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("ir_crosstab_byfutime")
> ### * ir_crosstab_byfutime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ir_crosstab_byfutime
> ### Title: Calculate crude incidence rates and cross-tabulate results by
> ###   break variables; cumulative FU-times as are used as xbreak_var
> ### Aliases: ir_crosstab_byfutime
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #prep step - make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     #only use sample
+                     dplyr::filter(as.numeric(fake_id) < 200000) %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 2)
Long dataset had too many cases per patient. Wide dataset is limited to  2  cases per id as defined in timevar_max option.
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 8 x 3
  p_alive.1 p_status     n
  <chr>        <dbl> <int>
1 Alive            1  1728
2 Alive            2  1896
3 Alive           98   275
4 Dead             1   275
5 Dead             2   231
6 Dead             3  2052
7 Dead             4  1002
8 Dead            98    27
# A tibble: 5 x 2
  p_status     n
*    <dbl> <int>
1        1  2003
2        2  2127
3        3  2052
4        4  1002
5       98   302
>  
> #now we can run the function
> usdata_wide <- usdata_wide %>%
+                  msSPChelpR::calc_futime(., 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning in min(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
Warning in max(.data[["p_futimeyrs"]], na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
# A tibble: 5 x 5
  p_status mean_futime min_futime max_futime median_futime
*    <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        1        9.22     0.0438       27.0          8.13
2        2        8.87     0            26.8          7.75
3        3        8.39     0            25.5          7.38
4        4        6.38     0            23.3          5.24
5       98      NaN      Inf          -Inf           NA   
>                     
> #for example, you can calculate incidence and summarize by sex and registry
> msSPChelpR::ir_crosstab_byfutime(usdata_wide,
+       dattype = "seer",
+       count_var = "count_spc",
+       futime_breaks = c(0, .5, 1, 5, 10, Inf),
+       ybreak_vars = c("sex.1", "registry.1"),
+       collapse_ci = FALSE,
+       add_total = "no",
+       futime_var = "p_futimeyrs",
+       alpha = 0.05)
Warning: The variable for follow-up time has: 309 missings. These will be omitted when creating the crosstabs.
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 2
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!

