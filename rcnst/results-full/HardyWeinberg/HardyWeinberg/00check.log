* using log directory ‘/var/scratch2/tomas/cran/rcnst/check/HardyWeinberg.Rcheck’
* using R Under development (unstable) (2020-12-08 r79595)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘HardyWeinberg/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘HardyWeinberg’ version ‘1.6.9’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘HardyWeinberg’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking sizes of PDF files under ‘inst/doc’ ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘HardyWeinberg-Ex.R’ failed
The error most likely occurred in:

> ### Name: HWNetwork
> ### Title: Autosomal and X-chromosomal exact tests for HWE via a Network
> ###   algorithm
> ### Aliases: HWNetwork
> ### Keywords: htest
> 
> ### ** Examples
> 
> #
> # From vectors with counts of genotypes
> #
> data(TSIXTriAllelics)
> ma <- TSIXTriAllelics[1,2:4]
> names(ma) <- c("A","B","C")
> 
> fe <- TSIXTriAllelics[1,5:10]
> names(fe) <- c("AA","AB","AC","BB","BC","CC")
> 
> fe <- toTriangular(fe)
> 
> HWNetwork(ma=ma,fe=fe)
ERROR: modification of compiler constant of type double, length 4
ERROR: the modified value of the constant is:
[1] 0.0000000000 0.0005859193 0.0000000000 0.0000000000
ERROR: the original value of the constant is:
[1] 0 0 0 0
ERROR: the modified constant is at index 94
ERROR: the modified constant is in this function body:
{
    if (is.null(ma) & is.null(fe)) {
        alleles <- unique(sort(c(a1, a2)))
        k <- length(alleles)
        allelenames <- paste("A", as.character(alleles), sep = "")
        acounts <- numeric(k)
        for (i in 1:length(alleles)) {
            acounts[i] <- sum(a1 == alleles[i], na.rm = TRUE) + 
                sum(a2 == alleles[i], na.rm = TRUE)
        }
        names(acounts) <- allelenames
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        alleles <- alleles[ii]
        allelenames <- allelenames[ii]
        acounts <- as.integer(acounts)
        names(acounts) <- allelenames
        if (is.null(gender)) {
        }
        else {
            n <- length(gender)
            if (any(gender != 1 & gender != 2)) 
                stop("gender not properly coded (1 for males, 2 for females)")
            nm <- sum(gender == 1, na.rm = TRUE)
            nf <- sum(gender == 2, na.rm = TRUE)
            MaleFemaleCounts <- c(nm, nf)
            Pvalues <- c(0, 0, 0, 0)
            acounts.males <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.males[i] <- sum(a1[gender == 1] == alleles[i], 
                  na.rm = TRUE) + sum(a2[gender == 1] == alleles[i], 
                  na.rm = TRUE)
            }
            names(acounts.males) <- allelenames
            acounts.females <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.females[i] <- sum(a1[gender == 2] == 
                  alleles[i], na.rm = TRUE) + sum(a2[gender == 
                  2] == alleles[i], na.rm = TRUE)
            }
            names(acounts.females) <- allelenames
            f.a1 <- paste("A", as.character(a1[gender == 2]), 
                sep = "")
            f.a2 <- paste("A", as.character(a2[gender == 2]), 
                sep = "")
            fem <- paste(f.a1, f.a2, sep = "/")
            fa1 <- factor(f.a1, levels = allelenames)
            fa2 <- factor(f.a2, levels = allelenames)
            M <- table(fa1, fa2)
            Mn <- as.matrix(unclass(M))
            Fec <- fold(Mn)
            prob.of.sample <- density.ma.gender(acounts.males, 
                Fec)
            ostats <- c(0, prob.of.sample, 0, 0)
            observed = as.double(ostats)
            pval <- xChromosomal(acounts, MaleFemaleCounts, k, 
                observed, Pvalues, 0, 0, 0, 0, 0, 0)
        }
    }
    else {
        nm <- sum(ma, na.rm = TRUE)
        nf <- sum(fe, na.rm = TRUE)
        MaleFemaleCounts <- c(nm, nf)
        k <- length(ma)
        Pvalues <- c(0, 0, 0, 0)
        ft <- rowSums(fe) + colSums(fe)
        acounts <- ma + ft
        acounts.males <- ma
        acounts.females <- ft
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        acounts.males <- acounts.males[ii]
        acounts.females <- acounts.females[ii]
        prob.of.sample <- density.ma.gender(ma, fe)
        ostats <- c(0, prob.of.sample, 0, 0)
        observed = as.double(ostats)
        acounts <- as.integer(acounts)
        pval <- xChromosomal(acounts, MaleFemaleCounts, k, observed, 
            Pvalues, 0, 0, 0, 0, 0, 0)
    }
    if (verbose) {
        cat("Network algorithm for HWE Exact test with multiple alleles\n")
        cat(k, "alleles detected.\n")
        cat(nm, "males and ", nf, "females\n")
        cat("Allele counts:\n")
        res.counts <- rbind(acounts.males, acounts.females, acounts)
        rownames(res.counts) <- c("Males", "Females", "All")
        print(res.counts)
        cat("Probability of the sample:", prob.of.sample, "\n")
        cat("p-value:", pval, "\n")
    }
    out <- list(pval = pval)
}

 *** caught segfault ***
address (nil), cause 'unknown'

Traceback:
 1: xChromosomal(acounts, MaleFemaleCounts, k, observed, Pvalues,     0, 0, 0, 0, 0, 0)
 2: HWNetwork(ma = ma, fe = fe)
An irrecoverable exception occurred. R is aborting now ...
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... ERROR
Errors in running code in vignettes:
when running code in ‘HardyWeinberg.Rnw’
  ...
        cat("Probability of the sample:", prob.of.sample, "\n")
        cat("p-value:", pval, "\n")
    }
    out <- list(pval = pval)
}
Function HWNetwork in namespace HardyWeinberg has this body.
Fatal error: compiler constants were modified!


... incomplete output.  Crash?

  ‘HardyWeinberg.Rnw’ using ‘CP1252’... failed to complete the test
* checking re-building of vignette outputs ... NOTE
Error(s) in re-building vignettes:
--- re-building ‘HardyWeinberg.Rnw’ using Sweave
Loading required package: mice

Attaching package: 'mice'

The following object is masked from 'package:stats':

    filter

The following objects are masked from 'package:base':

    cbind, rbind

Loading required package: Rsolnp
Warning: Number of logged events: 1
Warning: Number of logged events: 1
ERROR: modification of compiler constant of type double, length 4
ERROR: the modified value of the constant is:
[1] 0.00000000 0.03370688 0.00000000 0.00000000
ERROR: the original value of the constant is:
[1] 0 0 0 0
ERROR: the modified constant is at index 94
ERROR: the modified constant is in this function body:
{
    if (is.null(ma) & is.null(fe)) {
        alleles <- unique(sort(c(a1, a2)))
        k <- length(alleles)
        allelenames <- paste("A", as.character(alleles), sep = "")
        acounts <- numeric(k)
        for (i in 1:length(alleles)) {
            acounts[i] <- sum(a1 == alleles[i], na.rm = TRUE) + 
                sum(a2 == alleles[i], na.rm = TRUE)
        }
        names(acounts) <- allelenames
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        alleles <- alleles[ii]
        allelenames <- allelenames[ii]
        acounts <- as.integer(acounts)
        names(acounts) <- allelenames
        if (is.null(gender)) {
        }
        else {
            n <- length(gender)
            if (any(gender != 1 & gender != 2)) 
                stop("gender not properly coded (1 for males, 2 for females)")
            nm <- sum(gender == 1, na.rm = TRUE)
            nf <- sum(gender == 2, na.rm = TRUE)
            MaleFemaleCounts <- c(nm, nf)
            Pvalues <- c(0, 0, 0, 0)
            acounts.males <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.males[i] <- sum(a1[gender == 1] == alleles[i], 
                  na.rm = TRUE) + sum(a2[gender == 1] == alleles[i], 
                  na.rm = TRUE)
            }
            names(acounts.males) <- allelenames
            acounts.females <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.females[i] <- sum(a1[gender == 2] == 
                  alleles[i], na.rm = TRUE) + sum(a2[gender == 
                  2] == alleles[i], na.rm = TRUE)
            }
            names(acounts.females) <- allelenames
            f.a1 <- paste("A", as.character(a1[gender == 2]), 
                sep = "")
            f.a2 <- paste("A", as.character(a2[gender == 2]), 
                sep = "")
            fem <- paste(f.a1, f.a2, sep = "/")
            fa1 <- factor(f.a1, levels = allelenames)
            fa2 <- factor(f.a2, levels = allelenames)
            M <- table(fa1, fa2)
            Mn <- as.matrix(unclass(M))
            Fec <- fold(Mn)
            prob.of.sample <- density.ma.gender(acounts.males, 
                Fec)
            ostats <- c(0, prob.of.sample, 0, 0)
            observed = as.double(ostats)
            pval <- xChromosomal(acounts, MaleFemaleCounts, k, 
                observed, Pvalues, 0, 0, 0, 0, 0, 0)
        }
    }
    else {
        nm <- sum(ma, na.rm = TRUE)
        nf <- sum(fe, na.rm = TRUE)
        MaleFemaleCounts <- c(nm, nf)
        k <- length(ma)
        Pvalues <- c(0, 0, 0, 0)
        ft <- rowSums(fe) + colSums(fe)
        acounts <- ma + ft
        acounts.males <- ma
        acounts.females <- ft
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        acounts.males <- acounts.males[ii]
        acounts.females <- acounts.females[ii]
        prob.of.sample <- density.ma.gender(ma, fe)
        ostats <- c(0, prob.of.sample, 0, 0)
        observed = as.double(ostats)
        acounts <- as.integer(acounts)
        pval <- xChromosomal(acounts, MaleFemaleCounts, k, observed, 
            Pvalues, 0, 0, 0, 0, 0, 0)
    }
    if (verbose) {
        cat("Network algorithm for HWE Exact test with multiple alleles\n")
        cat(k, "alleles detected.\n")
        cat(nm, "males and ", nf, "females\n")
        cat("Allele counts:\n")
        res.counts <- rbind(acounts.males, acounts.females, acounts)
        rownames(res.counts) <- c("Males", "Females", "All")
        print(res.counts)
        cat("Probability of the sample:", prob.of.sample, "\n")
        cat("p-value:", pval, "\n")
    }
    out <- list(pval = pval)
}
Function HWNetwork in namespace HardyWeinberg has this body.
ERROR: detected compiler constant(s) modification after .Call invocation of function _HardyWeinberg_xChromosomal from library HardyWeinberg (/var/scratch2/tomas/cran/rcnst/lib/HardyWeinberg/libs/HardyWeinberg.so).
NOTE: .Call function _HardyWeinberg_xChromosomal modified its argument (number 5, type double, length 4)
Fatal error: compiler constants were modified (in .Call?)!

ERROR: modification of compiler constant of type double, length 4
ERROR: the modified value of the constant is:
[1] 0.00000000 0.03370688 0.00000000 0.00000000
ERROR: the original value of the constant is:
[1] 0 0 0 0
ERROR: the modified constant is at index 94
ERROR: the modified constant is in this function body:
{
    if (is.null(ma) & is.null(fe)) {
        alleles <- unique(sort(c(a1, a2)))
        k <- length(alleles)
        allelenames <- paste("A", as.character(alleles), sep = "")
        acounts <- numeric(k)
        for (i in 1:length(alleles)) {
            acounts[i] <- sum(a1 == alleles[i], na.rm = TRUE) + 
                sum(a2 == alleles[i], na.rm = TRUE)
        }
        names(acounts) <- allelenames
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        alleles <- alleles[ii]
        allelenames <- allelenames[ii]
        acounts <- as.integer(acounts)
        names(acounts) <- allelenames
        if (is.null(gender)) {
        }
        else {
            n <- length(gender)
            if (any(gender != 1 & gender != 2)) 
                stop("gender not properly coded (1 for males, 2 for females)")
            nm <- sum(gender == 1, na.rm = TRUE)
            nf <- sum(gender == 2, na.rm = TRUE)
            MaleFemaleCounts <- c(nm, nf)
            Pvalues <- c(0, 0, 0, 0)
            acounts.males <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.males[i] <- sum(a1[gender == 1] == alleles[i], 
                  na.rm = TRUE) + sum(a2[gender == 1] == alleles[i], 
                  na.rm = TRUE)
            }
            names(acounts.males) <- allelenames
            acounts.females <- numeric(k)
            for (i in 1:length(alleles)) {
                acounts.females[i] <- sum(a1[gender == 2] == 
                  alleles[i], na.rm = TRUE) + sum(a2[gender == 
                  2] == alleles[i], na.rm = TRUE)
            }
            names(acounts.females) <- allelenames
            f.a1 <- paste("A", as.character(a1[gender == 2]), 
                sep = "")
            f.a2 <- paste("A", as.character(a2[gender == 2]), 
                sep = "")
            fem <- paste(f.a1, f.a2, sep = "/")
            fa1 <- factor(f.a1, levels = allelenames)
            fa2 <- factor(f.a2, levels = allelenames)
            M <- table(fa1, fa2)
            Mn <- as.matrix(unclass(M))
            Fec <- fold(Mn)
            prob.of.sample <- density.ma.gender(acounts.males, 
                Fec)
            ostats <- c(0, prob.of.sample, 0, 0)
            observed = as.double(ostats)
            pval <- xChromosomal(acounts, MaleFemaleCounts, k, 
                observed, Pvalues, 0, 0, 0, 0, 0, 0)
        }
    }
    else {
        nm <- sum(ma, na.rm = TRUE)
        nf <- sum(fe, na.rm = TRUE)
        MaleFemaleCounts <- c(nm, nf)
        k <- length(ma)
        Pvalues <- c(0, 0, 0, 0)
        ft <- rowSums(fe) + colSums(fe)
        acounts <- ma + ft
        acounts.males <- ma
        acounts.females <- ft
        ii <- order(acounts, decreasing = TRUE)
        acounts <- acounts[ii]
        acounts.males <- acounts.males[ii]
        acounts.females <- acounts.females[ii]
        prob.of.sample <- density.ma.gender(ma, fe)
        ostats <- c(0, prob.of.sample, 0, 0)
        observed = as.double(ostats)
        acounts <- as.integer(acounts)
        pval <- xChromosomal(acounts, MaleFemaleCounts, k, observed, 
            Pvalues, 0, 0, 0, 0, 0, 0)
    }
    if (verbose) {
        cat("Network algorithm for HWE Exact test with multiple alleles\n")
        cat(k, "alleles detected.\n")
        cat(nm, "males and ", nf, "females\n")
        cat("Allele counts:\n")
        res.counts <- rbind(acounts.males, acounts.females, acounts)
        rownames(res.counts) <- c("Males", "Females", "All")
        print(res.counts)
        cat("Probability of the sample:", prob.of.sample, "\n")
        cat("p-value:", pval, "\n")
    }
    out <- list(pval = pval)
}
Function HWNetwork in namespace HardyWeinberg has this body.
Fatal error: compiler constants were modified!


* checking PDF version of manual ... OK
* DONE
Status: 2 ERRORs, 2 NOTEs
