
R Under development (unstable) (2021-02-22 r80031) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mde"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mde')
Welcome to mde. This is mde version 0.3.0.
 Please file issues and feedback at https://www.github.com/Nelson-Gon/mde/issues
Turn this message off using 'suppressPackageStartupMessages(library(mde))'
 Happy Exploration :)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("all_na")
> ### * all_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all_na
> ### Title: Checks that all values are NA
> ### Aliases: all_na
> 
> ### ** Examples
> 
> test <- data.frame(A=c(NA, 2), B= c(NA, NA))
> all_na(test)
    A     B 
FALSE  TRUE 
> test_vec <- c("NA",NA,"nope")
> test_numeric <- c(NA, 2)
> all_na(test_vec)
[1] FALSE
> all_na(test_numeric)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("column_based_recode")
> ### * column_based_recode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: column_based_recode
> ### Title: Conditionally Recode NA values based on other Columns
> ### Aliases: column_based_recode
> 
> ### ** Examples
> 
> df <- structure(list(id = 40:43, v1 = c(NA, 1L, 1L, 1L), v2 = c(NA, 1L, 1L, 1L),
+ v3 = c(NA, 2L, NA, 1L),
+ test = c(1L, 2L, 1L, 3L)), class = "data.frame", row.names = c(NA, -4L))
> # recode test as 0 if all NA, return test otherwise
> column_based_recode(df,values_from = "test", pattern_type = "starts_with", pattern="v")
  id v1 v2 v3 test
1 40 NA NA NA    0
2 41  1  1  2    2
3 42  1  1 NA    1
4 43  1  1  1    3
> 
> 
> 
> cleanEx()
> nameEx("drop_all_na")
> ### * drop_all_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_all_na
> ### Title: Drop columns for which all values are NA
> ### Aliases: drop_all_na
> 
> ### ** Examples
> 
> test <- data.frame(ID= c("A","A","B","A","B"), Vals = c(rep(NA,4),2))
> test2 <- data.frame(ID= c("A","A","B","A","B"), Vals = rep(NA, 5))
> # drop columns where all values are NA
> drop_all_na(test2)
  ID
1  A
2  A
3  B
4  A
5  B
> # drop NAs only if all are NA for a given group, drops group too.
> drop_all_na(test, "ID")
# A tibble: 2 x 2
  ID     Vals
  <chr> <dbl>
1 B        NA
2 B         2
> 
> 
> 
> cleanEx()
> nameEx("drop_na_at")
> ### * drop_na_at
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_na_at
> ### Title: Drop missing values at columns that match a given pattern
> ### Aliases: drop_na_at
> 
> ### ** Examples
> 
> head(drop_na_at(airquality,pattern_type = "starts_with","O"))
  Ozone
1    41
2    36
3    12
4    18
5    28
6    23
> 
> 
> 
> cleanEx()
> nameEx("drop_na_if")
> ### * drop_na_if
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_na_if
> ### Title: Condition based dropping of columns with missing values
> ### Aliases: drop_na_if
> 
> ### ** Examples
> 
> head(drop_na_if(airquality, percent_na = 24))
  Solar.R Wind Temp Month Day
1     190  7.4   67     5   1
2     118  8.0   72     5   2
3     149 12.6   74     5   3
4     313 11.5   62     5   4
5      NA 14.3   56     5   5
6      NA 14.9   66     5   6
> #drop columns that have less tan or equal to 4%
> head(drop_na_if(airquality,sign="lteq", percent_na = 4))
  Ozone Solar.R
1    41     190
2    36     118
3    12     149
4    18     313
5    NA      NA
6    28      NA
> # Drop all except with greater than oe equal to 4% missing but keep Ozone
> head(drop_na_if(airquality, sign="gteq",percent_na = 4, keep_columns = "Ozone"))
  Ozone Wind Temp Month Day
1    41  7.4   67     5   1
2    36  8.0   72     5   2
3    12 12.6   74     5   3
4    18 11.5   62     5   4
5    NA 14.3   56     5   5
6    28 14.9   66     5   6
> 
> 
> 
> cleanEx()
> nameEx("drop_row_if")
> ### * drop_row_if
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_row_if
> ### Title: Conditionally drop rows based on percent missingness
> ### Aliases: drop_row_if
> 
> ### ** Examples
> 
> head(drop_row_if(airquality,sign = "gteq",
+ type = "percent",value=16, as_percent = TRUE))
Dropped 42 rows.
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
7    23     299  8.6   65     5   7
8    19      99 13.8   59     5   8
> # should give the same output as above.
> head(drop_row_if(airquality, sign="gteq", type="percent",value = 0.15, as_percent=FALSE))
Dropped 42 rows.
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
7    23     299  8.6   65     5   7
8    19      99 13.8   59     5   8
> # Drop based on NA counts
> df <- data.frame(A=1:5, B=c(1,NA,NA,2, 3), C= c(1,NA,NA,2,3))
> drop_row_if(df, type="count",value=2,sign="eq")
Dropped 2 rows.
  A B C
1 1 1 1
4 4 2 2
5 5 3 3
> 
> 
> 
> cleanEx()
> nameEx("get_na_counts")
> ### * get_na_counts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_na_counts
> ### Title: Add columnwise/groupwise counts of missing values
> ### Aliases: get_na_counts
> 
> ### ** Examples
> 
> get_na_counts(airquality)
  Ozone Solar.R Wind Temp Month Day
1    37       7    0    0     0   0
> # Grouped counts
> test <- data.frame(Subject = c("A","A","B","B"), res = c(NA,1,2,3),
+ ID = c("1","1","2","2"))
> get_na_counts(test,grouping_cols = c("ID", "Subject"))
# A tibble: 2 x 3
# Groups:   ID [2]
  ID    Subject   res
  <chr> <chr>   <int>
1 1     A           1
2 2     B           0
> 
> 
> 
> cleanEx()
> nameEx("na_summary")
> ### * na_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: na_summary
> ### Title: An all-in-one missingness report
> ### Aliases: na_summary
> 
> ### ** Examples
> 
> na_summary(airquality)
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 2
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!

