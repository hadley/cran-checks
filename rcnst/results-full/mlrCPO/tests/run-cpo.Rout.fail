
R Under development (unstable) (2020-12-22 r79670) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> ISTESTING = TRUE  # nolint
> test_check("mlrCPO", filter = "^cpo_")
Loading required package: mlrCPO
Loading required package: ParamHelpers
Loading required package: mlr
'mlr' is in maintenance mode since July 2019. Future development
efforts will go into its successor 'mlr3' (<https://mlr3.mlr-org.com>).
Starting 2 test processes
══ Skipped tests ═══════════════════════════════════════════════════════════════
● On CRAN (1)

══ Warnings ════════════════════════════════════════════════════════════════════
── Warning (test_cpo_impute.R:140:3): CPO ImputeWrapper ────────────────────────
`expect_is()` was deprecated in the 3rd edition.
i Use `expect_type()`, `expect_s3_class()`, or `expect_s4_class()` instead
Backtrace:
 1. testthat::expect_is(mm, "rpart")
 2. testthat:::edition_deprecate(3, "expect_is()", "Use `expect_type()`, `expect_s3_class()`, or `expect_s4_class()` instead")
── Warning (test_cpo_impute.R:143:3): CPO ImputeWrapper ────────────────────────
`expect_is()` was deprecated in the 3rd edition.
i Use `expect_type()`, `expect_s3_class()`, or `expect_s4_class()` instead
Backtrace:
 1. testthat::expect_is(mm, "WrappedModel")
 2. testthat:::edition_deprecate(3, "expect_is()", "Use `expect_type()`, `expect_s3_class()`, or `expect_s4_class()` instead")

══ Failed tests ════════════════════════════════════════════════════════════════
── Error (???): cpoApplyFunRegrTarget invert works as expected ─────────────────
Error: unimplemented type '...' in 'deparse2buff'

Backtrace:
     █
  1. ├─mlrCPO::`internal%>>%`(...)
  2. ├─mlrCPO:::`%>>%.Task`(...)
  3. │ └─mlrCPO::is.nullcpo(cpo2)
  4. │   └─"NULLCPO" %in% class(x)
  5. └─mlrCPO::cpoApplyFunRegrTarget(identity, identity)
  6.   └─mlrCPO:::checkParamsFeasible(par.set, present.pars)
  7.     ├─ParamHelpers::isFeasible(par.set$pars[[n]], par.vals[[n]])
  8.     └─ParamHelpers:::isFeasible.Param(par.set$pars[[n]], par.vals[[n]])
  9.       └─ParamHelpers:::constraintsOkParam(par, x)
 10.         └─ParamHelpers::isSpecialValue(par, x)
 11.           └─BBmisc::vlapply(...)
 12.             └─base::vapply(X = x, FUN = fun, ..., FUN.VALUE = NA, USE.NAMES = use.names)
 13.               └─ParamHelpers:::FUN(X[[i]], ...)
 14.                 ├─base::isTRUE(all.equal(x, special.val))
 15.                 ├─base::all.equal(x, special.val)
 16.                 └─base::all.equal.function(x, special.val)
 17.                   └─base::all.equal.environment(...)
 18.                     └─base::all.equal.list(...)
 19.                       ├─base::all.equal(...)
 20.                       └─base::all.equal.function(...)
 21.                         └─base::all.equal.environment(...)
 22.                           └─base::all.equal.list(...)
 23.                             ├─base::all.equal(...)
 24.                             └─base::all.equal.function(...)
 25.                               └─base::all.equal.language(target, current, ...)
 26.                                 ├─base::paste(deparse(current), collapse = "\n")
 27.                                 └─base::deparse(current)
── Error (???): cpoApplyFunRegrTarget invert se with gauss quadrature works ────
Error: argument "current" is missing, with no default
Backtrace:
     █
  1. ├─mlrCPO::`internal%>>%`(...)
  2. ├─mlrCPO:::`%>>%.Task`(...)
  3. │ └─mlrCPO::is.nullcpo(cpo2)
  4. │   └─"NULLCPO" %in% class(x)
  5. └─mlrCPO::cpoApplyFunRegrTarget(...)
  6.   └─mlrCPO:::checkParamsFeasible(par.set, present.pars)
  7.     ├─ParamHelpers::isFeasible(par.set$pars[[n]], par.vals[[n]])
  8.     └─ParamHelpers:::isFeasible.Param(par.set$pars[[n]], par.vals[[n]])
  9.       └─ParamHelpers:::constraintsOkParam(par, x)
 10.         └─ParamHelpers::isSpecialValue(par, x)
 11.           └─BBmisc::vlapply(...)
 12.             └─base::vapply(X = x, FUN = fun, ..., FUN.VALUE = NA, USE.NAMES = use.names)
 13.               └─ParamHelpers:::FUN(X[[i]], ...)
 14.                 ├─base::isTRUE(all.equal(x, special.val))
 15.                 ├─base::all.equal(x, special.val)
 16.                 └─base::all.equal.function(x, special.val)
 17.                   └─base::all.equal.environment(...)
 18.                     └─base::all.equal.list(...)
 19.                       ├─base::all.equal(...)
 20.                       └─base::all.equal.default(...)
 21.                         └─base::all.equal.list(target, current, ...)

[ FAIL 2 | WARN 2 | SKIP 1 | PASS 408 ]
Error: Test failures
Execution halted
