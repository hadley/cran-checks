
R Under development (unstable) (2021-02-20 r80030) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rsetse"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rsetse')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SETSe")
> ### * SETSe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SETSe
> ### Title: SETSe algorithm The basic SETSe function.
> ### Aliases: SETSe
> 
> ### ** Examples
> 
> set.seed(234) #set the random see for generating the network
> g <- generate_peels_network(type = "E")
> embeddings <- g %>%
+ #prepare the network for a binary embedding
+ prepare_SETSe_binary(., node_names = "name", k = 1000, 
+                      force_var = "class", 
+                      positive_value = "A") %>%
+ #embed the network using SETSe
+   SETSe()
> 
> 
> 
> cleanEx()
> nameEx("SETSe_auto")
> ### * SETSe_auto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SETSe_auto
> ### Title: SETSe embedding with automatic drag and timestep selection
> ### Aliases: SETSe_auto
> 
> ### ** Examples
> 
> 
> set.seed(234) #set the random see for generating the network
> 
> g <- generate_peels_network(type = "E")
> 
> g_prep <- g %>%
+ #prepare the network for a binary embedding
+ prepare_SETSe_binary(., node_names = "name", k = 1000, 
+                      force_var = "class", 
+                      positive_value = "A")
>                      
> #embed the network using auto SETSe with default settings
> embeddings <- SETSe_auto(g_prep)
> 
> 
> 
> 
> cleanEx()
> nameEx("SETSe_bicomp")
> ### * SETSe_bicomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SETSe_bicomp
> ### Title: SETSe embedding on each bi-connected component using SETSe_auto
> ### Aliases: SETSe_bicomp
> 
> ### ** Examples
> 
> set.seed(234) #set the random see for generating the network
> g <- generate_peels_network(type = "E")
> embeddings <- g %>%
+ #prepare the network for a binary embedding
+ prepare_SETSe_binary(., node_names = "name", k = 1000, 
+                      force_var = "class", 
+                      positive_value = "A") %>%
+ #embed the network using  SETSe_bicomp
+   SETSe_bicomp(tol = 0.02)
> 
> 
> 
> cleanEx()
> nameEx("SETSe_expanded")
> ### * SETSe_expanded
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SETSe_expanded
> ### Title: SETSe embedding showing full convergence history
> ### Aliases: SETSe_expanded
> 
> ### ** Examples
> 
> 
> g_prep <- biconnected_network %>%
+  prepare_SETSe_continuous(., node_names = "name", force_var = "force", k = NULL)
> 
> #the base configuration does not work
> divergent_result <- SETSe_expanded(g_prep, k = "weight", tstep = 0.1)
System has diverged. Process terminating
> 
> #with a smaller timestep the algorithm converges
> convergent_result <- SETSe_expanded(g_prep, k = "weight", tstep = 0.01)
> 
> ## Not run: 
> ##D library(ggplot2)
> ##D #plot the results for a given node
> ##D convergent_result %>%
> ##D  ggplot(aes(x = t, y = net_force, colour = node)) + geom_line()
> ##D #replot with divergent_result to see what it looks like
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("SETSe_shift")
> ### * SETSe_shift
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SETSe_shift
> ### Title: SETSe algorithm with automatic timestep adjustment
> ### Aliases: SETSe_shift
> 
> ### ** Examples
> 
> ## Not run: 
> ##D biconnected_network %>%
> ##D prepare_SETSe_continuous(., node_names = "name", force_var = "force") %>%
> ##D #embed the network using SETSe
> ##D SETSe_shift(., k = "weight", tstep = 0.000029)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("biconnected_network")
> ### * biconnected_network
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biconnected_network
> ### Title: A simple network made of three bi-connected components
> ### Aliases: biconnected_network
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot(biconnected_network)
> 
> 
> 
> cleanEx()
> nameEx("calc_spring_area")
> ### * calc_spring_area
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_spring_area
> ### Title: Calculate the cross sectional area of the edge
> ### Aliases: calc_spring_area
> 
> ### ** Examples
> 
>  
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> set.seed(234)
> g_prep <- generate_peels_network("A") %>%
+  set.edge.attribute(., name = "edge_characteristic", value = rep(1:16, each = 10))
> 
> g <- calc_spring_area(g_prep, value = "edge_characteristic", minimum_value = 10, range = 20)
> 
> get.edge.attribute(g, "Area")
  [1] 10.00000 10.00000 10.00000 10.00000 10.00000 10.00000 10.00000 10.00000
  [9] 10.00000 10.00000 11.33333 11.33333 11.33333 11.33333 11.33333 11.33333
 [17] 11.33333 11.33333 11.33333 11.33333 12.66667 12.66667 12.66667 12.66667
 [25] 12.66667 12.66667 12.66667 12.66667 12.66667 12.66667 14.00000 14.00000
 [33] 14.00000 14.00000 14.00000 14.00000 14.00000 14.00000 14.00000 14.00000
 [41] 15.33333 15.33333 15.33333 15.33333 15.33333 15.33333 15.33333 15.33333
 [49] 15.33333 15.33333 16.66667 16.66667 16.66667 16.66667 16.66667 16.66667
 [57] 16.66667 16.66667 16.66667 16.66667 18.00000 18.00000 18.00000 18.00000
 [65] 18.00000 18.00000 18.00000 18.00000 18.00000 18.00000 19.33333 19.33333
 [73] 19.33333 19.33333 19.33333 19.33333 19.33333 19.33333 19.33333 19.33333
 [81] 20.66667 20.66667 20.66667 20.66667 20.66667 20.66667 20.66667 20.66667
 [89] 20.66667 20.66667 22.00000 22.00000 22.00000 22.00000 22.00000 22.00000
 [97] 22.00000 22.00000 22.00000 22.00000 23.33333 23.33333 23.33333 23.33333
[105] 23.33333 23.33333 23.33333 23.33333 23.33333 23.33333 24.66667 24.66667
[113] 24.66667 24.66667 24.66667 24.66667 24.66667 24.66667 24.66667 24.66667
[121] 26.00000 26.00000 26.00000 26.00000 26.00000 26.00000 26.00000 26.00000
[129] 26.00000 26.00000 27.33333 27.33333 27.33333 27.33333 27.33333 27.33333
[137] 27.33333 27.33333 27.33333 27.33333 28.66667 28.66667 28.66667 28.66667
[145] 28.66667 28.66667 28.66667 28.66667 28.66667 28.66667 30.00000 30.00000
[153] 30.00000 30.00000 30.00000 30.00000 30.00000 30.00000 30.00000 30.00000
> 
> 
> 
> 
> cleanEx()

detaching ‘package:igraph’

> nameEx("calc_spring_constant")
> ### * calc_spring_constant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_spring_constant
> ### Title: Calculate the spring constant
> ### Aliases: calc_spring_constant
> 
> ### ** Examples
> 
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> set.seed(234)
> g_prep <- generate_peels_network("A") %>%
+  set.edge.attribute(., name = "edge_characteristic", value = rep(1:16, each = 10)) %>%
+  #set some pretend Young's modulus value
+  set.edge.attribute(., name = "E", value = rep(c(1e5, 5e5, 2e5, 3e5), each = 40)) %>%
+  #calculate the spring area from another edge characteristic
+  calc_spring_area(., value = "edge_characteristic", minimum_value = 10, range = 20) %>%
+  prepare_SETSe_binary(., node_names = "name", k = NULL, 
+                     force_var = "class", 
+                     positive_value = "A")
> 
> g <- calc_spring_constant(g_prep, youngs_mod = "E", A = "Area", distance = "distance")
> 
> 
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:igraph’

> nameEx("calc_tension_strain")
> ### * calc_tension_strain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_tension_strain
> ### Title: Calculate line tension and strain from the topology and node
> ###   embeddings
> ### Aliases: calc_tension_strain
> 
> ### ** Examples
> 
> 
> set.seed(234) #set the random see for generating the network
> g <- generate_peels_network(type = "E") %>%
+ #prepare the network for a binary embedding
+ prepare_SETSe_binary(., node_names = "name", k = 1000, 
+                      force_var = "class", 
+                      positive_value = "A") 
> #embed the network using auto setse
>  embeddings <- SETSe_auto(g)
>   
>  edge_embeddings_df <- calc_tension_strain(g, embeddings$node_embeddings)
>  all.equal(embeddings$edge_embeddings, edge_embeddings_df) 
[1] TRUE
>  
>  
> 
> 
> 
> cleanEx()
> nameEx("create_balanced_blocks")
> ### * create_balanced_blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_balanced_blocks
> ### Title: Create balanced blocks
> ### Aliases: create_balanced_blocks
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> #create a list of balanced network using the biconnected_network dataset
> balanced_list <-create_balanced_blocks(biconnected_network, 
+ bigraph = biconnected_components(biconnected_network))
> 
> #count the edges in each of the bi-components
> sapply(balanced_list, ecount)
[1]  6  1 12
> 
> 
> 
> 
> cleanEx()

detaching ‘package:igraph’

> nameEx("create_node_edge_df")
> ### * create_node_edge_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_node_edge_df
> ### Title: Create dataframe of node and aggregated edge embeddings
> ### Aliases: create_node_edge_df
> 
> ### ** Examples
> 
> 
> embeddings_data <- biconnected_network %>%
+ prepare_SETSe_continuous(., node_names = "name", force_var = "force") %>%
+  SETSe_auto(., k = "weight")
> 
> out <- create_node_edge_df(embeddings_data, function_names = c("mean", "mode", "sum"))
> 
> 
> 
> 
> cleanEx()
> nameEx("generate_peels_network")
> ### * generate_peels_network
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_peels_network
> ### Title: Create a random Peel network
> ### Aliases: generate_peels_network
> 
> ### ** Examples
> 
> set.seed(234)
> g <- generate_peels_network(type = "E")
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("mass_adjuster")
> ### * mass_adjuster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mass_adjuster
> ### Title: Mass adjuster
> ### Aliases: mass_adjuster
> 
> ### ** Examples
> 
> set.seed(234) #set the random see for generating the network
> 
> g <- generate_peels_network(type = "E") %>%
+ prepare_SETSe_binary(., node_names = "name", k = 1000, 
+                      force_var = "class", 
+                      positive_value = "A")
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 7
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!

