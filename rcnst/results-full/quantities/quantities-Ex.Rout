
R Under development (unstable) (2021-02-17 r80023) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "quantities"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('quantities')
Loading required package: units
udunits system database from /usr/share/udunits
Loading required package: errors
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Extract.quantities")
> ### * Extract.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Extract.quantities
> ### Title: Extract or Replace Parts of an Object
> ### Aliases: Extract.quantities [.quantities [[.quantities [<-.quantities
> ###   [[<-.quantities
> 
> ### ** Examples
> 
> x <- set_quantities(1:3, m/s, 0.1)
> y <- set_quantities(4:6, m/s, 0.2)
> (z <- rbind(x, y))
Units: [m/s]
Errors: 0.1 0.2 0.1 0.2 0.1 ...
  [,1] [,2] [,3]
x    1    2    3
y    4    5    6
> z[2, 2]
5.0(2) [m/s]
> z[2, 2] <- -1
> errors(z[[1, 2]]) <- 0.8
> z[, 2]
Units: [m/s]
Errors: 0.8 0.0
 x  y 
 2 -1 
> 
> 
> 
> 
> cleanEx()
> nameEx("as.data.frame.quantities")
> ### * as.data.frame.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.data.frame.quantities
> ### Title: Coerce to a Data Frame
> ### Aliases: as.data.frame.quantities
> 
> ### ** Examples
> 
> x <- set_quantities(1:3, m/s, 0.1)
> y <- set_quantities(4:6, m/s, 0.2)
> (z <- cbind(x, y))
Units: [m/s]
Errors: 0.1 0.1 0.1 0.2 0.2 ...
     x y
[1,] 1 4
[2,] 2 5
[3,] 3 6
> as.data.frame(z)
             x            y
1 1.0(1) [m/s] 4.0(2) [m/s]
2 2.0(1) [m/s] 5.0(2) [m/s]
3 3.0(1) [m/s] 6.0(2) [m/s]
> 
> 
> 
> 
> cleanEx()
> nameEx("as.list.quantities")
> ### * as.list.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.list.quantities
> ### Title: Coerce to a List
> ### Aliases: as.list.quantities
> 
> ### ** Examples
> 
> x <- set_quantities(1:3, m/s, 0.1)
> as.list(x)
Warning in `units<-.numeric`(`*tmp*`, value = value[[1]]) :
  numeric value 2 is ignored in unit assignment
Warning in `units<-.numeric`(`*tmp*`, value = value[[1]]) :
  numeric value 3 is ignored in unit assignment
[[1]]
1.0(1) [m/s]

[[2]]
2.0(1) [m/s]

[[3]]
3.0(1) [m/s]

> 
> 
> 
> 
> cleanEx()
> nameEx("as.matrix.quantities")
> ### * as.matrix.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.matrix.quantities
> ### Title: Coerce to a Matrix
> ### Aliases: as.matrix.quantities
> 
> ### ** Examples
> 
> as.matrix(set_quantities(1:3, m/s, 0.1))
Units: [m/s]
Errors: 0.1 0.1 0.1
     [,1]
[1,]    1
[2,]    2
[3,]    3
> 
> 
> 
> 
> cleanEx()
> nameEx("c.quantities")
> ### * c.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c.quantities
> ### Title: Combine Values into a Vector or List
> ### Aliases: c.quantities
> 
> ### ** Examples
> 
> c(set_quantities(1, m/s, 0.2), set_quantities(30, km/h, 0.1))
Units: [m/s]
Errors: 0.20000000 0.02777778
[1] 1.000000 8.333333
> 
> 
> 
> 
> cleanEx()
> nameEx("cbind.quantities")
> ### * cbind.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cbind.quantities
> ### Title: Combine R Objects by Rows or Columns
> ### Aliases: cbind.quantities rbind.quantities
> 
> ### ** Examples
> 
> x <- set_quantities(1, m/s, 0.1)
> y <- set_quantities(1:3, m/s, 0.2)
> z <- set_quantities(8:10, m/s, 0.1)
> (m <- cbind(x, y)) # the '1' (= shorter vector) is recycled
Units: [m/s]
Errors: 0.1 0.1 0.1 0.2 0.2 ...
     x y
[1,] 1 1
[2,] 1 2
[3,] 1 3
> (m <- cbind(m, z)[, c(1, 3, 2)]) # insert a column
Units: [m/s]
Errors: 0.1 0.1 0.1 0.1 0.1 ...
     x  z y
[1,] 1  8 1
[2,] 1  9 2
[3,] 1 10 3
> (m <- rbind(m, z)) # insert a row
Units: [m/s]
Errors: 0.1 0.1 0.1 0.1 0.1 ...
  x  z  y
  1  8  1
  1  9  2
  1 10  3
z 8  9 10
> 
> 
> 
> 
> cleanEx()
> nameEx("diff.quantities")
> ### * diff.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diff.quantities
> ### Title: Lagged Differences
> ### Aliases: diff.quantities
> 
> ### ** Examples
> 
> diff(set_quantities(1:10, m/s, 0.1), 2)
Units: [m/s]
Errors: 0.1414214 0.1414214 0.1414214 0.1414214 0.1414214 ...
[1] 2 2 2 2 2 2 2 2
> diff(set_quantities(1:10, m/s, 0.1), 2, 2)
Units: [m/s]
Errors: 0.2 0.2 0.2 0.2 0.2 ...
[1] 0 0 0 0 0 0
> x <- cumsum(cumsum(set_quantities(1:10, m/s, 0.1)))
> diff(x, lag = 2)
Units: [m/s]
Errors: 0.2645751 0.3605551 0.4582576 0.5567764 0.6557439 ...
[1]   9  16  25  36  49  64  81 100
> diff(x, differences = 2)
Units: [m/s]
Errors: 0.3605551 0.5000000 0.6403124 0.7810250 0.9219544 ...
[1]  3  4  5  6  7  8  9 10
> 
> 
> 
> 
> cleanEx()
> nameEx("groupGeneric.quantities")
> ### * groupGeneric.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupGeneric.quantities
> ### Title: S3 Group Generic Functions
> ### Aliases: groupGeneric.quantities Math.quantities Ops.quantities
> ###   Summary.quantities
> 
> ### ** Examples
> 
> x <- set_quantities(1:3, m/s, 0.1)
> exp(x)
Warning in Math.units(x) : Operation exp not meaningful for units
Errors: 0.2718282 0.7389056 2.0085537
[1]  2.718282  7.389056 20.085537
> log(x)
Units: [(ln(re 1 m.s-1))]
Errors: 0.10000000 0.05000000 0.03333333
[1] 0.0000000 0.6931472 1.0986123
> cumsum(x)
Units: [m/s]
Errors: 0.1000000 0.1414214 0.1732051
[1] 1 3 6
> cumprod(x)
Warning in Math.units(x) : Operation cumprod not meaningful for units
Errors: 0.1000000 0.2236068 0.7000000
[1] 1 2 6
> 
> a <- set_quantities(1:3, m/s, 0.1)
> b <- set_quantities(1:3, m/s, 0.1)
> a + b
Units: [m/s]
Errors: 0.1414214 0.1414214 0.1414214
[1] 2 4 6
> a * b
Units: [m^2/s^2]
Errors: 0.1414214 0.2828427 0.4242641
[1] 1 4 9
> a / b
Units: [1]
Errors: 0.14142136 0.07071068 0.04714045
[1] 1 1 1
> a = set_quantities(1:5, m, 0.1)
> a %/% a
Units: [1]
Errors: 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 3.292723e-10
[1] 1 1 1 1 1
> a %/% set_quantities(2)
Units: [m]
Errors: 0.05 0.05 0.05 0.05 0.05
[1] 0 1 1 2 2
> set_quantities(1:5, m^2, 0.1) %/% set_quantities(2, m, 0.1)
Units: [m]
Errors: 0.05590170 0.07071068 0.09013878 0.11180340 0.13462912
[1] 0 1 1 2 2
> a %% a
Units: [m]
Errors: 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 3.292723e-10
[1] 0 0 0 0 0
> a %% set_quantities(2)
Units: [m]
Errors: 0.05 0.05 0.05 0.05 0.05
[1] 1 0 1 0 1
> c(min(x), max(x))
Units: [m/s]
[1] 0.9 3.1
> range(x)
Units: [m/s]
[1] 0.9 3.1
> sum(x)
6.0(2) [m/s]
> 
> 
> 
> 
> cleanEx()
> nameEx("parse_quantities")
> ### * parse_quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_quantities
> ### Title: Parse Units and Errors
> ### Aliases: parse_quantities parse_units parse_errors
> 
> ### ** Examples
> 
> parse_quantities("(1.6021766208 +/- .0000000098) e-19 C")
1.60217662(1)e-19 [C]
> parse_quantities("1.6021766208(98) e-19 C")
1.60217662(1)e-19 [C]
> parse_units("1.6021766208 e-19 C")
1.602177e-19 [C]
> parse_errors("1.6021766208(98) e-19")
1.60217662(1)e-19
> 
> # quantities are converted to the first unit
> parse_quantities(c("12.34(2) m/s", "36.5(1) km/h"))
Units: [m/s]
Errors: 0.02000000 0.02777778
[1] 12.34000 10.13889
> 
> # or kept as a list of mixed units
> parse_quantities(c("1.02(5) g", "2.51(0.01) V", "(3.23 +/- 0.12) m"))
Mixed units: V (1), g (1), m (1) 
1.02(5) [g], 2.51(1) [V], 3.2(1) [m] 
> 
> 
> 
> 
> cleanEx()
> nameEx("quantities")
> ### * quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantities
> ### Title: Handle Measurement Units and Uncertainty on a Numeric Vector
> ### Aliases: quantities quantities<- set_quantities
> 
> ### ** Examples
> 
> x = 1:3
> class(x)
[1] "integer"
> x
[1] 1 2 3
> quantities(x) <- list("m/s", 0.1)
> class(x)
[1] "quantities" "units"      "errors"    
> x
Units: [m/s]
Errors: 0.1 0.1 0.1
[1] 1 2 3
> 
> (x <- set_quantities(x, m/s, seq(0.1, 0.3, 0.1)))
Units: [m/s]
Errors: 0.1 0.2 0.3
[1] 1 2 3
> 
> 
> 
> 
> cleanEx()
> nameEx("rep.quantities")
> ### * rep.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rep.quantities
> ### Title: Replicate Elements of Vectors and Lists
> ### Aliases: rep.quantities
> 
> ### ** Examples
> 
> rep(set_quantities(1, m/s, 0.1), 4)
Units: [m/s]
Errors: 0.1 0.1 0.1 0.1
[1] 1 1 1 1
> 
> 
> 
> 
> cleanEx()
> nameEx("t.quantities")
> ### * t.quantities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: t.quantities
> ### Title: Matrix Transpose
> ### Aliases: t.quantities
> 
> ### ** Examples
> 
> a <- matrix(1:30, 5, 6)
> quantities(a) <- list("m/s", 1:30)
> t(a)
Units: [m/s]
Errors:  1  6 11 16 21 ...
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10
[3,]   11   12   13   14   15
[4,]   16   17   18   19   20
[5,]   21   22   23   24   25
[6,]   26   27   28   29   30
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.453 0.075 1.643 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
