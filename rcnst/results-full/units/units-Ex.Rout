
R Under development (unstable) (2021-02-26 r80036) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "units"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('units')
udunits database from /usr/share/udunits/udunits2.xml
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Math.units")
> ### * Math.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Math.units
> ### Title: Mathematical operations for units objects
> ### Aliases: Math.units
> 
> ### ** Examples
> 
> # roundings, cummulative functions
> x <- set_units(sqrt(1:10), m/s)
> signif(x, 2)
Units: [m/s]
 [1] 1.0 1.4 1.7 2.0 2.2 2.4 2.6 2.8 3.0 3.2
> cumsum(x)
Units: [m/s]
 [1]  1.000000  2.414214  4.146264  6.146264  8.382332 10.831822 13.477573
 [8] 16.306001 19.306001 22.468278
> 
> # trigonometry
> sin(x) # not meaningful
Warning in Math.units(x) : Operation sin not meaningful for units
 [1]  0.84147098  0.98776595  0.98702664  0.90929743  0.78674913  0.63815764
 [7]  0.47577184  0.30807174  0.14112001 -0.02068353
> x <- set_units(sqrt(1:10), rad)
> sin(x)
Units: [1]
 [1]  0.84147098  0.98776595  0.98702664  0.90929743  0.78674913  0.63815764
 [7]  0.47577184  0.30807174  0.14112001 -0.02068353
> cos(x)
Units: [1]
 [1]  0.5403023  0.1559437 -0.1605565 -0.4161468 -0.6172729 -0.7699057
 [7] -0.8795687 -0.9513631 -0.9899925 -0.9997861
> x <- set_units(seq(0, 1, 0.1), 1)
> asin(x)
Units: [rad]
 [1] 0.0000000 0.1001674 0.2013579 0.3046927 0.4115168 0.5235988 0.6435011
 [8] 0.7753975 0.9272952 1.1197695 1.5707963
> acos(x)
Units: [rad]
 [1] 1.5707963 1.4706289 1.3694384 1.2661037 1.1592795 1.0471976 0.9272952
 [8] 0.7953988 0.6435011 0.4510268 0.0000000
> 
> # logarithms
> x <- set_units(sqrt(1:10), W)
> log(x) # base exp(1)
Units: [ln(re 1 W)]
 [1] 0.0000000 0.3465736 0.5493061 0.6931472 0.8047190 0.8958797 0.9729551
 [8] 1.0397208 1.0986123 1.1512925
> log(x, base = 3)
Units: [0.910239226626837 ln(re 1 W)]
 [1] 0.0000000 0.3154649 0.5000000 0.6309298 0.7324868 0.8154649 0.8856219
 [8] 0.9463946 1.0000000 1.0479516
> log2(x)
Units: [lb(re 1 W)]
 [1] 0.0000000 0.5000000 0.7924813 1.0000000 1.1609640 1.2924813 1.4036775
 [8] 1.5000000 1.5849625 1.6609640
> log10(x)
Units: [lg(re 1 W)]
 [1] 0.0000000 0.1505150 0.2385606 0.3010300 0.3494850 0.3890756 0.4225490
 [8] 0.4515450 0.4771213 0.5000000
> set_units(x, dBW) # decibel-watts
Units: [dBW]
 [1] 0.000000 1.505150 2.385606 3.010300 3.494850 3.890756 4.225490 4.515450
 [9] 4.771213 5.000000
> set_units(x, dBm) # decibel-milliwatts
Units: [dBm]
 [1] 30.00000 31.50515 32.38561 33.01030 33.49485 33.89076 34.22549 34.51545
 [9] 34.77121 35.00000
> 
> 
> 
> cleanEx()
> nameEx("Ops.units")
> ### * Ops.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ops.units
> ### Title: S3 Ops Group Generic Functions for units objects
> ### Aliases: Ops.units
> 
> ### ** Examples
> 
> a <- set_units(1:3, m/s)
> b <- set_units(1:3, m/s)
> a + b
Units: [m/s]
[1] 2 4 6
> a * b
Units: [m^2/s^2]
[1] 1 4 9
> a / b
Units: [1]
[1] 1 1 1
> a <- as_units("kg m-3")
> b <- set_units(1, kg/m/m/m)
> a + b
2 [kg/m^3]
> a = set_units(1:5, m)
> a %/% a
Units: [1]
[1] 1 1 1 1 1
> a %/% set_units(2)
Units: [m]
[1] 0 1 1 2 2
> set_units(1:5, m^2) %/% set_units(2, m)
Units: [m]
[1] 0 1 1 2 2
> a %% a
Units: [m]
[1] 0 0 0 0 0
> a %% set_units(2 )
Units: [m]
[1] 1 0 1 0 1
> 
> 
> 
> cleanEx()
> nameEx("as_difftime")
> ### * as_difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_difftime
> ### Title: convert units object into difftime object
> ### Aliases: as_difftime
> 
> ### ** Examples
> 
> 
> t1 = Sys.time()
> t2 = t1 + 3600
> d = t2 - t1
> du <- as_units(d)
> dt = as_difftime(du)
> class(dt)
[1] "difftime"
> dt
Time difference of 1 hours
> 
> 
> 
> cleanEx()
> nameEx("boxplot.units")
> ### * boxplot.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boxplot.units
> ### Title: boxplot for unit objects
> ### Aliases: boxplot.units
> 
> ### ** Examples
> 
> units_options(parse = FALSE) # otherwise we break on the funny symbol!
> u = set_units(rnorm(100), degree_C)
> boxplot(u)
> 
> 
> 
> cleanEx()
> nameEx("deparse_unit")
> ### * deparse_unit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deparse_unit
> ### Title: deparse unit to string in product power form (e.g. km m-2 s-1)
> ### Aliases: deparse_unit
> 
> ### ** Examples
> 
> u = as_units("kg m-2 s-1", implicit_exponents = TRUE)
> u
1 [kg/m^2/s]
> deparse_unit(u)
[1] "kg m-2 s-1"
> 
> 
> 
> cleanEx()
> nameEx("drop_units")
> ### * drop_units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_units
> ### Title: Drop Units
> ### Aliases: drop_units drop_units.units drop_units.data.frame
> ###   drop_units.mixed_units
> 
> ### ** Examples
> 
> x <- 1
> y <- set_units(x, m/s)
> 
> # this succeeds
> drop_units(y)
[1] 1
> set_units(y, NULL)
[1] 1
> set_units(x, NULL)
[1] 1
> 
> ## Not run: 
> ##D # this fails
> ##D drop_units(x)
> ## End(Not run)
> 
> df <- data.frame(x=x, y=y)
> df
  x       y
1 1 1 [m/s]
> drop_units(df)
  x y
1 1 1
> 
> 
> 
> 
> cleanEx()
> nameEx("hist.units")
> ### * hist.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hist.units
> ### Title: histogram for unit objects
> ### Aliases: hist.units
> 
> ### ** Examples
> 
> units_options(parse = FALSE) # otherwise we break on the funny symbol!
> u = set_units(rnorm(100), degree_C)
> hist(u)
> 
> 
> 
> cleanEx()
> nameEx("install_unit")
> ### * install_unit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_unit
> ### Title: Define or remove units
> ### Aliases: install_unit remove_unit
> 
> ### ** Examples
> 
> # define a fortnight
> install_unit("fn", "2 week", "fortnight")
> year <- as_units("year")
> set_units(year, fn)        # by symbol
26.08873 [fn]
> set_units(year, fortnight) # by name
26.08873 [fortnight]
> # clean up
> remove_unit("fn", "fortnight")
> 
> # working with currencies
> install_unit("dollar")
> install_unit("euro", "1.22 dollar")
> install_unit("yen", "0.0079 euro")
> set_units(as_units("dollar"), yen)
103.756 [yen]
> # clean up
> remove_unit(c("dollar", "euro", "yen"))
> 
> # an example from microbiology
> cfu_symbols <- c("CFU", "cfu")
> cfu_names <- c("colony_forming_unit", "ColonyFormingUnit")
> install_unit("cell")
> install_unit(cfu_symbols, "3.4 cell", cfu_names)
> cell <- set_units(2.5e5, cell)
> vol <- set_units(500, ul)
> set_units(cell/vol, "cfu/ml")
147058.8 [cfu/ml]
> set_units(cell/vol, "CFU/ml")
147058.8 [CFU/ml]
> set_units(cell/vol, "colony_forming_unit/ml")
147058.8 [colony_forming_unit/ml]
> set_units(cell/vol, "ColonyFormingUnit/ml")
147058.8 [ColonyFormingUnit/ml]
> # clean up
> remove_unit(c("cell", cfu_symbols), cfu_names)
> 
> 
> 
> 
> cleanEx()
> nameEx("keep_units")
> ### * keep_units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keep_units
> ### Title: Apply a function keeping units
> ### Aliases: keep_units
> 
> ### ** Examples
> 
> x <- set_units(1:5, m)
> keep_units(drop_units, x)
Units: [m]
[1] 1 2 3 4 5
> 
> 
> 
> 
> cleanEx()
> nameEx("load_units_xml")
> ### * load_units_xml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_units_xml
> ### Title: Load a unit system
> ### Aliases: load_units_xml
> 
> ### ** Examples
> 
> # load a new unit system
> load_units_xml(system.file("share/udunits/udunits2-base.xml", package="units"))
> ## Not run: 
> ##D set_units(1, rad) # doesn'twork
> ## End(Not run)
> 
> # reload the default unit system
> load_units_xml()
> set_units(1, rad) # works again
1 [rad]
> 
> 
> 
> 
> cleanEx()
> nameEx("mixed_units")
> ### * mixed_units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mixed_units
> ### Title: Create or convert to a mixed units list-column
> ### Aliases: mixed_units units<-.mixed_units
> 
> ### ** Examples
> 
> a <- 1:4
> u <- c("m/s", "km/h", "mg/L", "g")
> mixed_units(a, u)
Mixed units: g (1), km/h (1), m/s (1), mg/L (1) 
1 [m/s], 2 [km/h], 3 [mg/L], 4 [g] 
> units(a) = as_units("m/s")
> mixed_units(a) # converts to mixed representation
Mixed units: m/s (4) 
1 [m/s], 2 [m/s], 3 [m/s], 4 [m/s] 
> 
> 
> 
> cleanEx()
> nameEx("plot.units")
> ### * plot.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.units
> ### Title: create axis label with appropriate labels
> ### Aliases: plot.units make_unit_label
> 
> ### ** Examples
> 
> oldpar = par(mar = par("mar") + c(0, .3, 0, 0))
> displacement = mtcars$disp * as_units("in")^3
> # an example that would break if parse were (default) TRUE, since 'in' is a reserved word:
> units_options(parse=FALSE)
> make_unit_label("displacement", displacement)
[1] "displacement [in^3]"
> units_options(parse=TRUE)
> units(displacement) = make_units(cm^3)
> weight = mtcars$wt * 1000 * make_units(lb)
> units(weight) = make_units(kg)
> plot(weight, displacement)
> units_options(group = c("(", ")") )  # parenthesis instead of square brackets
> plot(weight, displacement)
> units_options(sep = c("~~~", "~"), group = c("", ""))  # no brackets; extra space
> plot(weight, displacement)
> units_options(sep = c("~", "~~"), group = c("[", "]"))
> gallon = as_units("gallon")
> consumption = mtcars$mpg * make_units(mi/gallon)
> units(consumption) = make_units(km/l)
> plot(displacement, consumption) # division in consumption
> units_options(negative_power = TRUE) # division becomes ^-1
> plot(displacement, consumption)
> plot(1/displacement, 1/consumption)
> par(oldpar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("seq.units")
> ### * seq.units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seq.units
> ### Title: seq method for units objects
> ### Aliases: seq.units
> 
> ### ** Examples
> 
> seq(to = set_units(10, m), by = set_units(1, m), length.out = 5)
Units: [m]
[1]  6  7  8  9 10
> seq(set_units(10, m), by = set_units(1, m), length.out = 5)
Units: [m]
[1] 10 11 12 13 14
> seq(set_units(10, m), set_units(19, m))
Units: [m]
 [1] 10 11 12 13 14 15 16 17 18 19
> seq(set_units(10, m), set_units(.1, km), set_units(10000, mm))
Units: [m]
 [1]  10  20  30  40  50  60  70  80  90 100
> 
> 
> 
> cleanEx()
> nameEx("ud_are_convertible")
> ### * ud_are_convertible
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ud_are_convertible
> ### Title: Test if two units are convertible
> ### Aliases: ud_are_convertible
> 
> ### ** Examples
> 
> ud_are_convertible("m", "km")
[1] TRUE
> a <- set_units(1:3, m/s)
> ud_are_convertible(units(a), "km/h")
[1] TRUE
> ud_are_convertible("s", "kg")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("units")
> ### * units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: units
> ### Title: Handle measurement units
> ### Aliases: units units<-.numeric units<-.units units<-.logical
> ###   units.units units.symbolic_units set_units make_units as_units
> ###   as_units.default as_units.units as_units.symbolic_units
> ###   as_units.difftime as_units.character as_units.call
> ###   as_units.expression as_units.name as_units.POSIXt as_units.Date
> 
> ### ** Examples
> 
> x = 1:3
> class(x)
[1] "integer"
> units(x) <- as_units("m/s")
> class(x)
[1] "units"
> y = 2:5
> a <- set_units(1:3, m/s)
> units(a) <- make_units(km/h)
> a
Units: [km*h^-1]
[1]  3.6  7.2 10.8
> # convert to a mixed_units object:
> units(a) = c("m/s", "km/h", "km/h")
> a
Mixed units: km*h^-1 (2), m*s^-1 (1) 
1 [m*s^-1], 7.2 [km*h^-1], 10.8 [km*h^-1] 
> # The easiest way to assign units to a numeric vector is like this:
> x <- y <- 1:4
> units(x) <- "m/s"  # meters / second
> 
> # Alternatively, the easiest pipe-friendly way to set units:
> if(requireNamespace("magrittr", quietly = TRUE)) {
+   library(magrittr)
+   y %>% set_units(m/s)
+ }
Units: [m*s^-1]
[1] 1 2 3 4
> 
> # these are different ways of creating the same unit:
> # meters per second squared, i.e, acceleration
> x1 <- make_units(m/s^2)
> x2 <- as_units(quote(m/s^2))
> x2 <- as_units("m/s^2")
> x3 <- as_units("m s-2") # in product power form, i.e., implicit exponents = T
> x4 <- set_units(1,  m/s^2) # by default, mode = "symbols"
> x5 <- set_units(1, "m/s^2",   mode = "standard")
> x6 <- set_units(1, x1,        mode = "standard")
> x7 <- set_units(1, units(x1), mode = "standard")
> x8 <- as_units("m") / as_units("s")^2
> 
> all_identical <- function(...) {
+   l <- list(...)
+   for(i in seq_along(l)[-1])
+     if(!identical(l[[1]], l[[i]]))
+       return(FALSE)
+   TRUE
+ }
> all_identical(x1, x2, x3, x4, x5, x6, x7, x8)
[1] TRUE
> 
> # Note, direct usage of these unit creation functions is typically not
> # necessary, since coercion is automatically done via as_units(). Again,
> # these are all equivalent ways to generate the same result.
> 
> x1 <- x2 <- x3 <- x4 <- x5 <- x6 <- x7 <- x8 <- 1:4
> units(x1) <- "m/s^2"
> units(x2) <- "m s-2"
> units(x3) <- quote(m/s^2)
> units(x4) <- make_units(m/s^2)
> units(x5) <- as_units(quote(m/s^2))
> x6 <- set_units(x6, m/s^2)
> x7 <- set_units(x7, "m/s^2", mode = "standard")
> x8 <- set_units(x8, units(x1), mode = "standard")
> 
> all_identical(x1, x2, x3, x4, x5, x6, x7, x8)
[1] TRUE
> 
> 
> # Both unit names or symbols can be used. By default, unit names are
> # automatically converted to unit symbols.
> make_units(degree_C)
1 [°C]
> make_units(kilogram)
1 [kg]
> make_units(ohm)
1 [Ω]
> # Note, if the printing of non-ascii characters is garbled, then you may
> # need to specify the encoding on your system manually like this:
> # ud_set_encoding("latin1")
> # not all unit names get converted to symbols under different encodings
> 
> ## Arithmetic operations and units
> # conversion between unit objects that were defined as symbols and names will
> # work correctly, although unit simplification in printing may not always occur.
> x <- 500 * make_units(micrograms/liter)
> y <- set_units(200, ug/l)
> x + y
700 [micrograms*L^-1]
> x * y # numeric result is correct, but units not simplified completely
1e+05 [micrograms*ug*L^-2]
> 
> # note, plural form of unit name accepted too ('liters' vs 'liter'), and
> # denominator simplification can be performed correctly
> x * set_units(5, liters)
2500 [micrograms]
> 
> # unit conversion works too
> set_units(x, grams/gallon)
0.001892706 [g*gallon^-1]
> 
> ## Creating custom, user defined units
> # For example, a microbiologist might work with counts of bacterial cells
> # make_units(cells/ml) # by default, throws an ERROR
> # First define the unit, then the newly defined unit is accepted.
> install_unit("cells")
> make_units(cells/ml)
1 [cells*ml^-1]
> 
> # Note that install_unit() adds support for defining relationships between
> # the newly created symbols or names and existing units.
> 
> ## set_units()
> # set_units is a pipe friendly version of `units<-`.
> if(requireNamespace("magrittr", quietly = TRUE)) {
+   library(magrittr)
+   1:5 %>% set_units(N/m^2)
+   # first sets to m, then converts to km
+   1:5 %>% set_units(m) %>% set_units(km)
+ }
Units: [km]
[1] 0.001 0.002 0.003 0.004 0.005
> 
> # set_units has two modes of operation. By default, it operates with
> # bare symbols to define the units.
> set_units(1:5, m/s)
Units: [m*s^-1]
[1] 1 2 3 4 5
> 
> # use `mode = "standard"` to use the value of supplied argument, rather than
> # the bare symbols of the expression. In this mode, set_units() can be
> # thought of as a simple alias for `units<-` that is pipe friendly.
> set_units(1:5, "m/s", mode = "standard")
Units: [m*s^-1]
[1] 1 2 3 4 5
> set_units(1:5, make_units(m/s), mode = "standard")
Units: [m*s^-1]
[1] 1 2 3 4 5
> 
> # the mode of set_units() can be controlled via a global option
> # units_options(set_units_mode = "standard")
> 
> # To remove units use
> units(x) <- NULL
> # or
> set_units(x, NULL)
[1] 500
> # or
> drop_units(y)
[1] 200
> s = Sys.time()
> d  = s - (s+1)
> as_units(d)
-1 [s]
> 
> 
> 
> 
> cleanEx()

detaching ‘package:magrittr’

> nameEx("units_options")
> ### * units_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: units_options
> ### Title: set one or more units global options
> ### Aliases: units_options
> 
> ### ** Examples
> 
> old = units_options(sep = c("~~~", "~"), group = c("", "")) # more space, parenthesis
> old
$sep
[1] "~"  "~~"

$group
[1] "[" "]"

> ## set back to defaults:
> units_options(sep = c("~", "~"), group = c("[", "]"), negative_power = FALSE, parse = TRUE)
> units_options("group")
[1] "[" "]"
> 
> 
> 
> cleanEx()
> nameEx("valid_udunits")
> ### * valid_udunits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: valid_udunits
> ### Title: Get information about valid units
> ### Aliases: valid_udunits valid_udunits_prefixes
> 
> ### ** Examples
> 
> if (requireNamespace("xml2", quietly = TRUE)) {
+   valid_udunits()
+   valid_udunits_prefixes()
+   if(interactive())
+     View(valid_udunits())
+ }
udunits database from /usr/share/udunits/udunits2.xml
udunits database from /usr/share/udunits/udunits2.xml
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.511 0.165 10.899 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
