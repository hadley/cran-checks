
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "broom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('broom')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Arima_tidiers")
> ### * Arima_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arima_tidiers
> ### Title: Tidying methods for ARIMA modeling of time series
> ### Aliases: Arima_tidiers glance.Arima tidy.Arima
> 
> ### ** Examples
> 
> 
> fit <- arima(lh, order = c(1, 0, 0))
> tidy(fit)
       term  estimate std.error
1       ar1 0.5739296 0.1161393
2 intercept 2.4132880 0.1466135
> glance(fit)
      sigma    logLik      AIC      BIC
1 0.4443979 -29.37916 64.75832 70.37193
> 
> 
> 
> 
> cleanEx()
> nameEx("aareg_tidiers")
> ### * aareg_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aareg_tidiers
> ### Title: Tidiers for aareg objects
> ### Aliases: aareg_tidiers glance.aareg tidy.aareg
> 
> ### ** Examples
> 
> 
> if (require("survival", quietly = TRUE)) {
+     afit <- aareg(Surv(time, status) ~ age + sex + ph.ecog, data=lung,
+                   dfbeta=TRUE)
+     summary(afit)
+     tidy(afit)
+ }
       term      estimate     statistic    std.error    robust.se statistic.z
1 Intercept  5.048983e-03  5.868616e-03 4.739162e-03 4.771021e-03    1.230055
2       age  4.005089e-05  7.149015e-05 7.228889e-05 6.996847e-05    1.021748
3       sex -3.164485e-03 -4.030555e-03 1.217949e-03 1.227954e-03   -3.282333
4   ph.ecog  3.009913e-03  3.673470e-03 1.016785e-03 1.015845e-03    3.616171
       p.value
1 0.2186766165
2 0.3069001400
3 0.0010295209
4 0.0002989931
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("acf_tidiers")
> ### * acf_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: acf_tidiers
> ### Title: Tidying method for the acf function
> ### Aliases: acf_tidiers tidy.acf
> 
> ### ** Examples
> 
> 
> # acf
> result <- acf(lh, plot=FALSE)
> tidy(result)
   lag          acf
1    0  1.000000000
2    1  0.575524476
3    2  0.181818182
4    3 -0.144755245
5    4 -0.174825175
6    5 -0.149650350
7    6 -0.020979021
8    7 -0.020279720
9    8 -0.004195804
10   9 -0.135664336
11  10 -0.153846154
12  11 -0.097202797
13  12  0.048951049
14  13  0.119580420
15  14  0.086713287
16  15  0.118881119
17  16  0.151048951
> 
> # ccf
> result <- ccf(mdeaths, fdeaths, plot=FALSE)
> tidy(result)
           lag          acf
1  -1.25000000  0.015054983
2  -1.16666667  0.365626026
3  -1.08333333  0.615427121
4  -1.00000000  0.708206289
5  -0.91666667  0.621895801
6  -0.83333333  0.340005447
7  -0.75000000 -0.024534195
8  -0.66666667 -0.381671430
9  -0.58333333 -0.611793479
10 -0.50000000 -0.677803477
11 -0.41666667 -0.604031174
12 -0.33333333 -0.349468396
13 -0.25000000  0.019759425
14 -0.16666667  0.405200639
15 -0.08333333  0.744309322
16  0.00000000  0.976241251
17  0.08333333  0.735668532
18  0.16666667  0.364241839
19  0.25000000 -0.010675725
20  0.33333333 -0.382920620
21  0.41666667 -0.622386979
22  0.50000000 -0.688538519
23  0.58333333 -0.610583980
24  0.66666667 -0.383338305
25  0.75000000 -0.018112073
26  0.83333333  0.391983088
27  0.91666667  0.656592111
28  1.00000000  0.721397236
29  1.08333333  0.639104375
30  1.16666667  0.361352626
31  1.25000000 -0.003385423
> 
> # pcf
> result <- pacf(lh, plot=FALSE)
> tidy(result)
   lag          acf
1    1  0.575524476
2    2 -0.223409973
3    3 -0.226940202
4    4  0.102768377
5    5 -0.075934420
6    6  0.067557935
7    7 -0.104170251
8    8  0.012013676
9    9 -0.187687228
10  10  0.002551041
11  11  0.065602013
12  12  0.031967953
13  13  0.021882098
14  14 -0.093124528
15  15  0.229787629
16  16  0.044439890
> 
> # lag plot
> library(ggplot2)
> result <- tidy(acf(lh, plot=FALSE))
> p <- ggplot(result, aes(x=lag, y=acf)) + 
+          geom_bar(stat='identity', width=0.1) +
+          theme_bw()
> p
> 
> # with confidence intervals 
> conf.level <- 0.95
> # from \code{plot.acf} method
> len.data <- length(lh) # same as acf$n.used
> conf.int <- qnorm((1 + conf.level) / 2) / sqrt(len.data)
> p + geom_hline(yintercept = c(-conf.int, conf.int),
+                color='blue', linetype='dashed')
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("anova_tidiers")
> ### * anova_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova_tidiers
> ### Title: Tidying methods for anova and AOV objects
> ### Aliases: anova_tidiers tidy.anova tidy.aov tidy.aovlist
> 
> ### ** Examples
> 
> 
> a <- anova(lm(mpg ~ wt + qsec + disp, mtcars))
> tidy(a)
       term df        sumsq       meansq    statistic      p.value
1        wt  1 8.477252e+02 8.477252e+02 1.214366e+02 1.081618e-11
2      qsec  1 8.285831e+01 8.285831e+01 1.186944e+01 1.817334e-03
3      disp  1 1.023935e-03 1.023935e-03 1.466785e-04 9.904229e-01
4 Residuals 28 1.954626e+02 6.980807e+00           NA           NA
> 
> a <- aov(mpg ~ wt + qsec + disp, mtcars)
> tidy(a)
       term df        sumsq       meansq    statistic      p.value
1        wt  1 8.477252e+02 8.477252e+02 1.214366e+02 1.081618e-11
2      qsec  1 8.285831e+01 8.285831e+01 1.186944e+01 1.817334e-03
3      disp  1 1.023935e-03 1.023935e-03 1.466785e-04 9.904229e-01
4 Residuals 28 1.954626e+02 6.980807e+00           NA           NA
> 
> al <- aov(mpg ~ wt + qsec + Error(disp / am), mtcars)
> tidy(al)
Warning in anova.lm(a) :
  ANOVA F-tests on an essentially perfect fit are unreliable
Warning in anova.lm(a) :
  ANOVA F-tests on an essentially perfect fit are unreliable
       term df     sumsq    meansq statistic    p.value stratum
1 Residuals  0   0.00000       NaN        NA         NA    disp
2 Residuals  0   0.00000       NaN        NA         NA disp:am
3      qsec  1  34.16791 34.167910  4.720651 0.03874957  Within
4 Residuals 27 195.42508  7.237966        NA         NA  Within
> 
> 
> 
> 
> cleanEx()

detaching ‘package:bindrcpp’

> nameEx("auc_tidiers")
> ### * auc_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auc_tidiers
> ### Title: Tidiers for objects from the AUC package
> ### Aliases: auc_tidiers tidy.roc
> 
> ### ** Examples
> 
> 
> if (require("AUC", quietly = TRUE)) {
+   data(churn)
+   r <- roc(churn$predictions,churn$labels)
+   
+   td <- tidy(r)
+   head(td)
+   
+   library(ggplot2)
+   ggplot(td, aes(fpr, tpr)) +
+     geom_line()
+     
+   # compare the ROC curves for two prediction algorithms
+   library(dplyr)
+   library(tidyr)
+   
+   rocs <- churn %>%
+     tidyr::gather(algorithm, value, -labels) %>%
+     group_by(algorithm) %>%
+     do(tidy(roc(.$value, .$labels)))
+   
+   ggplot(rocs, aes(fpr, tpr, color = algorithm)) +
+     geom_line()
+ }
AUC 0.3.0
Type AUCNews() to see the change log and ?AUC to get an overview.

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching ‘package:tidyr’, ‘package:dplyr’, ‘package:ggplot2’,
  ‘package:AUC’

> nameEx("betareg_tidiers")
> ### * betareg_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betareg_tidiers
> ### Title: Tidy betareg objects from the betareg package
> ### Aliases: augment.betareg betareg_tidiers glance.betareg tidy.betareg
> 
> ### ** Examples
> 
> 
> if (require("betareg", quietly = TRUE)) {
+   data("GasolineYield", package = "betareg")
+ 
+   mod <- betareg(yield ~ batch + temp, data = GasolineYield)
+   
+   mod
+   tidy(mod)
+   tidy(mod, conf.int = TRUE)
+   tidy(mod, conf.int = TRUE, conf.level = .99)
+   
+   head(augment(mod))
+   
+   glance(mod)
+ }
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
  pseudo.r.squared   logLik       AIC       BIC df.residual df.null
1        0.9617312 84.79756 -145.5951 -128.0063          20      30
> 
> 
> 
> 
> cleanEx()

detaching ‘package:betareg’

> nameEx("biglm_tidiers")
> ### * biglm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biglm_tidiers
> ### Title: Tidiers for biglm and bigglm object
> ### Aliases: biglm_tidiers glance.biglm tidy.biglm
> 
> ### ** Examples
> 
> 
> if (require("biglm", quietly = TRUE)) {
+     bfit <- biglm(mpg ~ wt + disp, mtcars)
+     tidy(bfit)
+     tidy(bfit, conf.int = TRUE)
+     tidy(bfit, conf.int = TRUE, conf.level = .9)
+     
+     glance(bfit)
+     
+     # bigglm: logistic regression
+     bgfit <- bigglm(am ~ mpg, mtcars, family = binomial())
+     tidy(bgfit)
+     tidy(bgfit, exponentiate = TRUE)
+     tidy(bgfit, conf.int = TRUE)
+     tidy(bgfit, conf.int = TRUE, conf.level = .9)
+     tidy(bgfit, conf.int = TRUE, conf.level = .9, exponentiate = TRUE)
+     
+     glance(bgfit)
+ }
  r.squared      AIC deviance df.residual
1  0.174674 33.67517 29.67517          30
> 
> 
> 
> 
> cleanEx()

detaching ‘package:biglm’, ‘package:DBI’

> nameEx("binDesign_tidiers")
> ### * binDesign_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binDesign_tidiers
> ### Title: Tidy a binDesign object
> ### Aliases: binDesign_tidiers glance.binDesign tidy.binDesign
> 
> ### ** Examples
> 
> 
> if (require("binGroup", quietly = TRUE)) {
+     des <- binDesign(nmax = 300, delta = 0.06,
+                      p.hyp = 0.1, power = .8)
+ 
+     glance(des)
+     head(tidy(des))
+     
+     # the ggplot2 equivalent of plot(des)
+     library(ggplot2)
+     ggplot(tidy(des), aes(n, power)) +
+         geom_line()
+ }
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:binGroup’

> nameEx("binWidth_tidiers")
> ### * binWidth_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binWidth_tidiers
> ### Title: Tidy a binWidth object
> ### Aliases: binWidth_tidiers tidy.binWidth
> 
> ### ** Examples
> 
> 
> if (require("binGroup", quietly = TRUE)) {
+     bw <- binWidth(100, .1)
+     bw
+     tidy(bw)
+     
+     library(dplyr)
+     d <- expand.grid(n = seq(100, 800, 100),
+                      p = .5,
+                      method = c("CP", "Blaker", "Score", "Wald"),
+                      stringsAsFactors = FALSE) %>%
+         group_by(n, p, method) %>%
+         do(tidy(binWidth(.$n, .$p, method = .$method)))
+     
+     library(ggplot2)
+     ggplot(d, aes(n, ci.width, color = method)) +
+         geom_line() +
+         xlab("Total Observations") +
+         ylab("Expected CI Width")
+ }

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:binGroup’

> nameEx("boot_tidiers")
> ### * boot_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boot_tidiers
> ### Title: Tidying methods for bootstrap computations
> ### Aliases: boot_tidiers tidy.boot
> 
> ### ** Examples
> 
> if (require("boot")) {
+    clotting <- data.frame(
+           u = c(5,10,15,20,30,40,60,80,100),
+           lot1 = c(118,58,42,35,27,25,21,19,18),
+           lot2 = c(69,35,26,21,18,16,13,12,12))
+ 
+    g1 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
+    
+    bootfun <- function(d, i) {
+       coef(update(g1, data= d[i,]))
+    }
+    bootres <- boot(clotting, bootfun, R = 999)
+    tidy(g1, conf.int=TRUE)
+    tidy(bootres, conf.int=TRUE)
+ }
Loading required package: boot
         term   statistic          bias    std.error    conf.low  conf.high
1 (Intercept) -0.02390847 -0.0015902647 0.0030425857 -0.03232432 0.02275300
2      log(u)  0.02359921  0.0004843577 0.0009813316 -0.02235901 0.02637415
> 
> 
> 
> 
> cleanEx()

detaching ‘package:boot’

> nameEx("bootstrap")
> ### * bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap
> ### Title: Set up bootstrap replicates of a dplyr operation
> ### Aliases: bootstrap
> 
> ### ** Examples
> 
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mtcars %>% bootstrap(10) %>% do(tidy(lm(mpg ~ wt, .)))
# A tibble: 20 x 6
# Groups:   replicate [10]
   replicate        term  estimate std.error  statistic      p.value
       <int>       <chr>     <dbl>     <dbl>      <dbl>        <dbl>
 1         1 (Intercept) 36.386058 1.8973778  19.177023 2.178813e-18
 2         1          wt -5.283068 0.5562375  -9.497863 1.497744e-10
 3         2 (Intercept) 35.182219 1.4989331  23.471508 7.340171e-21
 4         2          wt -4.698607 0.4103355 -11.450648 1.782918e-12
 5         3 (Intercept) 34.319357 1.9659150  17.457193 2.915836e-17
 6         3          wt -4.583685 0.5703034  -8.037275 5.689763e-09
 7         4 (Intercept) 35.483714 1.7070942  20.786031 2.289583e-19
 8         4          wt -4.833297 0.4550389 -10.621724 1.102446e-11
 9         5 (Intercept) 38.957240 1.9498743  19.979360 6.946839e-19
10         5          wt -5.328322 0.5666617  -9.403005 1.880788e-10
11         6 (Intercept) 36.337611 2.5114948  14.468519 4.555752e-15
12         6          wt -5.403360 0.7324485  -7.377120 3.220260e-08
13         7 (Intercept) 33.844150 1.7911223  18.895499 3.285715e-18
14         7          wt -4.229179 0.5242507  -8.067093 5.267982e-09
15         8 (Intercept) 36.745873 1.8395183  19.975813 6.981420e-19
16         8          wt -5.170596 0.5025999 -10.287698 2.353647e-11
17         9 (Intercept) 33.749084 1.8982795  17.778775 1.767060e-17
18         9          wt -4.216295 0.5251293  -8.029061 5.811886e-09
19        10 (Intercept) 35.557272 1.7231993  20.634451 2.812395e-19
20        10          wt -4.772865 0.4906947  -9.726751 8.687659e-11
> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("brms_tidiers")
> ### * brms_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brms_tidiers
> ### Title: Tidying methods for a brms model
> ### Aliases: brms_tidiers tidy.brmsfit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  library(brms)
> ##D  fit <- brm(mpg ~ wt + (1|cyl) + (1+wt|gear), data = mtcars, 
> ##D             iter = 500, chains = 2)
> ##D  tidy(fit)
> ##D  tidy(fit, parameters = "^sd_", intervals = FALSE)
> ##D  tidy(fit, par_type = "non-varying")
> ##D  tidy(fit, par_type = "varying")
> ##D  tidy(fit, par_type = "hierarchical", robust = TRUE)
> ## End(Not run)
>  
> 
> 
> 
> cleanEx()
> nameEx("btergm_tidiers")
> ### * btergm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: btergm_tidiers
> ### Title: Tidying method for a bootstrapped temporal exponential random
> ###   graph model
> ### Aliases: btergm_tidiers tidy.btergm
> 
> ### ** Examples
> 
> 
> if (require("xergm")) {
+     # Using the same simulated example as the xergm package
+     # Create 10 random networks with 10 actors
+     networks <- list()
+     for(i in 1:10){
+         mat <- matrix(rbinom(100, 1, .25), nrow = 10, ncol = 10)
+         diag(mat) <- 0
+         nw <- network::network(mat)
+         networks[[i]] <- nw
+     }
+     # Create 10 matrices as covariates
+     covariates <- list()
+     for (i in 1:10) {
+         mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
+         covariates[[i]] <- mat
+     }
+     # Fit a model where the propensity to form ties depends
+     # on the edge covariates, controlling for the number of
+     # in-stars
+     btfit <- btergm(networks ~ edges + istar(2) +
+                       edgecov(covariates), R = 100)
+ 
+     # Show terms, coefficient estimates and errors
+     tidy(btfit)
+ 
+     # Show coefficients as odds ratios with a 99% CI
+     tidy(btfit, exponentiate = TRUE, conf.level = 0.99)
+ }
Loading required package: xergm
Loading required package: xergm.common
Loading required package: ergm
Loading required package: statnet.common
Loading required package: network
network: Classes for Relational Data
Version 1.13.0 created on 2015-08-31.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.


ergm: version 3.7.1, created on 2017-03-20
Copyright (c) 2017, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled verteces. See the
NEWS and the documentation for more details.


Attaching package: ‘xergm.common’

The following object is masked from ‘package:ergm’:

    gof

Loading required package: btergm
Loading required package: ggplot2
Package:  btergm
Version:  1.9.0
Date:     2017-03-30
Authors:  Philip Leifeld (University of Glasgow)
          Skyler J. Cranmer (The Ohio State University)
          Bruce A. Desmarais (Pennsylvania State University)

Loading required package: tnam
Package:  tnam
Version:  1.6.5
Date:     2017-03-31
Authors:  Philip Leifeld (University of Glasgow)
          Skyler J. Cranmer (The Ohio State University)

Loading required package: rem
Loading required package: GERGM
GERGM: Generalized Exponential Random Graph Models
Version 0.11.2 created on 2017-03-14.
copyright (c) 2017, Matthew J. Denny, Penn State University
                    James D. Wilson, University of San Francisco
                    Skyler Cranmer, Ohio State University
                    Bruce A. Desmarais, Penn State University
                    Shankar Bhamidi, University of North Carolina
Type help('gergm') to get started.
Development website: https://github.com/matthewjdenny/GERGM
Package:  xergm
Version:  1.8.2
Date:     2017-04-01
Authors:  Philip Leifeld (University of Glasgow)
          Skyler J. Cranmer (The Ohio State University)
          Bruce A. Desmarais (Pennsylvania State University)

Please cite the xergm package in your publications -- see citation("xergm").


Initial dimensions of the network and covariates:
                 t=1 t=2 t=3 t=4 t=5 t=6 t=7 t=8 t=9 t=10
networks (row)    10  10  10  10  10  10  10  10  10   10
networks (col)    10  10  10  10  10  10  10  10  10   10
covariates (row)  10  10  10  10  10  10  10  10  10   10
covariates (col)  10  10  10  10  10  10  10  10  10   10

All networks are conformable.

Dimensions of the network and covariates after adjustment:
                 t=1 t=2 t=3 t=4 t=5 t=6 t=7 t=8 t=9 t=10
networks (row)    10  10  10  10  10  10  10  10  10   10
networks (col)    10  10  10  10  10  10  10  10  10   10
covariates (row)  10  10  10  10  10  10  10  10  10   10
covariates (col)  10  10  10  10  10  10  10  10  10   10

Starting pseudolikelihood estimation with 100 bootstrapping replications on a single computing core...
Done.
Warning in norm.inter(t, alpha) :
  extreme order statistics used as endpoints
Warning in norm.inter(t, alpha) :
  extreme order statistics used as endpoints
Warning in norm.inter(t, alpha) :
  extreme order statistics used as endpoints
                     term  estimate  conf.low conf.high
1                   edges 0.3105867 0.2012890 0.5123829
2                  istar2 1.0441950 0.8309823 1.2465303
3 edgecov.covariates[[i]] 1.0001525 0.8433011 1.1336727
> 
> 
> 
> cleanEx()

detaching ‘package:xergm’, ‘package:GERGM’, ‘package:rem’,
  ‘package:tnam’, ‘package:btergm’, ‘package:ggplot2’,
  ‘package:xergm.common’, ‘package:ergm’, ‘package:network’,
  ‘package:statnet.common’

> nameEx("cch_tidiers")
> ### * cch_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cch_tidiers
> ### Title: tidiers for case-cohort data
> ### Aliases: cch_tidiers glance.cch tidy.cch
> 
> ### ** Examples
> 
> 
> if (require("survival", quietly = TRUE)) {
+     # examples come from cch documentation
+     subcoh <- nwtco$in.subcohort
+     selccoh <- with(nwtco, rel==1|subcoh==1)
+     ccoh.data <- nwtco[selccoh,]
+     ccoh.data$subcohort <- subcoh[selccoh]
+     ## central-lab histology 
+     ccoh.data$histol <- factor(ccoh.data$histol,labels=c("FH","UH"))
+     ## tumour stage
+     ccoh.data$stage <- factor(ccoh.data$stage,labels=c("I","II","III" ,"IV"))
+     ccoh.data$age <- ccoh.data$age/12 # Age in years
+     
+     fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age, data = ccoh.data,
+                    subcoh = ~subcohort, id= ~seqno, cohort.size = 4028)
+     
+     tidy(fit.ccP)
+     
+     # coefficient plot
+     library(ggplot2)
+     ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) + geom_point() +
+         geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+         geom_vline(xintercept = 0)
+     
+     # compare between methods
+     library(dplyr)
+     fits <- data_frame(method = c("Prentice", "SelfPrentice", "LinYing")) %>%
+         group_by(method) %>%
+         do(tidy(cch(Surv(edrel, rel) ~ stage + histol + age, data = ccoh.data,
+                     subcoh = ~subcohort, id= ~seqno, cohort.size = 4028,
+                     method = .$method)))
+     
+     # coefficient plots comparing methods
+     ggplot(fits, aes(x = estimate, y = term, color = method)) + geom_point() +
+         geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+         geom_vline(xintercept = 0)
+ }

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’, ‘package:survival’

> nameEx("coxph_tidiers")
> ### * coxph_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coxph_tidiers
> ### Title: Tidiers for coxph object
> ### Aliases: augment.coxph coxph_tidiers glance.coxph tidy.coxph
> 
> ### ** Examples
> 
> 
> if (require("survival", quietly = TRUE)) {
+     cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ 
+     tidy(cfit)
+     tidy(cfit, exponentiate = TRUE)
+ 
+     lp <- augment(cfit, lung)
+     risks <- augment(cfit, lung, type.predict = "risk")
+     expected <- augment(cfit, lung, type.predict = "expected")
+ 
+     glance(cfit)
+     
+     # also works on clogit models
+     resp <- levels(logan$occupation)
+     n <- nrow(logan)
+     indx <- rep(1:n, length(resp))
+     logan2 <- data.frame(logan[indx,],
+                          id = indx,
+                          tocc = factor(rep(resp, each=n)))
+     logan2$case <- (logan2$occupation == logan2$tocc)
+ 
+     cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
+     tidy(cl)
+     glance(cl)
+     
+     library(ggplot2)
+     ggplot(lp, aes(age, .fitted, color = sex)) + geom_point()
+     ggplot(risks, aes(age, .fitted, color = sex)) + geom_point()
+     ggplot(expected, aes(time, .fitted, color = sex)) + geom_point()
+ }
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning in coxph(formula = Surv(rep(1, 4190L), case) ~ tocc + tocc:education +  :
  X matrix deemed to be singular; variable 9
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("cv.glmnet_tidiers")
> ### * cv.glmnet_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cv.glmnet_tidiers
> ### Title: Tidiers for glmnet cross-validation objects
> ### Aliases: cv.glmnet_tidiers glance.cv.glmnet tidy.cv.glmnet
> 
> ### ** Examples
> 
> 
> if (require("glmnet", quietly = TRUE)) {
+     set.seed(2014)
+ 
+     nobs <- 100
+     nvar <- 50
+     real <- 5
+     
+     x <- matrix(rnorm(nobs * nvar), nobs, nvar)
+     beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
+     y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
+     
+     cvfit1 <- cv.glmnet(x,y)
+     
+     head(tidy(cvfit1))
+     glance(cvfit1)
+     
+     library(ggplot2)
+     tidied_cv <- tidy(cvfit1)
+     glance_cv <- glance(cvfit1)
+     
+     # plot of MSE as a function of lambda
+     g <- ggplot(tidied_cv, aes(lambda, estimate)) + geom_line() + scale_x_log10()
+     g
+     
+     # plot of MSE as a function of lambda with confidence ribbon
+     g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+     g
+     
+     # plot of MSE as a function of lambda with confidence ribbon and choices
+     # of minimum lambda marked
+     g <- g + geom_vline(xintercept = glance_cv$lambda.min) +
+         geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+     g
+     
+     # plot of number of zeros for each choice of lambda
+     ggplot(tidied_cv, aes(lambda, nzero)) + geom_line() + scale_x_log10()
+     
+     # coefficient plot with min lambda shown
+     tidied <- tidy(cvfit1$glmnet.fit)
+     ggplot(tidied, aes(lambda, estimate, group = term)) + scale_x_log10() +
+         geom_line() +
+         geom_vline(xintercept = glance_cv$lambda.min) +
+         geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ }
Loaded glmnet 2.0-10

> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:glmnet’, ‘package:foreach’,
  ‘package:Matrix’

> nameEx("data.frame_tidiers")
> ### * data.frame_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data.frame_tidiers
> ### Title: Tidiers for data.frame objects
> ### Aliases: augment.data.frame data.frame_tidiers glance.data.frame
> ###   tidy.data.frame
> 
> ### ** Examples
> 
> 
> td <- tidy(mtcars)
> td
   column  n       mean          sd  median     trimmed         mad    min
1     mpg 32  20.090625   6.0269481  19.200  19.6961538   5.4114900 10.400
2     cyl 32   6.187500   1.7859216   6.000   6.2307692   2.9652000  4.000
3    disp 32 230.721875 123.9386938 196.300 222.5230769 140.4763500 71.100
4      hp 32 146.687500  68.5628685 123.000 141.1923077  77.0952000 52.000
5    drat 32   3.596563   0.5346787   3.695   3.5792308   0.7042350  2.760
6      wt 32   3.217250   0.9784574   3.325   3.1526923   0.7672455  1.513
7    qsec 32  17.848750   1.7869432  17.710  17.8276923   1.4158830 14.500
8      vs 32   0.437500   0.5040161   0.000   0.4230769   0.0000000  0.000
9      am 32   0.406250   0.4989909   0.000   0.3846154   0.0000000  0.000
10   gear 32   3.687500   0.7378041   4.000   3.6153846   1.4826000  3.000
11   carb 32   2.812500   1.6152000   2.000   2.6538462   1.4826000  1.000
       max   range       skew    kurtosis          se
1   33.900  23.500  0.6106550 -0.37276603  1.06542396
2    8.000   4.000 -0.1746119 -1.76211977  0.31570933
3  472.000 400.900  0.3816570 -1.20721195 21.90947271
4  335.000 283.000  0.7260237 -0.13555112 12.12031731
5    4.930   2.170  0.2659039 -0.71470062  0.09451874
6    5.424   3.911  0.4231465 -0.02271075  0.17296847
7   22.900   8.400  0.3690453  0.33511422  0.31588992
8    1.000   1.000  0.2402577 -2.00193762  0.08909831
9    1.000   1.000  0.3640159 -1.92474143  0.08820997
10   5.000   2.000  0.5288545 -1.06975068  0.13042656
11   8.000   7.000  1.0508738  1.25704307  0.28552971
> 
> glance(mtcars)
  nrow ncol complete.obs na.fraction
1   32   11           32           0
> 
> library(ggplot2)
> # compare mean and standard deviation
> ggplot(td, aes(mean, sd)) + geom_point() +
+      geom_text(aes(label = column), hjust = 1, vjust = 1) +
+      scale_x_log10() + scale_y_log10() + geom_abline()
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("ergm_tidiers")
> ### * ergm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ergm_tidiers
> ### Title: Tidying methods for an exponential random graph model
> ### Aliases: ergm_tidiers glance.ergm tidy.ergm
> 
> ### ** Examples
> 
> 
> if (require("ergm")) {
+     # Using the same example as the ergm package
+     # Load the Florentine marriage network data
+     data(florentine)
+ 
+     # Fit a model where the propensity to form ties between
+     # families depends on the absolute difference in wealth
+     gest <- ergm(flomarriage ~ edges + absdiff("wealth"))
+ 
+     # Show terms, coefficient estimates and errors
+     tidy(gest)
+ 
+     # Show coefficients as odds ratios with a 99% CI
+     tidy(gest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.99)
+ 
+     # Take a look at likelihood measures and other
+     # control parameters used during MCMC estimation
+     glance(gest)
+     glance(gest, deviance = TRUE)
+     glance(gest, mcmc = TRUE)
+ }
Loading required package: ergm
Loading required package: statnet.common
Loading required package: network
network: Classes for Relational Data
Version 1.13.0 created on 2015-08-31.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.


ergm: version 3.7.1, created on 2017-03-20
Copyright (c) 2017, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled verteces. See the
NEWS and the documentation for more details.

Evaluating log-likelihood at the estimate. 
  independence iterations    logLik      AIC      BIC MCMC.interval MCMC.burnin
1         TRUE          4 -50.97572 105.9514 111.5264          1024       16384
  MCMC.samplesize
1            1024
> 
> 
> 
> cleanEx()

detaching ‘package:ergm’, ‘package:network’, ‘package:statnet.common’

> nameEx("felm_tidiers")
> ### * felm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: felm_tidiers
> ### Title: Tidying methods for models with multiple group fixed effects
> ### Aliases: augment.felm felm_tidiers glance.felm tidy.felm
> 
> ### ** Examples
> 
> 
> if (require("lfe", quietly = TRUE)) {
+     N=1e2
+     DT <- data.frame(
+       id = sample(5, N, TRUE),
+       v1 =  sample(5, N, TRUE),                          
+       v2 =  sample(1e6, N, TRUE),                        
+       v3 =  sample(round(runif(100,max=100),4), N, TRUE),
+       v4 =  sample(round(runif(100,max=100),4), N, TRUE) 
+     )
+     
+     result_felm <- felm(v2~v3, DT)
+     tidy(result_felm)
+     augment(result_felm)
+     result_felm <- felm(v2~v3|id+v1, DT)
+     tidy(result_felm, fe = TRUE)
+     augment(result_felm)
+     v1<-DT$v1
+     v2 <- DT$v2
+     v3 <- DT$v3
+     id <- DT$id
+     result_felm <- felm(v2~v3|id+v1)
+     tidy(result_felm)
+     augment(result_felm)
+     glance(result_felm)
+ }
   r.squared adj.r.squared    sigma statistic   p.value df df.residual
p 0.09982861   0.009811467 277373.5  1.108996 0.3647072 90          90
> 
> 
> 
> cleanEx()

detaching ‘package:lfe’, ‘package:Matrix’

> nameEx("fitdistr_tidiers")
> ### * fitdistr_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitdistr_tidiers
> ### Title: Tidying methods for fitdistr objects from the MASS package
> ### Aliases: fitdistr_tidiers glance.fitdistr tidy.fitdistr
> 
> ### ** Examples
> 
> 
> set.seed(2015)
> x <- rnorm(100, 5, 2)
> 
> library(MASS)
> fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
> 
> tidy(fit)
  term estimate std.error
1 mean 4.898140 0.2008914
2   sd 2.008914 0.1420515
> glance(fit)
    n    logLik      AIC      BIC
1 100 -211.6533 427.3065 432.5168
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("gam_tidiers")
> ### * gam_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gam_tidiers
> ### Title: Tidying methods for a generalized additive model (gam)
> ### Aliases: gam_tidiers glance.gam tidy.gam
> 
> ### ** Examples
> 
> 
> if (require("gam", quietly = TRUE)) {
+     data(kyphosis)
+     g <- gam(Kyphosis ~ s(Age,4) + Number, family = binomial, data = kyphosis)
+     tidy(g)
+     augment(g)
+     glance(g)
+ }
Loaded gam 1.14-4

Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
Warning: Deprecated: please use `purrr::possibly()` instead
        df deviance df.residual
1 5.999983 63.10725    75.00002
> 
> 
> 
> 
> cleanEx()

detaching ‘package:gam’, ‘package:foreach’, ‘package:splines’

> nameEx("geeglm_tidiers")
> ### * geeglm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geeglm_tidiers
> ### Title: Tidying methods for generalized estimating equations models
> ### Aliases: geeglm_tidiers tidy.geeglm
> 
> ### ** Examples
> 
> 
> if (require('geepack')) {
+     data(state)
+     ds <- data.frame(state.region, state.x77)
+ 
+     geefit <- geeglm(Income ~ Frost + Murder, id = state.region,
+                      data = ds, family = gaussian,
+                      corstr = 'exchangeable')
+ 
+     tidy(geefit)
+     tidy(geefit, quick = TRUE)
+     tidy(geefit, conf.int = TRUE)
+ }
Loading required package: geepack
         term    estimate  std.error   statistic   p.value    conf.low
1 (Intercept) 4406.193102 407.454998 116.9412561 0.0000000 3607.595981
2       Frost    1.686945   2.250175   0.5620426 0.4534384   -2.723317
3      Murder  -22.664350  31.379406   0.5216715 0.4701295  -84.166856
    conf.high
1 5204.790222
2    6.097207
3   38.838155
> 
> 
> 
> 
> cleanEx()

detaching ‘package:geepack’

> nameEx("glm_tidiers")
> ### * glm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glm_tidiers
> ### Title: Tidying methods for a glm object
> ### Aliases: glance.glm glm_tidiers
> 
> ### ** Examples
> 
> 
> g <- glm(am ~ mpg, mtcars, family = "binomial")
> glance(g)
  null.deviance df.null    logLik      AIC      BIC deviance df.residual
1      43.22973      31 -14.83758 33.67517 36.60664 29.67517          30
> 
> 
> 
> 
> cleanEx()
> nameEx("glmnet_tidiers")
> ### * glmnet_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmnet_tidiers
> ### Title: Tidiers for LASSO or elasticnet regularized fits
> ### Aliases: glance.glmnet glmnet_tidiers tidy.glmnet
> 
> ### ** Examples
> 
> 
> if (require("glmnet", quietly = TRUE)) {
+     set.seed(2014)
+     x <- matrix(rnorm(100*20),100,20)
+     y <- rnorm(100)
+     fit1 <- glmnet(x,y)
+     
+     head(tidy(fit1))
+     glance(fit1)
+     
+     library(dplyr)
+     library(ggplot2)
+     
+     tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
+     
+     ggplot(tidied, aes(step, estimate, group = term)) + geom_line()
+     ggplot(tidied, aes(lambda, estimate, group = term)) +
+         geom_line() + scale_x_log10()
+  
+     ggplot(tidied, aes(lambda, dev.ratio)) + geom_line()
+     
+     # works for other types of regressions as well, such as logistic
+     g2 <- sample(1:2, 100, replace=TRUE)
+     fit2 <- glmnet(x, g2, family="binomial")
+     head(tidy(fit2))
+ }
Loaded glmnet 2.0-10


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

         term step    estimate    lambda    dev.ratio
1 (Intercept)    1 -0.24116206 0.1767352 1.780423e-15
2 (Intercept)    2 -0.24079189 0.1610346 1.570026e-02
3         V13    2  0.06204726 0.1610346 1.570026e-02
4 (Intercept)    3 -0.24086922 0.1467287 2.880651e-02
5         V13    3  0.11889530 0.1467287 2.880651e-02
6 (Intercept)    4 -0.24127954 0.1336937 3.980004e-02
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:glmnet’,
  ‘package:foreach’, ‘package:Matrix’

> nameEx("gmm_tidiers")
> ### * gmm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gmm_tidiers
> ### Title: Tidying methods for generalized method of moments "gmm" objects
> ### Aliases: glance.gmm gmm_tidiers tidy.gmm
> 
> ### ** Examples
> 
> 
> if (require("gmm", quietly = TRUE)) {
+   # examples come from the "gmm" package
+   ## CAPM test with GMM
+   data(Finance)
+   r <- Finance[1:300, 1:10]
+   rm <- Finance[1:300, "rm"]
+   rf <- Finance[1:300, "rf"]
+   
+   z <- as.matrix(r-rf)
+   t <- nrow(z)
+   zm <- rm-rf
+   h <- matrix(zm, t, 1)
+   res <- gmm(z ~ zm, x = h)
+   
+   # tidy result
+   tidy(res)
+   tidy(res, conf.int = TRUE)
+   tidy(res, conf.int = TRUE, conf.level = .99)
+   
+   # coefficient plot
+   library(ggplot2)
+   library(dplyr)
+   tidy(res, conf.int = TRUE) %>%
+     mutate(variable = reorder(variable, estimate)) %>%
+     ggplot(aes(estimate, variable)) +
+     geom_point() +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     facet_wrap(~ term) +
+     geom_vline(xintercept = 0, color = "red", lty = 2)
+   
+   # from a function instead of a matrix
+   g <- function(theta, x) {
+   	e <- x[,2:11] - theta[1] - (x[,1] - theta[1]) %*% matrix(theta[2:11], 1, 10)
+   	gmat <- cbind(e, e*c(x[,1]))
+   	return(gmat) }
+   
+   x <- as.matrix(cbind(rm, r))
+   res_black <- gmm(g, x = x, t0 = rep(0, 11))
+   
+   tidy(res_black)
+   tidy(res_black, conf.int = TRUE)
+   
+   ## APT test with Fama-French factors and GMM
+   
+   f1 <- zm
+   f2 <- Finance[1:300, "hml"] - rf
+   f3 <- Finance[1:300, "smb"] - rf
+   h <- cbind(f1, f2, f3)
+   res2 <- gmm(z ~ f1 + f2 + f3, x = h)
+   
+   td2 <- tidy(res2, conf.int = TRUE)
+   td2
+   
+   # coefficient plot
+   td2 %>%
+     mutate(variable = reorder(variable, estimate)) %>%
+     ggplot(aes(estimate, variable)) +
+     geom_point() +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     facet_wrap(~ term) +
+     geom_vline(xintercept = 0, color = "red", lty = 2)
+ }
Error in `colnames<-`(`*tmp*`, value = c("conf.low", "conf.high")) : 
  attempt to set 'colnames' on an object with less than two dimensions
Calls: tidy -> tidy.gmm -> process_lm -> colnames<-
Execution halted
