
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "testthat"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('testthat')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("compare")
> ### * compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare
> ### Title: Provide human-readable comparison of two objects
> ### Aliases: compare compare.POSIXt compare.character compare.default
> ###   compare.numeric
> 
> ### ** Examples
> 
> # Character -----------------------------------------------------------------
> x <- c("abc", "def", "jih")
> compare(x, x)
Equal
> 
> y <- paste0(x, "y")
> compare(x, y)
3/3 mismatches
x[1]: "abc"
y[1]: "abcy"

x[2]: "def"
y[2]: "defy"

x[3]: "jih"
y[3]: "jihy"> 
> compare(letters, paste0(letters, "-"))
Warning in mapply(FUN = f, ..., SIMPLIFY = FALSE) :
  longer argument not a multiple of length of shorter
Warning in mapply(FUN = f, ..., SIMPLIFY = FALSE) :
  longer argument not a multiple of length of shorter
26/26 mismatches
x[1]: "a"
y[1]: "a-"

x[2]: "b"
y[2]: "b-"

x[3]: "c"
y[3]: "c-"

x[4]: "d"
y[4]: "d-"

x[5]: "e"
y[5]: "e-"

x[6]: "a"
y[6]: "a-"

x[7]: "b"
y[7]: "b-"

x[8]: "c"
y[8]: "c-"

x[9]: "d"
y[9]: "d-"

x[10]: "e"
y[10]: "e-"

x[11]: "a"
y[11]: "a-"

x[12]: "b"
y[12]: "b-"

x[13]: "c"
y[13]: "c-"

x[14]: "d"
y[14]: "d-"

x[15]: "e"
y[15]: "e-"

x[16]: "a"
y[16]: "a-"

x[17]: "b"
y[17]: "b-"

x[18]: "c"
y[18]: "c-"

x[19]: "d"
y[19]: "d-"

x[20]: "e"
y[20]: "e-"

x[21]: "a"
y[21]: "a-"

x[22]: "b"
y[22]: "b-"

x[23]: "c"
y[23]: "c-"

x[24]: "d"
y[24]: "d-"

x[25]: "e"
y[25]: "e-"

x[26]: "a"
y[26]: "a-"> 
> x <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus
+  tincidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
+  dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
> y <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus
+  tincidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvinar
+  dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
> compare(x, y)
1/1 mismatches
x[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[1]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[1]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[1]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[1]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "> compare(c(x, x), c(y, y))
2/2 mismatches
x[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[1]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[1]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[1]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[1]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "

x[2]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[2]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[2]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[2]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[2]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[2]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "> 
> # Numeric -------------------------------------------------------------------
> 
> x <- y <- runif(100)
> y[sample(100, 10)] <- 5
> compare(x, y)
10/100 mismatches (average diff: 4.51)
[13] 0.6870 - 5 == -4.31
[21] 0.9347 - 5 == -4.07
[27] 0.0134 - 5 == -4.99
[35] 0.8274 - 5 == -4.17
[45] 0.5297 - 5 == -4.47
[55] 0.0707 - 5 == -4.93
[61] 0.9129 - 5 == -4.09
[66] 0.2580 - 5 == -4.74
[86] 0.2027 - 5 == -4.80
...> 
> x <- y <- 1:10
> x[5] <- NA
> x[6] <- 6.5
> compare(x, y)
2/10 mismatches (average diff: 0.5)
[5]  NA - 5 ==  NA
[6] 6.5 - 6 == 0.5> 
> # Compare ignores minor numeric differences in the same way
> # as all.equal.
> compare(x, x + 1e-9)
Equal
> 
> 
> 
> cleanEx()
> nameEx("comparison-expectations")
> ### * comparison-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comparison-expectations
> ### Title: Expectation: is returned value less or greater than specified
> ###   value?
> ### Aliases: comparison-expectations expect_gt expect_gte expect_less_than
> ###   expect_lt expect_lte expect_more_than
> 
> ### ** Examples
> 
> a <- 9
> expect_lt(a, 10)
> 
> ## Not run: 
> ##D expect_lt(11, 10)
> ## End(Not run)
> 
> a <- 11
> expect_gt(a, 10)
> ## Not run: 
> ##D expect_gt(9, 10)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("context")
> ### * context
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: context
> ### Title: Describe the context of a set of tests.
> ### Aliases: context
> 
> ### ** Examples
> 
> context("String processing")
> context("Remote procedure calls")
> 
> 
> 
> cleanEx()
> nameEx("describe")
> ### * describe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: describe
> ### Title: describe: a BDD testing language
> ### Aliases: describe
> 
> ### ** Examples
> 
> describe("matrix()", {
+   it("can be multiplied by a scalar", {
+     m1 <- matrix(1:4, 2, 2)
+     m2 <- m1 * 2
+     expect_equivalent(matrix(1:4 * 2, 2, 2), m2)
+   })
+   it("can have not yet tested specs")
+ })
> 
> # Nested specs:
> ## code
> addition <- function(a, b) a + b
> division <- function(a, b) a / b
> 
> ## specs
> describe("math library", {
+   describe("addition()", {
+     it("can add two numbers", {
+       expect_equivalent(1 + 1, addition(1, 1))
+     })
+   }) 
+   describe("division()", {
+     it("can divide two numbers", {
+       expect_equivalent(10 / 2, division(10, 2))   
+     })
+     it("can handle division by 0") #not yet implemented
+   })  
+ })
> 
> 
> 
> cleanEx()
> nameEx("equality-expectations")
> ### * equality-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: equality-expectations
> ### Title: Expectation: is the object equal to a value?
> ### Aliases: equality-expectations expect_equal expect_equivalent
> ###   expect_identical
> 
> ### ** Examples
> 
> a <- 10
> expect_equal(a, 10)
> 
> # Use expect_equal() when testing for numeric equality
> sqrt(2) ^ 2 - 1
[1] 1
> expect_equal(sqrt(2) ^ 2, 2)
> # Neither of these forms take floating point representation errors into
> # account
> ## Not run: 
> ##D expect_true(sqrt(2) ^ 2 == 2)
> ##D expect_identical(sqrt(2) ^ 2, 2)
> ## End(Not run)
> 
> # You can pass on additional arguments to all.equal:
> ## Not run: 
> ##D # Test the ABSOLUTE difference is within .002
> ##D expect_equal(10.01, 10, tolerance = .002, scale = 1)
> ## End(Not run)
> 
> # Test the RELATIVE difference is within .002
> x <- 10
> expect_equal(10.01, expected = x, tolerance = 0.002, scale = x)
> 
> # expect_equivalent ignores attributes
> a <- b <- 1:3
> names(b) <- letters[1:3]
> expect_equivalent(a, b)
> 
> 
> 
> cleanEx()
> nameEx("evaluate_promise")
> ### * evaluate_promise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_promise
> ### Title: Evaluate a promise, capturing all types of output.
> ### Aliases: capture_messages capture_output capture_warnings
> ###   evaluate_promise
> 
> ### ** Examples
> 
> evaluate_promise({
+   print("1")
+   message("2")
+   warning("3")
+   4
+ })
$result
[1] 4

$output
[1] "[1] \"1\""

$warnings
[1] "3"

$messages
[1] "2\n"

> 
> 
> 
> cleanEx()
> nameEx("expect_equal_to_reference")
> ### * expect_equal_to_reference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expect_equal_to_reference
> ### Title: Expectation: is the object equal to a reference value stored in
> ###   a file?
> ### Aliases: expect_equal_to_reference
> 
> ### ** Examples
> 
> ## Not run: 
> ##D expect_equal_to_reference(1, "one.rds")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("expect_length")
> ### * expect_length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expect_length
> ### Title: Expectation: does a vector have the specified length?
> ### Aliases: expect_length
> 
> ### ** Examples
> 
> expect_length(1, 1)
> expect_length(1:10, 10)
> 
> ## Not run: 
> ##D expect_length(1:10, 1)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("expect_match")
> ### * expect_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expect_match
> ### Title: Expectation: does string/output/message/warning/error match a
> ###   regular expression?
> ### Aliases: expect_match
> 
> ### ** Examples
> 
> expect_match("Testing is fun", "fun")
> expect_match("Testing is fun", "f.n")
> 
> ## Not run: 
> ##D expect_match("Testing is fun", "horrible")
> ##D 
> ##D # Zero-length inputs always fail
> ##D expect_match(character(), ".")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("expect_named")
> ### * expect_named
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expect_named
> ### Title: Expectation: does object have names?
> ### Aliases: expect_named
> 
> ### ** Examples
> 
> x <- c(a = 1, b = 2, c = 3)
> expect_named(x)
> expect_named(x, c("a", "b", "c"))
> 
> # Use options to control sensitivity
> expect_named(x, c("B", "C", "A"), ignore.order = TRUE, ignore.case = TRUE)
> 
> # Can also check for the absence of names with NULL
> z <- 1:4
> expect_named(z, NULL)
> 
> 
> 
> cleanEx()
> nameEx("expect_that")
> ### * expect_that
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expect_that
> ### Title: Expect that a condition holds.
> ### Aliases: expect_that
> ### Keywords: internal
> 
> ### ** Examples
> 
> expect_that(5 * 2, equals(10))
> expect_that(sqrt(2) ^ 2, equals(2))
> ## Not run: 
> ##D expect_that(sqrt(2) ^ 2, is_identical_to(2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fail")
> ### * fail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fail
> ### Title: Default expectations that alway succeed or fail.
> ### Aliases: fail succeed
> 
> ### ** Examples
> 
> ## Not run: 
> ##D test_that("this test fails", fail())
> ##D test_that("this test succeeds", succeed())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("inheritance-expectations")
> ### * inheritance-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inheritance-expectations
> ### Title: Expectation: does the object inherit from a S3 or S4 class, or a
> ###   base type?
> ### Aliases: expect_is expect_null expect_s3_class expect_s4_class
> ###   expect_type inheritance-expectations
> 
> ### ** Examples
> 
> expect_is(1, "numeric")
> a <- matrix(1:10, nrow = 5)
> expect_is(a, "matrix")
> 
> expect_is(mtcars, "data.frame")
> # alternatively for classes that have an is method
> expect_true(is.data.frame(mtcars))
> 
> f <- factor("a")
> expect_is(f, "factor")
> expect_s3_class(f, "factor")
> expect_type(f, "integer")
> 
> expect_null(NULL)
> 
> 
> 
> 
> cleanEx()
> nameEx("logical-expectations")
> ### * logical-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logical-expectations
> ### Title: Expectation: is the object true/false?
> ### Aliases: expect_false expect_true logical-expectations
> 
> ### ** Examples
> 
> expect_true(2 == 2)
> # Failed expectations will throw an error
> ## Not run: 
> ##D expect_true(2 != 2)
> ## End(Not run)
> expect_true(!(2 != 2))
> # or better:
> expect_false(2 != 2)
> 
> a <- 1:3
> expect_true(length(a) == 3)
> # but better to use more specific expectation, if available
> expect_equal(length(a), 3)
> 
> 
> 
> cleanEx()
> nameEx("make_expectation")
> ### * make_expectation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_expectation
> ### Title: Make an equality test.
> ### Aliases: make_expectation
> 
> ### ** Examples
> 
> x <- 1:10
> make_expectation(x)
expect_equal(x, 1:10)
> 
> make_expectation(mtcars$mpg)
expect_equal(mtcars$mpg, c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, 
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8, 
19.7, 15, 21.4))
> 
> df <- data.frame(x = 2)
> make_expectation(df)
expect_equal(df, structure(list(x = 2), .Names = "x", row.names = c(NA, 
-1L), class = "data.frame"))
> 
> 
> 
> cleanEx()
> nameEx("output-expectations")
> ### * output-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: output-expectations
> ### Title: Expectation: does code produce output/message/warning/error?
> ### Aliases: expect_error expect_message expect_output expect_output_file
> ###   expect_silent expect_warning output-expectations
> 
> ### ** Examples
> 
> # Output --------------------------------------------------------------------
> str(mtcars)
'data.frame':	32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
> expect_output(str(mtcars), "32 obs")
> expect_output(str(mtcars), "11 variables")
> 
> # You can use the arguments of grepl to control the matching
> expect_output(str(mtcars), "11 VARIABLES", ignore.case = TRUE)
> expect_output(str(mtcars), "$ mpg", fixed = TRUE)
> 
> # Messages ------------------------------------------------------------------
> 
> f <- function(x) {
+   if (x < 0) message("*x* is already negative")
+   -x
+ }
> expect_message(f(-1))
> expect_message(f(-1), "already negative")
> expect_message(f(1), NA)
> 
> # You can use the arguments of grepl to control the matching
> expect_message(f(-1), "*x*", fixed = TRUE)
> expect_message(f(-1), "NEGATIVE", ignore.case = TRUE)
> 
> # Warnings --------------------------------------------------------------------
> f <- function(x) {
+   if (x < 0) warning("*x* is already negative")
+   -x
+ }
> expect_warning(f(-1))
> expect_warning(f(-1), "already negative")
> expect_warning(f(1), NA)
> 
> # You can use the arguments of grepl to control the matching
> expect_warning(f(-1), "*x*", fixed = TRUE)
> expect_warning(f(-1), "NEGATIVE", ignore.case = TRUE)
> 
> # Errors --------------------------------------------------------------------
> f <- function() stop("My error!")
> expect_error(f())
> expect_error(f(), "My error!")
> 
> # You can use the arguments of grepl to control the matching
> expect_error(f(), "my error!", ignore.case = TRUE)
> 
> # Silent --------------------------------------------------------------------
> expect_silent("123")
> 
> f <- function() {
+   message("Hi!")
+   warning("Hey!!")
+   print("OY!!!")
+ }
> ## Not run: 
> ##D expect_silent(f())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("skip")
> ### * skip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skip
> ### Title: Skip a test.
> ### Aliases: skip skip_if_not skip_if_not_installed skip_on_appveyor
> ###   skip_on_bioc skip_on_cran skip_on_os skip_on_travis
> 
> ### ** Examples
> 
> if (FALSE) skip("No internet connection")
> 
> 
> 
> cleanEx()
> nameEx("test_package")
> ### * test_package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_package
> ### Title: Run all tests in an installed package.
> ### Aliases: test_check test_package
> 
> ### ** Examples
> 
> ## Not run: test_package("testthat")
> 
> 
> 
> cleanEx()
> nameEx("test_that")
> ### * test_that
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_that
> ### Title: Create a test.
> ### Aliases: test_that
> 
> ### ** Examples
> 
> test_that("trigonometric functions match identities", {
+   expect_equal(sin(pi / 4), 1 / sqrt(2))
+   expect_equal(cos(pi / 4), 1 / sqrt(2))
+   expect_equal(tan(pi / 4), 1)
+ })
> # Failing test:
> ## Not run: 
> ##D test_that("trigonometric functions match identities", {
> ##D   expect_equal(sin(pi / 4), 1)
> ##D })
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("testthat")
> ### * testthat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: testthat
> ### Title: R package to make testing fun!
> ### Aliases: testthat testthat-package
> 
> ### ** Examples
> 
> library(testthat)
> a <- 9
> expect_that(a, is_less_than(10))
> expect_less_than(a, 10)
Warning: Deprecated: please use `expect_lt()` instead
> 
> 
> 
> cleanEx()
> nameEx("try_again")
> ### * try_again
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: try_again
> ### Title: Try evaluating an expressing multiple times until it succeeds.
> ### Aliases: try_again
> 
> ### ** Examples
> 
> third_try <- local({
+   i <- 3
+   function() {
+     i <<- i - 1
+     if (i > 0) fail(paste0("i is ", i))
+   }
+ })
> try_again(3, third_try())
> 
> 
> 
> cleanEx()
> nameEx("with_mock")
> ### * with_mock
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_mock
> ### Title: Mock functions in a package.
> ### Aliases: with_mock
> 
> ### ** Examples
> 
> with_mock(
+   all.equal = function(x, y, ...) TRUE,
+   expect_equal(2 * 3, 4),
+   .env = "base"
+ )
[1] 6
> with_mock(
+   `base::identical` = function(x, y, ...) TRUE,
+   `base::all.equal` = function(x, y, ...) TRUE,
+   expect_equal(x <- 3 * 3, 6),
+   expect_identical(x + 4, 9)
+ )
Error: x + 4 not identical to 9.
Objects equal but not identical
Execution halted
