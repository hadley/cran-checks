
R Under development (unstable) (2021-02-17 r80023) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dplyr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dplyr')

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("across")
> ### * across
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: across
> ### Title: Apply a function (or functions) across multiple columns
> ### Aliases: across if_any if_all
> 
> ### ** Examples
> 
> # across() -----------------------------------------------------------------
> # Different ways to select the same set of columns
> # See <https://tidyselect.r-lib.org/articles/syntax.html> for details
> iris %>%
+   as_tibble() %>%
+   mutate(across(c(Sepal.Length, Sepal.Width), round))
# A tibble: 150 x 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(c(1, 2), round))
# A tibble: 150 x 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(1:Sepal.Width, round))
# A tibble: 150 x 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(where(is.double) & !c(Petal.Length, Petal.Width), round))
# A tibble: 150 x 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> 
> # A purrr-style formula
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), ~mean(.x, na.rm = TRUE)))
# A tibble: 3 x 3
  Species    Sepal.Length Sepal.Width
* <fct>             <dbl>       <dbl>
1 setosa             5.01        3.43
2 versicolor         5.94        2.77
3 virginica          6.59        2.97
> 
> # A named list of functions
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd)))
# A tibble: 3 x 5
  Species    Sepal.Length_mean Sepal.Length_sd Sepal.Width_mean Sepal.Width_sd
* <fct>                  <dbl>           <dbl>            <dbl>          <dbl>
1 setosa                  5.01           0.352             3.43          0.379
2 versicolor              5.94           0.516             2.77          0.314
3 virginica               6.59           0.636             2.97          0.322
> 
> # Use the .names argument to control the output names
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), mean, .names = "mean_{.col}"))
# A tibble: 3 x 3
  Species    mean_Sepal.Length mean_Sepal.Width
* <fct>                  <dbl>            <dbl>
1 setosa                  5.01             3.43
2 versicolor              5.94             2.77
3 virginica               6.59             2.97
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd), .names = "{.col}.{.fn}"))
# A tibble: 3 x 5
  Species    Sepal.Length.mean Sepal.Length.sd Sepal.Width.mean Sepal.Width.sd
* <fct>                  <dbl>           <dbl>            <dbl>          <dbl>
1 setosa                  5.01           0.352             3.43          0.379
2 versicolor              5.94           0.516             2.77          0.314
3 virginica               6.59           0.636             2.97          0.322
> 
> # When the list is not named, .fn is replaced by the function's position
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean, sd), .names = "{.col}.fn{.fn}"))
# A tibble: 3 x 5
  Species    Sepal.Length.fn1 Sepal.Length.fn2 Sepal.Width.fn1 Sepal.Width.fn2
* <fct>                 <dbl>            <dbl>           <dbl>           <dbl>
1 setosa                 5.01            0.352            3.43           0.379
2 versicolor             5.94            0.516            2.77           0.314
3 virginica              6.59            0.636            2.97           0.322
> 
> # if_any() and if_all() ----------------------------------------------------
> iris %>%
+   filter(if_any(ends_with("Width"), ~ . > 4))
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 3
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Error: Problem with `filter()` input `..1`.
✖ promise already under evaluation: recursive default argument reference or earlier problems?
ℹ Input `..1` is `if_any(ends_with("Width"), ~. > 4)`.
Backtrace:
    █
 1. ├─iris %>% filter(if_any(ends_with("Width"), ~. > 4))
 2. ├─dplyr::filter(., if_any(ends_with("Width"), ~. > 4))
 3. ├─dplyr:::filter.data.frame(...)
 4. │ └─dplyr:::filter_rows(.data, ...)
 5. │   ├─base::withCallingHandlers(...)
 6. │   └─mask$eval_all_filter(dots, env_filter)
 7. └─base::.handleSimpleError(...)
 8.   └─dplyr:::h(simpleError(msg, call))
Execution halted
