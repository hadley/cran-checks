
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #  fastcluster: Fast hierarchical clustering routines for R and Python
> #
> #  Copyright © 2011 Daniel Müllner
> #  <http://danifold.net>
> #
> # Test script for the R interface
> 
> seed = as.integer(runif(1, 0, 1e9))
> set.seed(seed)
> cat(sprintf("Random seed: %d\n",seed))
Random seed: 139091482
> 
> print_seed <- function() {
+   return(sprintf('
+ Please send a report to the author of the \'fastcluster\' package, Daniel Müllner.
+ For contact details, see <http://danifold.net>. To make the error
+ reproducible, you must include the following number (the random seed value) in
+ your error report: %d.\n\n', seed))
+ }
> 
> hasWardD2 = getRversion() >= '3.1.0'
> 
> # Compare two dendrograms and check whether they are equal, except that
> # ties may be resolved differently.
> compare <- function(dg1, dg2) {
+   h1 <- dg1$height
+   h2 <- dg2$height
+   # "height" vectors may have small numerical errors.
+   rdiffs <- abs(h1-h2)/pmax(abs(h1),abs(h2))
+   rdiffs = rdiffs[complete.cases(rdiffs)]
+   rel_error <-  max(rdiffs)
+   # We allow a relative error of 1e-13.
+   if (rel_error>1e-13) {
+     print(h1)
+     print(h2)
+     cat(sprintf('Height vectors differ! The maximum relative error is %e.\n', rel_error))
+     return(FALSE)
+   }
+   # Filter the indices where consecutive merging distances are distinct.
+   d = diff(dg1$height)
+   b = (c(d,1)!=0 & c(1,d)!=0)
+   #cat(sprintf("Percentage of indices where we can test: %g.\n",100.0*length(b[b])/length(b)))
+   if (any(b)) {
+     m1 = dg1$merge[b,]
+     m2 = dg2$merge[b,]
+ 
+     r = function(i) {
+       if (i<0) {
+         return(1)
+       }
+       else {
+         return(b[i])
+       }
+     }
+ 
+     f = sapply(m1,r)
+     fm1 = m1*f
+     fm2 = m2*f
+     # The "merge" matrices must be identical whereever indices are not ambiguous
+     # due to ties.
+     if (!identical(fm1,fm2)) {
+       cat('Merge matrices differ!\n')
+       return(FALSE)
+     }
+     # Compare the "order" vectors only if all merging distances were distinct.
+     if (all(b) && !identical(dg1$order,dg2$order)) {
+       cat('Order vectors differ!\n')
+       return(FALSE)
+     }
+   }
+   return(TRUE)
+ }
> 
> # Generate uniformly distributed random data
> generate.uniform <- function() {
+   n = sample(10:1000,1)
+   range_exp = runif(1,min=-10, max=10)
+   cat(sprintf("Number of sample points: %d\n",n))
+   cat(sprintf("Dissimilarity range: [0,%g]\n",10^range_exp))
+   d = runif(n*(n-1)/2, min=0, max=10^range_exp)
+   # Fake a compressed distance matrix
+   attributes(d) <- NULL
+   attr(d,"Size") <- n
+   attr(d, "call") <- 'N/A'
+   class(d) <- "dist"
+   return(d)
+ }
> 
> # Generate normally distributed random data
> generate.normal <- function() {
+   n = sample(10:1000,1)
+   dim = sample(2:20,1)
+ 
+   cat (sprintf("Number of sample points: %d\n",n))
+   cat (sprintf("Dimension: %d\n",dim))
+ 
+   pcd = matrix(rnorm(n*dim), c(n,dim))
+   d = dist(pcd)
+   return(d)
+ }
> 
> # Test the clustering functions when a distance matrix is given.
> test.dm <-  function(d) {
+   d2 = d
+   if (hasWardD2) {
+     methods = c('single','complete','average','mcquitty','ward.D','ward.D2','centroid','median')
+   }
+   else {
+     methods = c('single','complete','average','mcquitty','ward','centroid','median')
+   }
+   for (method in methods) {
+     cat(paste('Method :', method, '\n'))
+     dg_stats       = stats::hclust(d, method=method)
+     if (method == 'ward') {
+       method = 'ward.D'
+     }
+     dg_fastcluster = fastcluster::hclust(d, method=method)
+     if (!identical(d,d2)) {
+       cat('Input array was corrupted!\n')
+       stop(print_seed())
+     }
+     if (!compare(dg_stats, dg_fastcluster)) {
+       stop(print_seed())
+     }
+   }
+   cat('Passed.\n')
+ }
> 
> # Test the clustering functions for vector input in Euclidean space.
> test.vector <-  function() {
+   # generate test data
+   n = sample(10:1000,1)
+   dim = sample(2:20,1)
+   cat (sprintf("Number of sample points: %d\n",n))
+   cat (sprintf("Dimension: %d\n",dim))
+ 
+   range_exp = runif(1,min=-10, max=10)
+   pcd = matrix(rnorm(n*dim, sd=10^range_exp), c(n,dim))
+   pcd2 = pcd
+   # test
+   method='single'
+   cat(paste('Method:', method, '\n'))
+   for (metric in c('euclidean', 'maximum', 'manhattan', 'canberra', 'minkowski')) {
+     cat(paste('    Metric:', metric, '\n'))
+     if (metric=='minkowski') {
+       p = runif(1, min=1.0, max=10.0)
+       cat (sprintf("    p: %g\n",p));
+       dg_fastcluster = fastcluster::hclust.vector(pcd, method=method, metric=metric, p=p)
+       d = dist(pcd, method=metric, p=p)
+     }
+     else {
+       dg_fastcluster = fastcluster::hclust.vector(pcd, method=method, metric=metric)
+       d = dist(pcd, method=metric)
+     }
+     d2 = d
+     dg_fastcluster_dist = fastcluster::hclust(d, method=method)
+     if (!identical(d,d2) || !identical(pcd,pcd2)) {
+       cat('Input array was corrupted!\n')
+       stop(print_seed())
+     }
+     if (!compare(dg_fastcluster_dist, dg_fastcluster)) {
+       stop(print_seed())
+     }
+   }
+   for (method in c('ward','centroid','median') ) {
+     cat(paste('Method:', method, '\n'))
+     dg_fastcluster = fastcluster::hclust.vector(pcd, method=method)
+     if (!identical(pcd,pcd2)) {
+       cat('Input array was corrupted!\n')
+       stop(print_seed())
+     }
+     d = dist(pcd)
+     if(method == "ward" && hasWardD2) {
+       method = "ward.D2"
+     }
+     else
+     {
+       # Workaround: fastcluster::hclust expects _squared_ euclidean distances.
+       d = d^2
+     }
+     d2 = d
+     dg_fastcluster_dist = fastcluster::hclust(d, method=method)
+     if (!identical(d,d2)) {
+       cat('Input array was corrupted!\n')
+       stop(print_seed())
+     }
+     if(method != "ward.D2") {
+       dg_fastcluster_dist$height = sqrt(dg_fastcluster_dist$height)
+     }
+     # The Euclidean methods may have small numerical errors due to squaring/
+     # taking the root in the Euclidean distances.
+     if (!compare(dg_fastcluster_dist, dg_fastcluster)) {
+       stop(print_seed())
+     }
+   }
+   cat('Passed.\n')
+ }
> 
> # Test the single linkage function with the "binary" metric
> test.vector.binary <- function() {
+   # generate test data
+   cat (sprintf("Uniform sampling for the 'binary' metric:\n"))
+   n = sample(10:400,1)
+   dim = sample(n:(2*n),1)
+   cat (sprintf("Number of sample points: %d\n",n))
+   cat (sprintf("Dimension: %d\n",dim))
+   pcd = matrix(sample(-1:2, n*dim, replace=T), c(n,dim))
+   pcd2 = pcd
+   # test
+   method='single'
+   metric='binary'
+   cat(paste('Method:', method, '\n'))
+   cat(paste('    Metric:', metric, '\n'))
+   dg_fastcluster = fastcluster::hclust.vector(pcd, method=method, metric=metric)
+   d = dist(pcd, method=metric)
+   d2 = d
+   dg_fastcluster_dist       = fastcluster::hclust(d, method=method)
+   if (!identical(d,d2) || !identical(d,d2)) {
+     cat('Input array was corrupted!\n')
+     stop(print_seed())
+   }
+   if (!compare(dg_fastcluster_dist, dg_fastcluster)) {
+     stop(print_seed())
+   }
+   cat('Passed.\n')
+ }
> 
> 
> N = 15
> for (i in (1:N)) {
+   if (i%%2==1) {
+     cat(sprintf('Random test %d of %d (uniform distribution of distances):\n',i,2*N))
+     d = generate.uniform()
+   }
+   else {
+     cat(sprintf('Random test %d of %d (Gaussian density):\n',i,2*N))
+     d = generate.normal()
+   }
+   test.dm(d)
+ }
Random test 1 of 30 (uniform distribution of distances):
Number of sample points: 966
Dissimilarity range: [0,1.19719e+06]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 2 of 30 (Gaussian density):
Number of sample points: 642
Dimension: 11
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 3 of 30 (uniform distribution of distances):
Number of sample points: 781
Dissimilarity range: [0,753.198]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 4 of 30 (Gaussian density):
Number of sample points: 329
Dimension: 4
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 5 of 30 (uniform distribution of distances):
Number of sample points: 513
Dissimilarity range: [0,0.000170589]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 6 of 30 (Gaussian density):
Number of sample points: 965
Dimension: 19
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 7 of 30 (uniform distribution of distances):
Number of sample points: 134
Dissimilarity range: [0,3.11964e-09]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 8 of 30 (Gaussian density):
Number of sample points: 942
Dimension: 11
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 9 of 30 (uniform distribution of distances):
Number of sample points: 52
Dissimilarity range: [0,0.074381]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 10 of 30 (Gaussian density):
Number of sample points: 796
Dimension: 10
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 11 of 30 (uniform distribution of distances):
Number of sample points: 450
Dissimilarity range: [0,11777.6]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 12 of 30 (Gaussian density):
Number of sample points: 200
Dimension: 8
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 13 of 30 (uniform distribution of distances):
Number of sample points: 74
Dissimilarity range: [0,0.00017936]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 14 of 30 (Gaussian density):
Number of sample points: 514
Dimension: 7
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
Random test 15 of 30 (uniform distribution of distances):
Number of sample points: 66
Dissimilarity range: [0,0.000801795]
Method : single 
Method : complete 
Method : average 
Method : mcquitty 
Method : ward.D 
Method : ward.D2 
Method : centroid 
Method : median 
Passed.
> for (i in (N+1:N)) {
+   cat(sprintf('Random test %d of %d (Gaussian density):\n',i,2*N))
+   test.vector()
+   test.vector.binary()
+ }
Random test 16 of 30 (Gaussian density):
Number of sample points: 909
Dimension: 16
Method: single 
    Metric: euclidean 
    Metric: maximum 
    Metric: manhattan 
    Metric: canberra 
  [1] 4.971156 5.241259 5.453956 5.493760 5.507656 5.515854 5.519079 5.550908
  [9] 5.573440 5.605389 5.662821 5.675991 5.703470 5.709994 5.719718 5.741853
 [17] 5.801430 5.808681 5.811950 5.828352 5.849586 5.856961 5.864425 5.868514
 [25] 5.871129 5.887400 5.915600 5.962181 5.963972 5.980594 5.989481 5.993381
 [33] 6.005578 6.015418 6.022912 6.025239 6.031646 6.036340 6.044977 6.046429
 [41] 6.047310 6.047538 6.055357 6.063113 6.070048 6.074023 6.074196 6.077918
 [49] 6.106882 6.144642 6.174310 6.176411 6.180646 6.181625 6.192074 6.218693
 [57] 6.233053 6.233732 6.235398 6.237526 6.242702 6.248067 6.253400 6.253487
 [65] 6.261433 6.266052 6.269556 6.270989 6.271989 6.273604 6.274154 6.284269
 [73] 6.284809 6.287932 6.297249 6.297569 6.298828 6.305251 6.307403 6.318537
 [81] 6.328131 6.333092 6.333338 6.342558 6.349436 6.355114 6.355232 6.360038
 [89] 6.365994 6.367282 6.380888 6.391965 6.393440 6.393909 6.393944 6.394737
 [97] 6.402911 6.411686 6.418697 6.427472 6.433075 6.444260 6.449171 6.449724
[105] 6.454527 6.456865 6.458946 6.460507 6.466183 6.470441 6.472915 6.475336
[113] 6.479898 6.481197 6.482405 6.482936 6.488718 6.489079 6.493018 6.496382
[121] 6.499207 6.499679 6.500940 6.508207 6.513160 6.523537 6.526915 6.531266
[129] 6.534537 6.536046 6.536114 6.537442 6.544226 6.549586 6.550249 6.553051
[137] 6.559314 6.561711 6.565970 6.567971 6.573440 6.578581 6.580249 6.581727
[145] 6.583833 6.587409 6.587952 6.588076 6.592867 6.598967 6.602210 6.603259
[153] 6.607977 6.610135 6.612327 6.614684 6.616996 6.622907 6.626085 6.628615
[161] 6.634872 6.636800 6.639498 6.643255 6.651463 6.657296 6.659798 6.660966
[169] 6.663395 6.665359 6.667465 6.674073 6.676894 6.676975 6.678046 6.684533
[177] 6.685525 6.689420 6.689905 6.698753 6.704788 6.705101 6.707145 6.707664
[185] 6.709044 6.711708 6.713582 6.714567 6.718737 6.719303 6.723038 6.726133
[193] 6.727716 6.729700 6.730774 6.732519 6.734476 6.735371 6.735634 6.736355
[201] 6.741824 6.742434 6.744019 6.746582 6.747113 6.748313 6.749781 6.753873
[209] 6.754356 6.756219 6.756565 6.758265 6.758591 6.759553 6.764265 6.764272
[217] 6.764603 6.765187 6.767029 6.768309 6.771606 6.771651 6.773856 6.777805
[225] 6.780061 6.780066 6.784220 6.787567 6.792177 6.792400 6.792790 6.792998
[233] 6.793819 6.793878 6.794595 6.795243 6.796216 6.796293 6.798167 6.800790
[241] 6.802941 6.803032 6.805866 6.808260 6.811265 6.813222 6.814248 6.815163
[249] 6.816228 6.820237 6.823128 6.824885 6.825857 6.828404 6.836017 6.838635
[257] 6.839988 6.840890 6.842683 6.848432 6.849166 6.850057 6.850116 6.851546
[265] 6.855531 6.857678 6.857719 6.858590 6.859391 6.860040 6.860180 6.869490
[273] 6.870405 6.870699 6.871478 6.872709 6.874253 6.877184 6.878128 6.880851
[281] 6.884541 6.885858 6.888647 6.890975 6.892457 6.894763 6.895100 6.896847
[289] 6.896935 6.898360 6.898430 6.900284 6.901351 6.903309 6.904827 6.908199
[297] 6.908359 6.909819 6.912602 6.913306 6.913330 6.913870 6.913915 6.916228
[305] 6.917522 6.918069 6.918298 6.919222 6.920012 6.920485 6.921575 6.921589
[313] 6.921719 6.923428 6.925291 6.928500 6.930298 6.934576 6.936382 6.937023
[321] 6.938008 6.938652 6.939559 6.939797 6.940550 6.941542 6.941545 6.944075
[329] 6.944753 6.946460 6.948751 6.954747 6.955213 6.956134 6.956726 6.957836
[337] 6.958344 6.961969 6.962259 6.963503 6.964118 6.965738 6.967593 6.967765
[345] 6.967920 6.969565 6.970423 6.970739 6.971058 6.974882 6.975490 6.976130
[353] 6.977036 6.978295 6.980070 6.981015 6.984758 6.985369 6.985539 6.985855
[361] 6.986012 6.986922 6.987672 6.987700 6.990059 6.991888 6.992922 6.993304
[369] 6.994004 6.995109 6.998859 6.998959 6.999179 6.999191 6.999966 7.000155
[377] 7.000344 7.000642 7.003548 7.005771 7.008776 7.009298 7.009381 7.010149
[385] 7.010800 7.010857 7.011455 7.011852 7.012835 7.014073 7.015460 7.015493
[393] 7.015623 7.021878 7.025794 7.027631 7.029118 7.033911 7.036381 7.037184
[401] 7.038724 7.039715 7.040125 7.040251 7.040776 7.041823 7.042489 7.044955
[409] 7.049550 7.049982 7.051147 7.051599 7.052657 7.052709 7.054104 7.056417
[417] 7.057148 7.057276 7.057728 7.057880 7.058407 7.058593 7.059916 7.061426
[425] 7.061881 7.062488 7.064576 7.065291 7.065418 7.065535 7.065877 7.066985
[433] 7.069925 7.069948 7.070326 7.071737 7.074470 7.078024 7.078509 7.083339
[441] 7.083600 7.084372 7.086875 7.089383 7.092846 7.093180 7.095210 7.097537
[449] 7.098584 7.101328 7.102067 7.102782 7.104083 7.105041 7.105442 7.106311
[457] 7.107505 7.108841 7.108898 7.109626 7.110265 7.110413 7.110425 7.111321
[465] 7.113201 7.113993 7.115636 7.117084 7.117107 7.117830 7.118981 7.121610
[473] 7.125434 7.125876 7.126396 7.127531 7.127846 7.128992 7.129182 7.129851
[481] 7.130456 7.130524 7.131234 7.131888 7.132340 7.132687 7.133158 7.135266
[489] 7.136584 7.136967 7.137137 7.139506 7.139635 7.141256 7.141559 7.143332
[497] 7.143339 7.143675 7.143724 7.144332 7.144512 7.145730 7.149330 7.150341
[505] 7.152735 7.153430 7.153624 7.155160 7.155270 7.159679 7.165475 7.165885
[513] 7.168217 7.169024 7.172405 7.174907 7.176878 7.177410 7.178259 7.181386
[521] 7.182201 7.184333 7.184722 7.185746 7.185789 7.185986 7.187869 7.188690
[529] 7.191572 7.191759 7.194503 7.195261 7.196275 7.198496 7.200213 7.202100
[537] 7.203869 7.207012 7.207496 7.209825 7.210090 7.211375 7.212793 7.212971
[545] 7.213309 7.213824 7.216229 7.216243 7.219162 7.219970 7.220414 7.220915
[553] 7.224574 7.226124 7.227717 7.227971 7.228196 7.229163 7.229367 7.230148
[561] 7.230435 7.231844 7.234952 7.236035 7.236172 7.237305 7.240234 7.241800
[569] 7.245503 7.245627 7.246208 7.248944 7.250998 7.253543 7.255116 7.255263
[577] 7.255878 7.260064 7.260480 7.262761 7.264888 7.265713 7.265735 7.269998
[585] 7.270652 7.271629 7.274157 7.276022 7.277251 7.277454 7.283251 7.283903
[593] 7.287927 7.288632 7.290707 7.290715 7.293610 7.293873 7.295126 7.295978
[601] 7.296585 7.298575 7.298942 7.299064 7.300679 7.300976 7.301445 7.301713
[609] 7.302260 7.302276 7.302703 7.307382 7.307407 7.311396 7.312438 7.313877
[617] 7.315726 7.317002 7.317199 7.317868 7.318332 7.320066 7.320646 7.323764
[625] 7.329141 7.334204 7.337950 7.337988 7.338972 7.340078 7.346128 7.346321
[633] 7.352050 7.356147 7.358462 7.358484 7.360536 7.361299 7.364085 7.365083
[641] 7.367532 7.367972 7.369787 7.371574 7.373264 7.376506 7.377179 7.378741
[649] 7.381126 7.381296 7.383572 7.385450 7.385612 7.388918 7.393692 7.394263
[657] 7.394657 7.399903 7.402444 7.404612 7.406850 7.406956 7.408007 7.409760
[665] 7.410980 7.411928 7.412221 7.416912 7.417865 7.417975 7.418405 7.418548
[673] 7.418676 7.418789 7.418798 7.419817 7.420884 7.422263 7.423218 7.425258
[681] 7.425988 7.426281 7.428030 7.428135 7.430987 7.434160 7.434419 7.436618
[689] 7.437941 7.438107 7.439224 7.441378 7.441510 7.445533 7.450044 7.451521
[697] 7.453302 7.454867 7.458274 7.461094 7.465652 7.467158 7.467686 7.468193
[705] 7.469298 7.474242 7.478375 7.480392 7.481424 7.481919 7.482159 7.482995
[713] 7.484868 7.489908 7.490476 7.496117 7.500911 7.504272 7.504529 7.512410
[721] 7.513801 7.514909 7.516165 7.516395 7.517369 7.518123 7.524108 7.527546
[729] 7.528302 7.531865 7.531980 7.533890 7.535528 7.536522 7.538278 7.540714
[737] 7.541418 7.543299 7.545514 7.547118 7.547458 7.549896 7.553728 7.556956
[745] 7.559009 7.559744 7.561031 7.563166 7.566590 7.568089 7.569952 7.570152
[753] 7.571151 7.572480 7.575605 7.575944 7.576996 7.578597 7.579008 7.583079
[761] 7.583703 7.587838 7.592039 7.592796 7.593733 7.595260 7.598503 7.603562
[769] 7.604337 7.605419 7.612984 7.614118 7.615583 7.615811 7.622591 7.628430
[777] 7.632185 7.633255 7.633451 7.639158 7.645835 7.648043 7.652047 7.652425
[785] 7.656316 7.657022 7.657792 7.660011 7.664716 7.667789 7.669728 7.671667
[793] 7.681569 7.686045 7.689168 7.691586 7.702865 7.706153 7.708449 7.710479
[801] 7.716021 7.724454 7.725834 7.726215 7.731055 7.733250 7.733494 7.746949
[809] 7.753969 7.754850 7.759807 7.765296 7.767865 7.769787 7.771425 7.774149
[817] 7.778569 7.783743 7.794195 7.805866 7.809180 7.811935 7.812088 7.827631
[825] 7.836327 7.836676 7.837163 7.841030 7.843620 7.843726 7.858232 7.858247
[833] 7.861724 7.863293 7.864884 7.873240 7.875132 7.881523 7.882584 7.894411
[841] 7.902006 7.902035 7.902158 7.905765 7.910113 7.916661 7.921492 7.922912
[849] 7.930637 7.932532 7.948215 7.948810 7.949840 7.949891 7.956288 7.957458
[857] 7.974352 7.982778 7.987112 7.988992 7.990595 7.991753 7.995509 8.011208
[865] 8.019233 8.020875 8.026652 8.030238 8.033997 8.040744 8.041457 8.070730
[873] 8.084897 8.089784 8.089919 8.117140 8.121418 8.128413 8.131747 8.132123
[881] 8.133548 8.150485 8.156241 8.157177 8.195181 8.207223 8.208192 8.228061
[889] 8.270336 8.272164 8.276261 8.336955 8.337105 8.340158 8.352324 8.373804
[897] 8.375346 8.376668 8.429845 8.433609 8.482879 8.486843 8.542881 8.566877
[905] 8.590451 8.590473 8.657787 8.726088
  [1]  5.507656  5.613409  5.808681  5.875502  5.910201  6.110890  6.217612
  [8]  6.337275  6.438084  6.583836  6.615469  6.731620  6.750050  6.914322
 [15]  7.083900  7.089427  7.119630  7.209466  7.231798  7.317728  7.333078
 [22]  7.336981  7.393243  7.394212  7.405919  7.462474  7.472459  7.497359
 [29]  7.508699  7.534499  7.586463  7.588410  7.607785  7.627427  7.628497
 [36]  7.630454  7.738623  7.753858  7.755703  7.774804  7.780032  7.799708
 [43]  7.800625  7.821112  7.907470  7.937658  7.948468  7.976376  7.977147
 [50]  7.978097  7.994696  8.015900  8.018994  8.060791  8.081306  8.082589
 [57]  8.089400  8.090745  8.092052  8.108257  8.108801  8.147348  8.161051
 [64]  8.182162  8.196574  8.212542  8.213021  8.226829  8.233532  8.236831
 [71]  8.241814  8.245631  8.266726  8.284967  8.291921  8.298112  8.312429
 [78]  8.332520  8.334409  8.334580  8.341023  8.347002  8.348321  8.366022
 [85]  8.395149  8.402973  8.412718  8.420240  8.421967  8.434475  8.435769
 [92]  8.441295  8.444630  8.449376  8.449420  8.464644  8.465208  8.483187
 [99]  8.483302  8.485637  8.485926  8.486354  8.493660  8.498195  8.502355
[106]  8.509599  8.513729  8.525194  8.532077  8.535285  8.555511  8.562985
[113]  8.565609  8.565629  8.576647  8.588050  8.601117  8.605289  8.610492
[120]  8.621429  8.625998  8.627859  8.638109  8.641128  8.645937  8.650561
[127]  8.660334  8.679763  8.682184  8.687045  8.688476  8.692930  8.702218
[134]  8.702739  8.710521  8.734457  8.735157  8.736337  8.736670  8.746882
[141]  8.746956  8.748109  8.755403  8.763183  8.765547  8.772088  8.776758
[148]  8.777259  8.782252  8.790893  8.794366  8.802531  8.811642  8.812560
[155]  8.821371  8.837218  8.847993  8.849871  8.861311  8.866506  8.866648
[162]  8.867126  8.874174  8.874433  8.877824  8.891845  8.892986  8.893484
[169]  8.896525  8.896709  8.896718  8.902981  8.905796  8.909676  8.924477
[176]  8.929616  8.945134  8.960451  8.965514  8.967030  8.975077  8.976407
[183]  8.977371  8.979092  8.987579  9.002476  9.006832  9.011900  9.013443
[190]  9.015102  9.021334  9.024659  9.031457  9.047380  9.047559  9.050986
[197]  9.055558  9.063027  9.064453  9.068565  9.070134  9.074497  9.078352
[204]  9.080788  9.085344  9.085548  9.095891  9.096804  9.104035  9.106988
[211]  9.114179  9.123847  9.124200  9.129124  9.131202  9.140170  9.140281
[218]  9.155809  9.163549  9.164774  9.179388  9.188290  9.191963  9.193203
[225]  9.200485  9.207398  9.210999  9.211337  9.212260  9.220432  9.224155
[232]  9.225267  9.226179  9.231390  9.231413  9.235300  9.240902  9.242669
[239]  9.252482  9.252880  9.256521  9.257967  9.266727  9.267121  9.270300
[246]  9.275810  9.276940  9.278009  9.289550  9.292577  9.304547  9.308928
[253]  9.309199  9.310747  9.313717  9.322784  9.333224  9.344111  9.346201
[260]  9.349383  9.349826  9.368465  9.372625  9.374092  9.374916  9.389988
[267]  9.393106  9.398234  9.400333  9.402037  9.409242  9.409496  9.415493
[274]  9.417401  9.420237  9.430676  9.431538  9.433359  9.434198  9.438034
[281]  9.439541  9.441165  9.442291  9.445655  9.452591  9.458081  9.458477
[288]  9.463315  9.464078  9.466992  9.475127  9.478844  9.482670  9.483514
[295]  9.487764  9.487983  9.489393  9.491015  9.493375  9.495642  9.495655
[302]  9.501312  9.504131  9.510724  9.511408  9.513037  9.516188  9.516987
[309]  9.518187  9.533689  9.537338  9.540098  9.543126  9.546365  9.549697
[316]  9.551586  9.553644  9.554867  9.555585  9.557200  9.584880  9.585059
[323]  9.588880  9.589048  9.598215  9.607436  9.607910  9.610440  9.611986
[330]  9.613684  9.615429  9.616125  9.616203  9.618449  9.626807  9.634854
[337]  9.636656  9.638014  9.639227  9.651454  9.653832  9.654020  9.659136
[344]  9.659439  9.660828  9.662092  9.665542  9.670457  9.671173  9.675278
[351]  9.692207  9.696471  9.697649  9.701413  9.703208  9.704203  9.713883
[358]  9.714138  9.717114  9.719563  9.720315  9.728844  9.730027  9.732080
[365]  9.735052  9.735628  9.741366  9.743003  9.745215  9.749266  9.749538
[372]  9.753525  9.754968  9.756412  9.759870  9.767201  9.768537  9.773342
[379]  9.775398  9.776694  9.782819  9.783562  9.787025  9.787223  9.787563
[386]  9.787823  9.788575  9.795523  9.798066  9.804336  9.804954  9.814254
[393]  9.816204  9.818829  9.822169  9.822870  9.824451  9.829141  9.835696
[400]  9.836514  9.837937  9.841998  9.843323  9.843658  9.843827  9.856652
[407]  9.857315  9.859139  9.862111  9.869609  9.871757  9.872500  9.873577
[414]  9.874439  9.875747  9.876458  9.882356  9.882444  9.892748  9.894349
[421]  9.897579  9.902657  9.904497  9.910603  9.915840  9.917350  9.918087
[428]  9.920136  9.920195  9.925892  9.931531  9.943149  9.943751  9.947629
[435]  9.947657  9.949263  9.950877  9.956685  9.961075  9.962521  9.966336
[442]  9.970271  9.971638  9.977276  9.979526  9.979764  9.981444  9.983149
[449]  9.991418  9.991459  9.993184  9.993663  9.995954  9.999791 10.001874
[456] 10.002366 10.003723 10.005561 10.005564 10.007035 10.008524 10.008982
[463] 10.010210 10.011426 10.012422 10.016173 10.026921 10.035730 10.035915
[470] 10.036173 10.038820 10.040417 10.041057 10.052926 10.053950 10.054261
[477] 10.054491 10.054659 10.058184 10.062907 10.063398 10.063585 10.068949
[484] 10.069330 10.083856 10.084252 10.084490 10.084510 10.087875 10.093695
[491] 10.099266 10.099493 10.104091 10.109041 10.109792 10.111903 10.112872
[498] 10.114477 10.115465 10.115798 10.115895 10.118321 10.118928 10.119739
[505] 10.119828 10.120546 10.123874 10.126889 10.127930 10.128786 10.134021
[512] 10.134302 10.135649 10.136599 10.139115 10.140133 10.142974 10.143358
[519] 10.146384 10.148714 10.152485 10.154020 10.155133 10.164063 10.165467
[526] 10.173381 10.183638 10.186194 10.187874 10.188163 10.193569 10.193861
[533] 10.194747 10.196025 10.197650 10.199031 10.200569 10.203090 10.203337
[540] 10.206105 10.209980 10.214670 10.218090 10.219089 10.221288 10.221693
[547] 10.223289 10.228543 10.231284 10.231790 10.231801 10.233583 10.237990
[554] 10.240275 10.247161 10.249885 10.250071 10.250236 10.250706 10.251779
[561] 10.254790 10.260581 10.262131 10.263113 10.266380 10.269380 10.271082
[568] 10.273069 10.274458 10.278678 10.279143 10.279406 10.286400 10.286765
[575] 10.287212 10.287625 10.289695 10.292361 10.295705 10.298915 10.299118
[582] 10.301970 10.302102 10.303421 10.304653 10.305869 10.307316 10.308068
[589] 10.311157 10.317716 10.318141 10.321879 10.323552 10.325223 10.328469
[596] 10.328799 10.332725 10.333433 10.336608 10.337785 10.338572 10.338764
[603] 10.344206 10.344290 10.345937 10.346302 10.351822 10.352115 10.353516
[610] 10.354380 10.356779 10.358721 10.359484 10.360078 10.361674 10.361954
[617] 10.363444 10.365495 10.366883 10.370472 10.372453 10.374181 10.376319
[624] 10.379028 10.385758 10.388325 10.390087 10.402884 10.407577 10.411348
[631] 10.411420 10.414434 10.414539 10.416311 10.417235 10.418040 10.421733
[638] 10.423806 10.424505 10.425574 10.427908 10.428830 10.429084 10.429285
[645] 10.429611 10.431939 10.436918 10.441783 10.443413 10.443930 10.444113
[652] 10.446327 10.449440 10.449797 10.456198 10.456405 10.457299 10.459037
[659] 10.460933 10.465487 10.466434 10.468080 10.468316 10.469774 10.470738
[666] 10.473825 10.477853 10.480202 10.482331 10.483632 10.486905 10.487026
[673] 10.488599 10.489679 10.490957 10.494660 10.494777 10.502325 10.503168
[680] 10.503624 10.504209 10.504730 10.507909 10.511099 10.516222 10.520838
[687] 10.523419 10.524550 10.526133 10.528061 10.529373 10.531858 10.531932
[694] 10.532097 10.536060 10.539870 10.541497 10.545559 10.546703 10.546733
[701] 10.550358 10.555130 10.557648 10.559379 10.561574 10.562504 10.563819
[708] 10.565608 10.570228 10.578927 10.581180 10.581413 10.584982 10.588744
[715] 10.590265 10.597858 10.597977 10.600768 10.602102 10.603114 10.603297
[722] 10.605722 10.606301 10.607684 10.612830 10.629162 10.633590 10.634003
[729] 10.636875 10.640735 10.641887 10.642024 10.648469 10.649426 10.650043
[736] 10.657836 10.659103 10.660854 10.661622 10.665485 10.668965 10.669727
[743] 10.677535 10.677550 10.681288 10.682582 10.683117 10.686387 10.688255
[750] 10.697715 10.701691 10.703039 10.704993 10.705969 10.706550 10.711541
[757] 10.712817 10.716574 10.718480 10.727874 10.729255 10.731555 10.733496
[764] 10.736464 10.747827 10.753333 10.764598 10.766877 10.768621 10.781753
[771] 10.785210 10.787383 10.788247 10.796186 10.796285 10.799635 10.800037
[778] 10.801710 10.811590 10.811678 10.827283 10.829044 10.838375 10.841767
[785] 10.842675 10.844142 10.844146 10.844446 10.846302 10.846991 10.855469
[792] 10.858878 10.869927 10.872035 10.874654 10.882727 10.886270 10.906643
[799] 10.914460 10.916789 10.925838 10.926932 10.934087 10.939761 10.945875
[806] 10.948465 10.949856 10.954692 10.958785 10.959124 10.966531 10.967522
[813] 10.967876 10.985474 10.992286 10.992598 11.001193 11.003450 11.004836
[820] 11.014333 11.018291 11.029781 11.032432 11.041518 11.042299 11.049493
[827] 11.051607 11.059763 11.075582 11.081876 11.090528 11.097799 11.104851
[834] 11.108514 11.110206 11.112402 11.129193 11.134797 11.148730 11.152008
[841] 11.152267 11.157555 11.161156 11.164996 11.172090 11.188947 11.193118
[848] 11.210430 11.215601 11.219534 11.233196 11.237815 11.254423 11.256113
[855] 11.256200 11.256469 11.270632 11.273425 11.277335 11.285112 11.299817
[862] 11.305084 11.307192 11.309882 11.316621 11.317540 11.318830 11.348941
[869] 11.349677 11.363024 11.368024 11.389277 11.395113 11.400858 11.420637
[876] 11.425370 11.463064 11.473850 11.480558 11.489007 11.498093 11.517269
[883] 11.541082 11.564977 11.568529 11.575087 11.578848 11.580020 11.603950
[890] 11.610672 11.618941 11.630803 11.633459 11.650288 11.711759 11.718630
[897] 11.725587 11.749550 11.764589 11.774026 11.837163 11.924210 11.978311
[904] 11.987337 11.994171 12.088815 12.170701 12.176412
Height vectors differ! The maximum relative error is 2.952540e-01.
Error in test.vector() : 
Please send a report to the author of the 'fastcluster' package, Daniel Müllner.
For contact details, see <http://danifold.net>. To make the error
reproducible, you must include the following number (the random seed value) in
your error report: 139091482.

Execution halted
