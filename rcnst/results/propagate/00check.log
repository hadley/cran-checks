* using log directory ‘/home/tomas/cran/rcnst/check/propagate.Rcheck’
* using R Under development (unstable) (2017-08-14 r73093)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘propagate/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘propagate’ version ‘1.0-4’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘propagate’ can be installed ... OK
* checking package directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
WelchSatter: no visible global function definition for ‘qt’
bigcor: no visible binding for global variable ‘cor’
bigcor: no visible binding for global variable ‘cov’
contribution: no visible global function definition for ‘barplot’
counter: no visible global function definition for ‘flush.console’
dsn: no visible global function definition for ‘dnorm’
dsn: no visible global function definition for ‘pnorm’
dst: no visible global function definition for ‘dt’
fitDistr: no visible global function definition for ‘var’
fitDistr: no visible global function definition for ‘sd’
fitDistr: no visible global function definition for ‘density’
fitDistr: no visible global function definition for ‘hist’
fitDistr : fitAIC: no visible global function definition for ‘AIC’
fitDistr: no visible binding for global variable ‘dnorm’
fitDistr: no visible binding for global variable ‘dlnorm’
fitDistr: no visible binding for global variable ‘dlogis’
fitDistr: no visible binding for global variable ‘dunif’
fitDistr: no visible binding for global variable ‘dgamma’
fitDistr: no visible binding for global variable ‘dcauchy’
fitDistr: no visible global function definition for ‘lines’
interval: no visible global function definition for ‘abline’
makeGrad : FUN: no visible global function definition for ‘D’
makeHess : FUN: no visible global function definition for ‘D’
mixCov: no visible global function definition for ‘cov’
plot.propagate: no visible global function definition for ‘par’
plot.propagate: no visible global function definition for ‘quantile’
plot.propagate: no visible global function definition for ‘hist’
plot.propagate: no visible global function definition for ‘density’
plot.propagate: no visible global function definition for ‘lines’
plot.propagate: no visible global function definition for ‘title’
plot.propagate: no visible global function definition for ‘abline’
plot.propagate: no visible global function definition for ‘boxplot’
predictNLS: no visible global function definition for ‘coef’
predictNLS: no visible global function definition for ‘vcov’
predictNLS: no visible global function definition for ‘tail’
predictNLS: no visible global function definition for ‘qt’
predictNLS: no visible global function definition for ‘df.residual’
predictNLS: no visible global function definition for ‘residuals’
propagate : <anonymous>: no visible global function definition for ‘sd’
propagate: no visible global function definition for ‘cov’
propagate: no visible global function definition for ‘quantile’
propagate: no visible global function definition for ‘rnorm’
propagate: no visible global function definition for ‘sd’
propagate: no visible global function definition for ‘median’
propagate: no visible global function definition for ‘mad’
rJSB : erf.inv: no visible global function definition for ‘qnorm’
rJSB: no visible global function definition for ‘runif’
rJSU : erf.inv: no visible global function definition for ‘qnorm’
rJSU: no visible global function definition for ‘runif’
rarcsin: no visible global function definition for ‘runif’
rbeta2: no visible global function definition for ‘qbeta’
rbeta2: no visible global function definition for ‘runif’
rctrap: no visible global function definition for ‘runif’
rgnorm : invcerf: no visible global function definition for ‘qnorm’
rgnorm: no visible global function definition for ‘runif’
rgtrap: no visible global function definition for ‘runif’
rgumbel: no visible global function definition for ‘runif’
rlaplace: no visible global function definition for ‘runif’
rmises: no visible global function definition for ‘runif’
rsn: no visible global function definition for ‘rnorm’
rst: no visible global function definition for ‘rt’
rtrap: no visible global function definition for ‘runif’
rtriang: no visible global function definition for ‘runif’
rweibull2: no visible global function definition for ‘runif’
summary.propagate: no visible global function definition for
  ‘shapiro.test’
summary.propagate: no visible global function definition for ‘rnorm’
summary.propagate: no visible global function definition for ‘sd’
summary.propagate: no visible global function definition for ‘ks.test’
Undefined global functions or variables:
  AIC D abline barplot boxplot coef cor cov dcauchy density df.residual
  dgamma dlnorm dlogis dnorm dt dunif flush.console hist ks.test lines
  mad median par pnorm qbeta qnorm qt quantile residuals rnorm rt runif
  sd shapiro.test tail title var vcov
Consider adding
  importFrom("graphics", "abline", "barplot", "boxplot", "hist", "lines",
             "par", "title")
  importFrom("stats", "AIC", "D", "coef", "cor", "cov", "dcauchy",
             "density", "df.residual", "dgamma", "dlnorm", "dlogis",
             "dnorm", "dt", "dunif", "ks.test", "mad", "median", "pnorm",
             "qbeta", "qnorm", "qt", "quantile", "residuals", "rnorm",
             "rt", "runif", "sd", "shapiro.test", "var", "vcov")
  importFrom("utils", "flush.console", "tail")
to your NAMESPACE file.
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... WARNING
Missing link or links in documentation object 'fitDistr.Rd':
  ‘histogram’

See section 'Cross-references' in the 'Writing R Extensions' manual.

* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking examples ... ERROR
Running examples in ‘propagate-Ex.R’ failed
The error most likely occurred in:

> ### Name: predictNLS
> ### Title: Confidence intervals for nonlinear models based on uncertainty
> ###   propagation
> ### Aliases: predictNLS
> ### Keywords: array algebra multivariate
> 
> ### ** Examples
> 
> ## Example from ?nls.
> DNase1 <- subset(DNase, Run == 1)
> fm3DNase1 <- nls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),
+                  data = DNase1, start = list(Asym = 3, xmid = 0, scal = 1))
> 
> ## Using a single predictor value without error.
> PROP1 <- predictNLS(fm3DNase1, newdata = data.frame(conc = 2))
Propagating predictor value #1 ...
> PRED1 <- predict(fm3DNase1, newdata = data.frame(conc = 2))
> PROP1$summary
  Prop.Mean.1 Prop.Mean.2   Prop.sd.1   Prop.sd.2 Prop.2.5% Prop.97.5%
1   0.7480472   0.7481514 0.008042515 0.008052591 0.7307548  0.7655479
   Sim.Mean      Sim.sd Sim.Median     Sim.MAD  Sim.2.5% Sim.97.5%
1 0.7481505 0.008041165  0.7481565 0.008040288 0.7323719 0.7639674
> PRED1
[1] 0.7480472
> ## => Prop.Mean.1 equal to PRED1
> 
> ## Not run: 
> ##D ## Using a sequence of predictor values without error.
> ##D CONC <- seq(1, 12, by = 1)
> ##D PROP2 <- predictNLS(fm3DNase1, newdata = data.frame(conc = CONC))
> ##D PRED2 <- predict(fm3DNase1, newdata = data.frame(conc = CONC))
> ##D PROP2$summary
> ##D PRED2
> ##D ## => Prop.Mean.1 equal to PRED2
> ##D 
> ##D ## Using a sequence of predictor values with error.
> ##D DAT <- data.frame(conc = CONC, error = rnorm(12, 0, 0.1))
> ##D PROP3 <- predictNLS(fm3DNase1, newdata = DAT)
> ##D PRED3 <- predict(fm3DNase1, newdata = DAT)
> ##D PROP3$summary
> ##D PRED3
> ##D ## => Prop.Mean.1 equal to PRED3
> ##D 
> ##D ## Plot predicted and confidence values from 
> ##D ## first-/second-order Taylor expansion 
> ##D ## and Monte Carlo simulation.
> ##D plot(DNase1$conc, DNase1$density)
> ##D lines(DNase1$conc, fitted(fm3DNase1), lwd = 2, col = 1)
> ##D points(CONC, PROP2$summary[, 1], col = 2, pch = 16)
> ##D lines(CONC, PROP2$summary[, 5], col = 2)
> ##D lines(CONC, PROP2$summary[, 6], col = 2)
> ## End(Not run)
> 
> ## Using multiple predictor values
> ## 1: Setup of response values
> ## with gaussian error of 10%.
> x <- seq(1, 10, by = 0.01)
> y <- seq(10, 1, by = -0.01)
> a <- 2
> b <- 5
> c <- 10
> z <- a * exp(b * x)^sin(y/c)
> z <- z + sapply(z, function(x) rnorm(1, x, 0.10 * x))
> ## 2: Fit 'nls' model.
> MOD <- nls(z ~ a * exp(b * x)^sin(y/c), 
+              start = list(a = 2, b = 5, c = 10))
> ## 3: newdata without errors and prediction.
> DAT1 <- data.frame(x = 4, y = 3)
> PROP4 <- predictNLS(MOD, newdata = DAT1)
Propagating predictor value #1 ...
> PROP4$summary
  Prop.Mean.1 Prop.Mean.2 Prop.sd.1 Prop.sd.2 Prop.2.5% Prop.97.5% Sim.Mean
1    1444.777    1442.775  54.96645  55.04017  1334.753   1550.798 1442.775
    Sim.sd Sim.Median  Sim.MAD Sim.2.5% Sim.97.5%
1 55.09039   1444.558 54.91878 1329.912  1545.241
> ## 4: newdata with errors and prediction.
> DAT2 <- data.frame(x = 4, y = 3, error.x = 0.2, error.y = 0.1)
> PROP5 <- predictNLS(MOD, newdata = DAT2)
Propagating predictor value #1 ...
Error in `rownames<-`(`*tmp*`, value = make.unique(nameVEC)) : 
  attempt to set 'rownames' on an object with no dimensions
Calls: predictNLS -> mixCov -> makeCov -> rownames<-
Execution halted
* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR, 1 WARNING, 2 NOTEs
