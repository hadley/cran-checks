
R Under development (unstable) (2017-08-15 r73096) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "KODAMA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('KODAMA')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("KODAMA")
> ### * KODAMA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KODAMA
> ### Title: Knowledge Discovery by Accuracy Maximization
> ### Aliases: KODAMA
> 
> ### ** Examples
> 
> 
> # data(iris)
> # data=iris[,-5]
> # labels=iris[,5]
> # kk=KODAMA(data)
> # plot(kk$pp,col=as.numeric(labels), xlab="First component", ylab="Second component",cex=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("MetRef")
> ### * MetRef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MetRef
> ### Title: Nuclear Magnetic Resonance Spectra of Urine Samples
> ### Aliases: MetRef
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(MetRef)
> u=MetRef$data;
> u=u[,-which(colSums(u)==0)]
> u=normalization(u)$newXtrain
> u=scaling(u)$newXtrain
> class=as.numeric(as.factor(MetRef$gender))
> cc= prcomp(u)$x
> plot(cc,pch=21,bg=class,xlab="First Component",ylab="Second Component")
> 
> class=as.numeric(as.factor(MetRef$donor))
> plot(cc,pch=21,bg=rainbow(22)[class],xlab="First Component",ylab="Second Component")
> 
> #
> # kk=KODAMA(u)
> # plot(kk$pp,pch=21,bg=rainbow(22)[class],xlab="First Component",ylab="Second Component")
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("USA")
> ### * USA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: USA
> ### Title: State of the Union Data Set
> ### Aliases: USA
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Here is reported the analysis on the State of the Union
> # of USA president as shown in Cacciatore, et al. (2014)
> #
> # data(USA)
> # kk=KODAMA(USA$data)
> # cc=cmdscale(kk$dissimilarity)
> # par(cex=0.5,mar=c(15,6,2,2));
> # plot(USA$year,cc[,1],axes=F,pch=20,xlab="",ylab="First Component");
> # axis(1,at=USA$year,labels=rownames(USA$data),las=2);
> # axis(2,las=2);
> # box()
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("core_cpp")
> ### * core_cpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: core_cpp
> ### Title: Maximization of Cross-Validateed Accuracy Methods
> ### Aliases: core_cpp
> 
> ### ** Examples
> 
> # Here, the famous (Fisher's or Anderson's) iris data set was loaded
> data(iris)
> u=as.matrix(iris[,-5])
> s=sample(1:150,150,TRUE)
> 
> # The maximization of the accuracy of the vector s is performed
> results=core_cpp(u, clbest=s,fpar = 10)
> 
> 
> print(as.numeric(results$clbest))
  [1]  3  3  3 10  3  3 10  3 10  3  3  3 10 10  3  4  3  3  3  3  3  3  3  3  3
 [26]  3  3  3  3  3  3  3  3  3  3  3  3  3 10  3  3 10 10  3  3  3  3 10  3  3
 [51]  9  9  9 22  9 15  9 22  9 22 22 15 22  9 22  9 15 15  9 22  9 15  9  9  9
 [76]  9  9  9  9 22 22 22 15  9 15  9  9  9 15 22 15  9 15 22 15 15 15  9 22 15
[101]  2  9  2  2  2  2 15  2  2  2  2  2  2  9  9  2  2  2  2  9  2  9  2  9  2
[126]  2  9  9  2  2  2  2  2  9  2  2  2  2  9  2  2  2  9  2  2  2  9  2  2  9
> 
> 
> 
> 
> cleanEx()
> nameEx("dinisurface")
> ### * dinisurface
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dinisurface
> ### Title: Ulisse Dini Data Set Generator
> ### Aliases: dinisurface
> ### Keywords: dataset
> 
> ### ** Examples
> 
> require("rgl")
Loading required package: rgl
> x=dinisurface()
> open3d()
Warning in rgl.open(useNULL) : RGL: no suitable visual available

 *** caught segfault ***
address (nil), cause 'memory not mapped'

Traceback:
 1: rgl.open(useNULL)
 2: open3d()
An irrecoverable exception occurred. R is aborting now ...
Segmentation fault (core dumped)
