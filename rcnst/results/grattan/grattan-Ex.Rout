
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "grattan"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('grattan')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("age_grouper")
> ### * age_grouper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: age_grouper
> ### Title: Age grouper
> ### Aliases: age_grouper
> 
> ### ** Examples
> 
> age_grouper(42)
[1] 35-44
Levels: Below\n25 < 25-34 < 35-44 < 45-54 < 55-64 < 65-74 < 75+
> age_grouper(42, interval = 5, min_age = 20, max_age = 60)
[1] 40-44
10 Levels: Below\n20 < 20-24 < 25-29 < 30-34 < 35-39 < 40-44 < ... < 60+
> 
> 
> 
> cleanEx()
> nameEx("aus_pop_qtr_age")
> ### * aus_pop_qtr_age
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aus_pop_qtr_age
> ### Title: Australian estimated resident population by age and date
> ### Aliases: aus_pop_qtr_age
> 
> ### ** Examples
> 
> aus_pop_qtr_age(date = as.Date("2016-01-01"), age = 42)
[1] 325476
> 
> 
> 
> cleanEx()
> nameEx("cpi_inflator")
> ### * cpi_inflator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpi_inflator
> ### Title: CPI inflator
> ### Aliases: cpi_inflator
> 
> ### ** Examples
> 
> cpi_inflator(100, from_fy = "2005-06", to_fy = "2014-15")
[1] 126.2411
> 
> 
> 
> cleanEx()

detaching ‘package:bindrcpp’

> nameEx("differentially_uprate_wage")
> ### * differentially_uprate_wage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: differentially_uprate_wage
> ### Title: Differential uprating
> ### Aliases: differentially_uprate_wage
> 
> ### ** Examples
> 
> ws <- c(20e3, 50e3, 100e3)
> from <- "2013-14"
> to <- "2016-17"
> differentially_uprate_wage(ws, from, to)
[1]  21413.36  52645.19 106417.77
> differentially_uprate_wage(ws, from, to) / wage_inflator(ws, from, to)
[1] 1.0070387 0.9903302 1.0009342
> 
> 
> 
> cleanEx()
> nameEx("inverse_average_rate")
> ### * inverse_average_rate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inverse_average_rate
> ### Title: Inverse average tax rate
> ### Aliases: inverse_average_rate
> 
> ### ** Examples
> 
> inverse_average_rate(0.2, fy.year = "2014-15")
[1] 59082
> 
> 
> 
> cleanEx()
> nameEx("is.fy")
> ### * is.fy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.fy
> ### Title: Convenience functions for dealing with financial years
> ### Aliases: is.fy fy.year yr2fy fy2yr fy2date date2fy
> 
> ### ** Examples
> 
> is.fy("2012-13")
[1] TRUE
> is.fy("2012-14")
[1] FALSE
> yr2fy(2012)
[1] "2011-12"
> fy2yr("2015-16")
[1] 2016
> date2fy("2014-08-09")
[1] "2014-15"
> 
> 
> 
> cleanEx()
> nameEx("lf_inflator")
> ### * lf_inflator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lf_inflator
> ### Title: Labour force inflators
> ### Aliases: lf_inflator lf_inflator_fy lf_inflator
> 
> ### ** Examples
> 
> lf_inflator_fy(labour_force = 1, from_fy = "2012-13", to_fy = "2013-14")
[1] 1.007499
> ## Not run: 
> ##D lf_inflator(labour_force = 1, from_date = "2013-06-30", to_date = "2014-06-30")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("npv")
> ### * npv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: npv
> ### Title: Financial functions
> ### Aliases: npv irr fv pv pmt
> ###   \url{http://cvs.moodle.org/contrib/patches/question_calculated_extended/calculated/packages/financial/financial_class.php?view=co}
> ###   irr fv pv pmt
> 
> ### ** Examples
> 
> npv(0.07, c(1, 2))
[1] 2.681457
> irr(x = c(1, -1), start = 0.1)
[1] 8.659104e-09
> fv(0.04, 7, 1, pv = 0.0, type = 0)
[1] -7.898294
> pv(rate = 0.08, nper = 7, pmt = 1, fv = 0.0, type = 0)
[1] -5.20637
> pmt(rate = 0.025, nper = 7, pv = 0, fv = 0.0, type = 0)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("prohibit_vector_recycling")
> ### * prohibit_vector_recycling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prohibit_vector_recycling
> ### Title: Prohibit vector recycling
> ### Aliases: prohibit_vector_recycling
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Returns nothing because they are of the same length
> ##D prohibit_vector_recycling(c(2, 2), c(2, 2))
> ##D # Returns nothing also, because the only different length is 1
> ##D prohibit_vector_recycling(c(2, 2), 1)
> ##D # Returns an error:
> ##D prohibit_vector_recycling(c(2, 2), 1, c(3, 3, 3))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("project")
> ### * project
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: project
> ### Title: A function for simple projections of tables of Australian
> ###   Taxation Office tax returns.
> ### Aliases: project
> 
> ### ** Examples
> 
> if (requireNamespace("taxstats", quietly = TRUE) && requireNamespace("data.table", quietly = TRUE)){
+   library(taxstats)
+   library(data.table)
+   sample_file <- copy(sample_file_1314)
+   sample_file_1617 <- project(sample_file, h = 3L)  # to "2016-17"
+ }
> 
> 
> 
> cleanEx()

detaching ‘package:data.table’, ‘package:taxstats’

> nameEx("student_repayment")
> ### * student_repayment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: student_repayment
> ### Title: HELP / HECS repayment amounts
> ### Aliases: student_repayment
> 
> ### ** Examples
> 
> student_repayment(50e3, "2013-14", debt = 10e3) 
[1] 0
> # 0 since below the threshold
> 
> student_repayment(60e3, "2013-14", debt = 10e3)
[1] 2700
> # above the threshold
> 
> student_repayment(60e3, "2013-14", debt = 0)
[1] 0
> # above the threshold, but no debt
> 
> 
> 
> cleanEx()
> nameEx("weighted_ntile")
> ### * weighted_ntile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weighted_ntile
> ### Title: Weighted quantiles
> ### Aliases: weighted_ntile
> 
> ### ** Examples
> 
> weighted_ntile(1:10, n = 5)
 [1] 1 1 2 2 3 3 4 4 5 5
> weighted_ntile(1:10, weights = c(rep(4, 5), rep(1, 5)), n = 5)
 [1] 1 1 2 3 4 5 5 5 5 5
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  25.656 0.912 22.984 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
