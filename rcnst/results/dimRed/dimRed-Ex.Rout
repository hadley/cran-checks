
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dimRed"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dimRed')
Loading required package: DRR
Loading required package: kernlab
Loading required package: CVST
Loading required package: Matrix

Attaching package: ‘dimRed’

The following object is masked from ‘package:stats’:

    embed

The following object is masked from ‘package:base’:

    as.data.frame

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DRR-class")
> ### * DRR-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DRR-class
> ### Title: Dimensionality Reduction via Regression
> ### Aliases: DRR-class DRR
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dat <- loadDataSet("variable Noise Helix", n = 200)[sample(200)]
> ##D 
> ##D ## use the S4 Class directly:
> ##D drr <- DRR()
> ##D pars <- drr@stdpars
> ##D pars$ndim <- 3
> ##D emb <- drr@fun(dat, pars)
> ##D 
> ##D ## simpler, use embed():
> ##D emb2 <- embed(dat, "DRR", ndim = 3)
> ##D 
> ##D 
> ##D plot(dat, type = "3vars")
> ##D plot(emb, type = "3vars")
> ##D plot(emb@inverse(emb@data@data[, 1, drop = FALSE]), type = "3vars")
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("DiffusionMaps-class")
> ### * DiffusionMaps-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiffusionMaps-class
> ### Title: Diffusion Maps
> ### Aliases: DiffusionMaps-class DiffusionMaps
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve")
> 
> ## use the S4 Class directly:
> diffmap <- DiffusionMaps()
> emb <- diffmap@fun(dat, diffmap@stdpars)
Performing eigendecomposition
Computing Diffusion Coordinates
Elapsed time: 3.876 seconds
> 
> ## simpler, use embed():
> emb2 <- embed(dat, "DiffusionMaps")
Performing eigendecomposition
Computing Diffusion Coordinates
Elapsed time: 2.833 seconds
> 
> plot(emb, type = "2vars")
> 
> samp <- sample(floor(nrow(dat) / 10))
> embsamp <- diffmap@fun(dat[samp], diffmap@stdpars)
Performing eigendecomposition
Computing Diffusion Coordinates
Elapsed time: 0.29 seconds
> embother <- embsamp@apply(dat[-samp])
> plot(embsamp, type = "2vars")
> points(embother)
> 
> 
> 
> 
> cleanEx()
> nameEx("DrL-class")
> ### * DrL-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DrL-class
> ### Title: Distributed Recursive Graph Layout
> ### Aliases: DrL-class DrL
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dat <- loadDataSet("Swiss Roll", n = 500)
> ##D 
> ##D ## use the S4 Class directly:
> ##D drl <- DrL()
> ##D emb <- drl@fun(dat, drl@stdpars)
> ##D 
> ##D ## simpler, use embed():
> ##D emb2 <- embed(dat, "DrL")
> ##D 
> ##D 
> ##D plot(emb)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("FastICA-class")
> ### * FastICA-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FastICA-class
> ### Title: Independent Component Analysis
> ### Aliases: FastICA-class FastICA
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve")
> 
> ## use the S4 Class directly:
> fastica <- FastICA()
> emb <- fastica@fun(dat, pars = list(ndim = 2))
> 
> ## simpler, use embed():
> emb2 <- embed(dat, "FastICA", ndim = 2)
> 
> 
> plot(emb@data@data)
> 
> 
> 
> 
> cleanEx()
> nameEx("FruchtermanReingold-class")
> ### * FruchtermanReingold-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FruchtermanReingold-class
> ### Title: Fruchterman Reingold Graph Layout
> ### Aliases: FruchtermanReingold-class FruchtermanReingold
> 
> ### ** Examples
> 
> dat <- loadDataSet("Swiss Roll", n = 100)
> 
> ## use the S4 Class directly:
> fruchterman_reingold <- FruchtermanReingold()
> pars <- fruchterman_reingold@stdpars
> pars$knn <- 5
> emb <- fruchterman_reingold@fun(dat, pars)
> 
> ## simpler, use embed():
> emb2 <- embed(dat, "FruchtermanReingold", knn = 5)
> 
> plot(emb, type = "2vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("HLLE-class")
> ### * HLLE-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HLLE-class
> ### Title: Hessian Locally Linear Embedding
> ### Aliases: HLLE-class HLLE
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve", n = 1500)
> 
> ## directy use the S4 class:
> hlle <- HLLE()
> emb <- hlle@fun(dat, hlle@stdpars)
2017-08-15 04:11:34: Finding nearest neighbors
2017-08-15 04:11:34: Calculating Hessian
1/15002/15003/15004/15005/15006/15007/15008/15009/150010/150011/150012/150013/150014/150015/150016/150017/150018/150019/150020/150021/150022/150023/150024/150025/150026/150027/150028/150029/150030/150031/150032/150033/150034/150035/150036/150037/150038/150039/150040/150041/150042/150043/150044/150045/150046/150047/150048/150049/150050/150051/150052/150053/150054/150055/150056/150057/150058/150059/150060/150061/150062/150063/150064/150065/150066/150067/150068/150069/150070/150071/150072/150073/150074/150075/150076/150077/150078/150079/150080/150081/150082/150083/150084/150085/150086/150087/150088/150089/150090/150091/150092/150093/150094/150095/150096/150097/150098/150099/1500100/1500101/1500102/1500103/1500104/1500105/1500106/1500107/1500108/1500109/1500110/1500111/1500112/1500113/1500114/1500115/1500116/1500117/1500118/1500119/1500120/1500121/1500122/1500123/1500124/1500125/1500126/1500127/1500128/1500129/1500130/1500131/1500132/1500133/1500134/1500135/1500136/1500137/1500138/1500139/1500140/1500141/1500142/1500143/1500144/1500145/1500146/1500147/1500148/1500149/1500150/1500151/1500152/1500153/1500154/1500155/1500156/1500157/1500158/1500159/1500160/1500161/1500162/1500163/1500164/1500165/1500166/1500167/1500168/1500169/1500170/1500171/1500172/1500173/1500174/1500175/1500176/1500177/1500178/1500179/1500180/1500181/1500182/1500183/1500184/1500185/1500186/1500187/1500188/1500189/1500190/1500191/1500192/1500193/1500194/1500195/1500196/1500197/1500198/1500199/1500200/1500201/1500202/1500203/1500204/1500205/1500206/1500207/1500208/1500209/1500210/1500211/1500212/1500213/1500214/1500215/1500216/1500217/1500218/1500219/1500220/1500221/1500222/1500223/1500224/1500225/1500226/1500227/1500228/1500229/1500230/1500231/1500232/1500233/1500234/1500235/1500236/1500237/1500238/1500239/1500240/1500241/1500242/1500243/1500244/1500245/1500246/1500247/1500248/1500249/1500250/1500251/1500252/1500253/1500254/1500255/1500256/1500257/1500258/1500259/1500260/1500261/1500262/1500263/1500264/1500265/1500266/1500267/1500268/1500269/1500270/1500271/1500272/1500273/1500274/1500275/1500276/1500277/1500278/1500279/1500280/1500281/1500282/1500283/1500284/1500285/1500286/1500287/1500288/1500289/1500290/1500291/1500292/1500293/1500294/1500295/1500296/1500297/1500298/1500299/1500300/1500301/1500302/1500303/1500304/1500305/1500306/1500307/1500308/1500309/1500310/1500311/1500312/1500313/1500314/1500315/1500316/1500317/1500318/1500319/1500320/1500321/1500322/1500323/1500324/1500325/1500326/1500327/1500328/1500329/1500330/1500331/1500332/1500333/1500334/1500335/1500336/1500337/1500338/1500339/1500340/1500341/1500342/1500343/1500344/1500345/1500346/1500347/1500348/1500349/1500350/1500351/1500352/1500353/1500354/1500355/1500356/1500357/1500358/1500359/1500360/1500361/1500362/1500363/1500364/1500365/1500366/1500367/1500368/1500369/1500370/1500371/1500372/1500373/1500374/1500375/1500376/1500377/1500378/1500379/1500380/1500381/1500382/1500383/1500384/1500385/1500386/1500387/1500388/1500389/1500390/1500391/1500392/1500393/1500394/1500395/1500396/1500397/1500398/1500399/1500400/1500401/1500402/1500403/1500404/1500405/1500406/1500407/1500408/1500409/1500410/1500411/1500412/1500413/1500414/1500415/1500416/1500417/1500418/1500419/1500420/1500421/1500422/1500423/1500424/1500425/1500426/1500427/1500428/1500429/1500430/1500431/1500432/1500433/1500434/1500435/1500436/1500437/1500438/1500439/1500440/1500441/1500442/1500443/1500444/1500445/1500446/1500447/1500448/1500449/1500450/1500451/1500452/1500453/1500454/1500455/1500456/1500457/1500458/1500459/1500460/1500461/1500462/1500463/1500464/1500465/1500466/1500467/1500468/1500469/1500470/1500471/1500472/1500473/1500474/1500475/1500476/1500477/1500478/1500479/1500480/1500481/1500482/1500483/1500484/1500485/1500486/1500487/1500488/1500489/1500490/1500491/1500492/1500493/1500494/1500495/1500496/1500497/1500498/1500499/1500500/1500501/1500502/1500503/1500504/1500505/1500506/1500507/1500508/1500509/1500510/1500511/1500512/1500513/1500514/1500515/1500516/1500517/1500518/1500519/1500520/1500521/1500522/1500523/1500524/1500525/1500526/1500527/1500528/1500529/1500530/1500531/1500532/1500533/1500534/1500535/1500536/1500537/1500538/1500539/1500540/1500541/1500542/1500543/1500544/1500545/1500546/1500547/1500548/1500549/1500550/1500551/1500552/1500553/1500554/1500555/1500556/1500557/1500558/1500559/1500560/1500561/1500562/1500563/1500564/1500565/1500566/1500567/1500568/1500569/1500570/1500571/1500572/1500573/1500574/1500575/1500576/1500577/1500578/1500579/1500580/1500581/1500582/1500583/1500584/1500585/1500586/1500587/1500588/1500589/1500590/1500591/1500592/1500593/1500594/1500595/1500596/1500597/1500598/1500599/1500600/1500601/1500602/1500603/1500604/1500605/1500606/1500607/1500608/1500609/1500610/1500611/1500612/1500613/1500614/1500615/1500616/1500617/1500618/1500619/1500620/1500621/1500622/1500623/1500624/1500625/1500626/1500627/1500628/1500629/1500630/1500631/1500632/1500633/1500634/1500635/1500636/1500637/1500638/1500639/1500640/1500641/1500642/1500643/1500644/1500645/1500646/1500647/1500648/1500649/1500650/1500651/1500652/1500653/1500654/1500655/1500656/1500657/1500658/1500659/1500660/1500661/1500662/1500663/1500664/1500665/1500666/1500667/1500668/1500669/1500670/1500671/1500672/1500673/1500674/1500675/1500676/1500677/1500678/1500679/1500680/1500681/1500682/1500683/1500684/1500685/1500686/1500687/1500688/1500689/1500690/1500691/1500692/1500693/1500694/1500695/1500696/1500697/1500698/1500699/1500700/1500701/1500702/1500703/1500704/1500705/1500706/1500707/1500708/1500709/1500710/1500711/1500712/1500713/1500714/1500715/1500716/1500717/1500718/1500719/1500720/1500721/1500722/1500723/1500724/1500725/1500726/1500727/1500728/1500729/1500730/1500731/1500732/1500733/1500734/1500735/1500736/1500737/1500738/1500739/1500740/1500741/1500742/1500743/1500744/1500745/1500746/1500747/1500748/1500749/1500750/1500751/1500752/1500753/1500754/1500755/1500756/1500757/1500758/1500759/1500760/1500761/1500762/1500763/1500764/1500765/1500766/1500767/1500768/1500769/1500770/1500771/1500772/1500773/1500774/1500775/1500776/1500777/1500778/1500779/1500780/1500781/1500782/1500783/1500784/1500785/1500786/1500787/1500788/1500789/1500790/1500791/1500792/1500793/1500794/1500795/1500796/1500797/1500798/1500799/1500800/1500801/1500802/1500803/1500804/1500805/1500806/1500807/1500808/1500809/1500810/1500811/1500812/1500813/1500814/1500815/1500816/1500817/1500818/1500819/1500820/1500821/1500822/1500823/1500824/1500825/1500826/1500827/1500828/1500829/1500830/1500831/1500832/1500833/1500834/1500835/1500836/1500837/1500838/1500839/1500840/1500841/1500842/1500843/1500844/1500845/1500846/1500847/1500848/1500849/1500850/1500851/1500852/1500853/1500854/1500855/1500856/1500857/1500858/1500859/1500860/1500861/1500862/1500863/1500864/1500865/1500866/1500867/1500868/1500869/1500870/1500871/1500872/1500873/1500874/1500875/1500876/1500877/1500878/1500879/1500880/1500881/1500882/1500883/1500884/1500885/1500886/1500887/1500888/1500889/1500890/1500891/1500892/1500893/1500894/1500895/1500896/1500897/1500898/1500899/1500900/1500901/1500902/1500903/1500904/1500905/1500906/1500907/1500908/1500909/1500910/1500911/1500912/1500913/1500914/1500915/1500916/1500917/1500918/1500919/1500920/1500921/1500922/1500923/1500924/1500925/1500926/1500927/1500928/1500929/1500930/1500931/1500932/1500933/1500934/1500935/1500936/1500937/1500938/1500939/1500940/1500941/1500942/1500943/1500944/1500945/1500946/1500947/1500948/1500949/1500950/1500951/1500952/1500953/1500954/1500955/1500956/1500957/1500958/1500959/1500960/1500961/1500962/1500963/1500964/1500965/1500966/1500967/1500968/1500969/1500970/1500971/1500972/1500973/1500974/1500975/1500976/1500977/1500978/1500979/1500980/1500981/1500982/1500983/1500984/1500985/1500986/1500987/1500988/1500989/1500990/1500991/1500992/1500993/1500994/1500995/1500996/1500997/1500998/1500999/15001000/15001001/15001002/15001003/15001004/15001005/15001006/15001007/15001008/15001009/15001010/15001011/15001012/15001013/15001014/15001015/15001016/15001017/15001018/15001019/15001020/15001021/15001022/15001023/15001024/15001025/15001026/15001027/15001028/15001029/15001030/15001031/15001032/15001033/15001034/15001035/15001036/15001037/15001038/15001039/15001040/15001041/15001042/15001043/15001044/15001045/15001046/15001047/15001048/15001049/15001050/15001051/15001052/15001053/15001054/15001055/15001056/15001057/15001058/15001059/15001060/15001061/15001062/15001063/15001064/15001065/15001066/15001067/15001068/15001069/15001070/15001071/15001072/15001073/15001074/15001075/15001076/15001077/15001078/15001079/15001080/15001081/15001082/15001083/15001084/15001085/15001086/15001087/15001088/15001089/15001090/15001091/15001092/15001093/15001094/15001095/15001096/15001097/15001098/15001099/15001100/15001101/15001102/15001103/15001104/15001105/15001106/15001107/15001108/15001109/15001110/15001111/15001112/15001113/15001114/15001115/15001116/15001117/15001118/15001119/15001120/15001121/15001122/15001123/15001124/15001125/15001126/15001127/15001128/15001129/15001130/15001131/15001132/15001133/15001134/15001135/15001136/15001137/15001138/15001139/15001140/15001141/15001142/15001143/15001144/15001145/15001146/15001147/15001148/15001149/15001150/15001151/15001152/15001153/15001154/15001155/15001156/15001157/15001158/15001159/15001160/15001161/15001162/15001163/15001164/15001165/15001166/15001167/15001168/15001169/15001170/15001171/15001172/15001173/15001174/15001175/15001176/15001177/15001178/15001179/15001180/15001181/15001182/15001183/15001184/15001185/15001186/15001187/15001188/15001189/15001190/15001191/15001192/15001193/15001194/15001195/15001196/15001197/15001198/15001199/15001200/15001201/15001202/15001203/15001204/15001205/15001206/15001207/15001208/15001209/15001210/15001211/15001212/15001213/15001214/15001215/15001216/15001217/15001218/15001219/15001220/15001221/15001222/15001223/15001224/15001225/15001226/15001227/15001228/15001229/15001230/15001231/15001232/15001233/15001234/15001235/15001236/15001237/15001238/15001239/15001240/15001241/15001242/15001243/15001244/15001245/15001246/15001247/15001248/15001249/15001250/15001251/15001252/15001253/15001254/15001255/15001256/15001257/15001258/15001259/15001260/15001261/15001262/15001263/15001264/15001265/15001266/15001267/15001268/15001269/15001270/15001271/15001272/15001273/15001274/15001275/15001276/15001277/15001278/15001279/15001280/15001281/15001282/15001283/15001284/15001285/15001286/15001287/15001288/15001289/15001290/15001291/15001292/15001293/15001294/15001295/15001296/15001297/15001298/15001299/15001300/15001301/15001302/15001303/15001304/15001305/15001306/15001307/15001308/15001309/15001310/15001311/15001312/15001313/15001314/15001315/15001316/15001317/15001318/15001319/15001320/15001321/15001322/15001323/15001324/15001325/15001326/15001327/15001328/15001329/15001330/15001331/15001332/15001333/15001334/15001335/15001336/15001337/15001338/15001339/15001340/15001341/15001342/15001343/15001344/15001345/15001346/15001347/15001348/15001349/15001350/15001351/15001352/15001353/15001354/15001355/15001356/15001357/15001358/15001359/15001360/15001361/15001362/15001363/15001364/15001365/15001366/15001367/15001368/15001369/15001370/15001371/15001372/15001373/15001374/15001375/15001376/15001377/15001378/15001379/15001380/15001381/15001382/15001383/15001384/15001385/15001386/15001387/15001388/15001389/15001390/15001391/15001392/15001393/15001394/15001395/15001396/15001397/15001398/15001399/15001400/15001401/15001402/15001403/15001404/15001405/15001406/15001407/15001408/15001409/15001410/15001411/15001412/15001413/15001414/15001415/15001416/15001417/15001418/15001419/15001420/15001421/15001422/15001423/15001424/15001425/15001426/15001427/15001428/15001429/15001430/15001431/15001432/15001433/15001434/15001435/15001436/15001437/15001438/15001439/15001440/15001441/15001442/15001443/15001444/15001445/15001446/15001447/15001448/15001449/15001450/15001451/15001452/15001453/15001454/15001455/15001456/15001457/15001458/15001459/15001460/15001461/15001462/15001463/15001464/15001465/15001466/15001467/15001468/15001469/15001470/15001471/15001472/15001473/15001474/15001475/15001476/15001477/15001478/15001479/15001480/15001481/15001482/15001483/15001484/15001485/15001486/15001487/15001488/15001489/15001490/15001491/15001492/15001493/15001494/15001495/15001496/15001497/15001498/15001499/15001500/15002017-08-15 04:11:35: Embedding
Eigenvalues:  2.340447e-04  3.137075e-05 -6.865710e-17
2017-08-15 04:11:36: DONE
> 
> ## using embed():
> emb2 <- embed(dat, "HLLE", knn = 45)
2017-08-15 04:11:36: Finding nearest neighbors
2017-08-15 04:11:36: Calculating Hessian
1/15002/15003/15004/15005/15006/15007/15008/15009/150010/150011/150012/150013/150014/150015/150016/150017/150018/150019/150020/150021/150022/150023/150024/150025/150026/150027/150028/150029/150030/150031/150032/150033/150034/150035/150036/150037/150038/150039/150040/150041/150042/150043/150044/150045/150046/150047/150048/150049/150050/150051/150052/150053/150054/150055/150056/150057/150058/150059/150060/150061/150062/150063/150064/150065/150066/150067/150068/150069/150070/150071/150072/150073/150074/150075/150076/150077/150078/150079/150080/150081/150082/150083/150084/150085/150086/150087/150088/150089/150090/150091/150092/150093/150094/150095/150096/150097/150098/150099/1500100/1500101/1500102/1500103/1500104/1500105/1500106/1500107/1500108/1500109/1500110/1500111/1500112/1500113/1500114/1500115/1500116/1500117/1500118/1500119/1500120/1500121/1500122/1500123/1500124/1500125/1500126/1500127/1500128/1500129/1500130/1500131/1500132/1500133/1500134/1500135/1500136/1500137/1500138/1500139/1500140/1500141/1500142/1500143/1500144/1500145/1500146/1500147/1500148/1500149/1500150/1500151/1500152/1500153/1500154/1500155/1500156/1500157/1500158/1500159/1500160/1500161/1500162/1500163/1500164/1500165/1500166/1500167/1500168/1500169/1500170/1500171/1500172/1500173/1500174/1500175/1500176/1500177/1500178/1500179/1500180/1500181/1500182/1500183/1500184/1500185/1500186/1500187/1500188/1500189/1500190/1500191/1500192/1500193/1500194/1500195/1500196/1500197/1500198/1500199/1500200/1500201/1500202/1500203/1500204/1500205/1500206/1500207/1500208/1500209/1500210/1500211/1500212/1500213/1500214/1500215/1500216/1500217/1500218/1500219/1500220/1500221/1500222/1500223/1500224/1500225/1500226/1500227/1500228/1500229/1500230/1500231/1500232/1500233/1500234/1500235/1500236/1500237/1500238/1500239/1500240/1500241/1500242/1500243/1500244/1500245/1500246/1500247/1500248/1500249/1500250/1500251/1500252/1500253/1500254/1500255/1500256/1500257/1500258/1500259/1500260/1500261/1500262/1500263/1500264/1500265/1500266/1500267/1500268/1500269/1500270/1500271/1500272/1500273/1500274/1500275/1500276/1500277/1500278/1500279/1500280/1500281/1500282/1500283/1500284/1500285/1500286/1500287/1500288/1500289/1500290/1500291/1500292/1500293/1500294/1500295/1500296/1500297/1500298/1500299/1500300/1500301/1500302/1500303/1500304/1500305/1500306/1500307/1500308/1500309/1500310/1500311/1500312/1500313/1500314/1500315/1500316/1500317/1500318/1500319/1500320/1500321/1500322/1500323/1500324/1500325/1500326/1500327/1500328/1500329/1500330/1500331/1500332/1500333/1500334/1500335/1500336/1500337/1500338/1500339/1500340/1500341/1500342/1500343/1500344/1500345/1500346/1500347/1500348/1500349/1500350/1500351/1500352/1500353/1500354/1500355/1500356/1500357/1500358/1500359/1500360/1500361/1500362/1500363/1500364/1500365/1500366/1500367/1500368/1500369/1500370/1500371/1500372/1500373/1500374/1500375/1500376/1500377/1500378/1500379/1500380/1500381/1500382/1500383/1500384/1500385/1500386/1500387/1500388/1500389/1500390/1500391/1500392/1500393/1500394/1500395/1500396/1500397/1500398/1500399/1500400/1500401/1500402/1500403/1500404/1500405/1500406/1500407/1500408/1500409/1500410/1500411/1500412/1500413/1500414/1500415/1500416/1500417/1500418/1500419/1500420/1500421/1500422/1500423/1500424/1500425/1500426/1500427/1500428/1500429/1500430/1500431/1500432/1500433/1500434/1500435/1500436/1500437/1500438/1500439/1500440/1500441/1500442/1500443/1500444/1500445/1500446/1500447/1500448/1500449/1500450/1500451/1500452/1500453/1500454/1500455/1500456/1500457/1500458/1500459/1500460/1500461/1500462/1500463/1500464/1500465/1500466/1500467/1500468/1500469/1500470/1500471/1500472/1500473/1500474/1500475/1500476/1500477/1500478/1500479/1500480/1500481/1500482/1500483/1500484/1500485/1500486/1500487/1500488/1500489/1500490/1500491/1500492/1500493/1500494/1500495/1500496/1500497/1500498/1500499/1500500/1500501/1500502/1500503/1500504/1500505/1500506/1500507/1500508/1500509/1500510/1500511/1500512/1500513/1500514/1500515/1500516/1500517/1500518/1500519/1500520/1500521/1500522/1500523/1500524/1500525/1500526/1500527/1500528/1500529/1500530/1500531/1500532/1500533/1500534/1500535/1500536/1500537/1500538/1500539/1500540/1500541/1500542/1500543/1500544/1500545/1500546/1500547/1500548/1500549/1500550/1500551/1500552/1500553/1500554/1500555/1500556/1500557/1500558/1500559/1500560/1500561/1500562/1500563/1500564/1500565/1500566/1500567/1500568/1500569/1500570/1500571/1500572/1500573/1500574/1500575/1500576/1500577/1500578/1500579/1500580/1500581/1500582/1500583/1500584/1500585/1500586/1500587/1500588/1500589/1500590/1500591/1500592/1500593/1500594/1500595/1500596/1500597/1500598/1500599/1500600/1500601/1500602/1500603/1500604/1500605/1500606/1500607/1500608/1500609/1500610/1500611/1500612/1500613/1500614/1500615/1500616/1500617/1500618/1500619/1500620/1500621/1500622/1500623/1500624/1500625/1500626/1500627/1500628/1500629/1500630/1500631/1500632/1500633/1500634/1500635/1500636/1500637/1500638/1500639/1500640/1500641/1500642/1500643/1500644/1500645/1500646/1500647/1500648/1500649/1500650/1500651/1500652/1500653/1500654/1500655/1500656/1500657/1500658/1500659/1500660/1500661/1500662/1500663/1500664/1500665/1500666/1500667/1500668/1500669/1500670/1500671/1500672/1500673/1500674/1500675/1500676/1500677/1500678/1500679/1500680/1500681/1500682/1500683/1500684/1500685/1500686/1500687/1500688/1500689/1500690/1500691/1500692/1500693/1500694/1500695/1500696/1500697/1500698/1500699/1500700/1500701/1500702/1500703/1500704/1500705/1500706/1500707/1500708/1500709/1500710/1500711/1500712/1500713/1500714/1500715/1500716/1500717/1500718/1500719/1500720/1500721/1500722/1500723/1500724/1500725/1500726/1500727/1500728/1500729/1500730/1500731/1500732/1500733/1500734/1500735/1500736/1500737/1500738/1500739/1500740/1500741/1500742/1500743/1500744/1500745/1500746/1500747/1500748/1500749/1500750/1500751/1500752/1500753/1500754/1500755/1500756/1500757/1500758/1500759/1500760/1500761/1500762/1500763/1500764/1500765/1500766/1500767/1500768/1500769/1500770/1500771/1500772/1500773/1500774/1500775/1500776/1500777/1500778/1500779/1500780/1500781/1500782/1500783/1500784/1500785/1500786/1500787/1500788/1500789/1500790/1500791/1500792/1500793/1500794/1500795/1500796/1500797/1500798/1500799/1500800/1500801/1500802/1500803/1500804/1500805/1500806/1500807/1500808/1500809/1500810/1500811/1500812/1500813/1500814/1500815/1500816/1500817/1500818/1500819/1500820/1500821/1500822/1500823/1500824/1500825/1500826/1500827/1500828/1500829/1500830/1500831/1500832/1500833/1500834/1500835/1500836/1500837/1500838/1500839/1500840/1500841/1500842/1500843/1500844/1500845/1500846/1500847/1500848/1500849/1500850/1500851/1500852/1500853/1500854/1500855/1500856/1500857/1500858/1500859/1500860/1500861/1500862/1500863/1500864/1500865/1500866/1500867/1500868/1500869/1500870/1500871/1500872/1500873/1500874/1500875/1500876/1500877/1500878/1500879/1500880/1500881/1500882/1500883/1500884/1500885/1500886/1500887/1500888/1500889/1500890/1500891/1500892/1500893/1500894/1500895/1500896/1500897/1500898/1500899/1500900/1500901/1500902/1500903/1500904/1500905/1500906/1500907/1500908/1500909/1500910/1500911/1500912/1500913/1500914/1500915/1500916/1500917/1500918/1500919/1500920/1500921/1500922/1500923/1500924/1500925/1500926/1500927/1500928/1500929/1500930/1500931/1500932/1500933/1500934/1500935/1500936/1500937/1500938/1500939/1500940/1500941/1500942/1500943/1500944/1500945/1500946/1500947/1500948/1500949/1500950/1500951/1500952/1500953/1500954/1500955/1500956/1500957/1500958/1500959/1500960/1500961/1500962/1500963/1500964/1500965/1500966/1500967/1500968/1500969/1500970/1500971/1500972/1500973/1500974/1500975/1500976/1500977/1500978/1500979/1500980/1500981/1500982/1500983/1500984/1500985/1500986/1500987/1500988/1500989/1500990/1500991/1500992/1500993/1500994/1500995/1500996/1500997/1500998/1500999/15001000/15001001/15001002/15001003/15001004/15001005/15001006/15001007/15001008/15001009/15001010/15001011/15001012/15001013/15001014/15001015/15001016/15001017/15001018/15001019/15001020/15001021/15001022/15001023/15001024/15001025/15001026/15001027/15001028/15001029/15001030/15001031/15001032/15001033/15001034/15001035/15001036/15001037/15001038/15001039/15001040/15001041/15001042/15001043/15001044/15001045/15001046/15001047/15001048/15001049/15001050/15001051/15001052/15001053/15001054/15001055/15001056/15001057/15001058/15001059/15001060/15001061/15001062/15001063/15001064/15001065/15001066/15001067/15001068/15001069/15001070/15001071/15001072/15001073/15001074/15001075/15001076/15001077/15001078/15001079/15001080/15001081/15001082/15001083/15001084/15001085/15001086/15001087/15001088/15001089/15001090/15001091/15001092/15001093/15001094/15001095/15001096/15001097/15001098/15001099/15001100/15001101/15001102/15001103/15001104/15001105/15001106/15001107/15001108/15001109/15001110/15001111/15001112/15001113/15001114/15001115/15001116/15001117/15001118/15001119/15001120/15001121/15001122/15001123/15001124/15001125/15001126/15001127/15001128/15001129/15001130/15001131/15001132/15001133/15001134/15001135/15001136/15001137/15001138/15001139/15001140/15001141/15001142/15001143/15001144/15001145/15001146/15001147/15001148/15001149/15001150/15001151/15001152/15001153/15001154/15001155/15001156/15001157/15001158/15001159/15001160/15001161/15001162/15001163/15001164/15001165/15001166/15001167/15001168/15001169/15001170/15001171/15001172/15001173/15001174/15001175/15001176/15001177/15001178/15001179/15001180/15001181/15001182/15001183/15001184/15001185/15001186/15001187/15001188/15001189/15001190/15001191/15001192/15001193/15001194/15001195/15001196/15001197/15001198/15001199/15001200/15001201/15001202/15001203/15001204/15001205/15001206/15001207/15001208/15001209/15001210/15001211/15001212/15001213/15001214/15001215/15001216/15001217/15001218/15001219/15001220/15001221/15001222/15001223/15001224/15001225/15001226/15001227/15001228/15001229/15001230/15001231/15001232/15001233/15001234/15001235/15001236/15001237/15001238/15001239/15001240/15001241/15001242/15001243/15001244/15001245/15001246/15001247/15001248/15001249/15001250/15001251/15001252/15001253/15001254/15001255/15001256/15001257/15001258/15001259/15001260/15001261/15001262/15001263/15001264/15001265/15001266/15001267/15001268/15001269/15001270/15001271/15001272/15001273/15001274/15001275/15001276/15001277/15001278/15001279/15001280/15001281/15001282/15001283/15001284/15001285/15001286/15001287/15001288/15001289/15001290/15001291/15001292/15001293/15001294/15001295/15001296/15001297/15001298/15001299/15001300/15001301/15001302/15001303/15001304/15001305/15001306/15001307/15001308/15001309/15001310/15001311/15001312/15001313/15001314/15001315/15001316/15001317/15001318/15001319/15001320/15001321/15001322/15001323/15001324/15001325/15001326/15001327/15001328/15001329/15001330/15001331/15001332/15001333/15001334/15001335/15001336/15001337/15001338/15001339/15001340/15001341/15001342/15001343/15001344/15001345/15001346/15001347/15001348/15001349/15001350/15001351/15001352/15001353/15001354/15001355/15001356/15001357/15001358/15001359/15001360/15001361/15001362/15001363/15001364/15001365/15001366/15001367/15001368/15001369/15001370/15001371/15001372/15001373/15001374/15001375/15001376/15001377/15001378/15001379/15001380/15001381/15001382/15001383/15001384/15001385/15001386/15001387/15001388/15001389/15001390/15001391/15001392/15001393/15001394/15001395/15001396/15001397/15001398/15001399/15001400/15001401/15001402/15001403/15001404/15001405/15001406/15001407/15001408/15001409/15001410/15001411/15001412/15001413/15001414/15001415/15001416/15001417/15001418/15001419/15001420/15001421/15001422/15001423/15001424/15001425/15001426/15001427/15001428/15001429/15001430/15001431/15001432/15001433/15001434/15001435/15001436/15001437/15001438/15001439/15001440/15001441/15001442/15001443/15001444/15001445/15001446/15001447/15001448/15001449/15001450/15001451/15001452/15001453/15001454/15001455/15001456/15001457/15001458/15001459/15001460/15001461/15001462/15001463/15001464/15001465/15001466/15001467/15001468/15001469/15001470/15001471/15001472/15001473/15001474/15001475/15001476/15001477/15001478/15001479/15001480/15001481/15001482/15001483/15001484/15001485/15001486/15001487/15001488/15001489/15001490/15001491/15001492/15001493/15001494/15001495/15001496/15001497/15001498/15001499/15001500/15002017-08-15 04:11:37: Embedding
Eigenvalues: 1.968833e-04 2.693982e-05 1.070294e-16
2017-08-15 04:11:37: DONE
> 
> plot(emb, type = "2vars")
> plot(emb2, type = "2vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("Isomap-class")
> ### * Isomap-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Isomap-class
> ### Title: Isomap embedding
> ### Aliases: Isomap-class Isomap
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve", n = 500)
> 
> ## use the S4 Class directly:
> isomap <- Isomap()
> emb <- isomap@fun(dat, isomap@stdpars)
2017-08-15 04:11:37: Isomap START
2017-08-15 04:11:37: constructing knn graph
2017-08-15 04:11:37: calculating geodesic distances
2017-08-15 04:11:37: cmdscale
2017-08-15 04:11:38: post processing
> 
> ## or simpler, use embed():
> samp <- sample(nrow(dat), size = 200)
> emb2 <- embed(dat[samp], "Isomap", mute = NULL, knn = 10)
Warning in matchPars(methodObject, list(...)) :
  Parameter matching: mute is not a standard parameter, ignoring.
2017-08-15 04:11:38: Isomap START
2017-08-15 04:11:38: constructing knn graph
2017-08-15 04:11:38: calculating geodesic distances
2017-08-15 04:11:38: cmdscale
2017-08-15 04:11:38: post processing
> emb3 <- emb2@apply(dat[-samp])
2017-08-15 04:11:38: L-Isomap embed START
2017-08-15 04:11:38: constructing knn graph
2017-08-15 04:11:38: calculating geodesic distances
2017-08-15 04:11:38: embedding
2017-08-15 04:11:38: DONE
> 
> plot(emb2, type = "2vars")
> plot(emb3, type = "2vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("KamadaKawai-class")
> ### * KamadaKawai-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KamadaKawai-class
> ### Title: Graph Embedding via the Kamada Kawai Algorithm
> ### Aliases: KamadaKawai-class KamadaKawai
> 
> ### ** Examples
> 
> dat <- loadDataSet("Swiss Roll", n = 500)
> kamada_kawai <- KamadaKawai()
> kk <- kamada_kawai@fun(dat, kamada_kawai@stdpars)
> 
> plot(kk@data@data)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("LLE-class")
> ### * LLE-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LLE-class
> ### Title: Locally Linear Embedding
> ### Aliases: LLE-class LLE
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve", n = 500)
> 
> ## directy use the S4 class:
> lle <- LLE()
> emb <- lle@fun(dat, lle@stdpars)
finding neighbours
calculating weights
computing coordinates
> 
> ## using embed():
> emb2 <- embed(dat, "LLE", knn = 45)
finding neighbours
calculating weights
computing coordinates
> 
> plot(emb, type = "2vars")
> plot(emb2, type = "2vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("LaplacianEigenmaps-class")
> ### * LaplacianEigenmaps-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LaplacianEigenmaps-class
> ### Title: Laplacian Eigenmaps
> ### Aliases: LaplacianEigenmaps-class LaplacianEigenmaps
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve")
> leim <- LaplacianEigenmaps()
> emb <- leim@fun(dat, leim@stdpars)
2017-08-15 04:11:44: Creating weight matrix
2017-08-15 04:11:44: Eigenvalue decomposition
Eigenvalues: 1.286758e-02 3.227821e-03 4.121324e-17
2017-08-15 04:11:44: DONE
> 
> 
> plot(emb@data@data)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("MDS-class")
> ### * MDS-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MDS-class
> ### Title: Metric Dimensional Scaling
> ### Aliases: MDS-class MDS
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dat <- loadDataSet("3D S Curve")
> ##D 
> ##D ## Use the S4 Class directly:
> ##D mds <- MDS()
> ##D emb <- mds@fun(dat, mds@stdpars)
> ##D 
> ##D ## use embed():
> ##D emb2 <- embed(dat, "MDS", d = function(x) exp(stats::dist(x)))
> ##D 
> ##D 
> ##D plot(emb, type = "2vars")
> ##D plot(emb2, type = "2vars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("PCA-class")
> ### * PCA-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PCA-class
> ### Title: Principal Component Analysis
> ### Aliases: PCA-class PCA
> 
> ### ** Examples
> 
> dat <- loadDataSet("Iris")
> 
> ## using the S4 Class
> pca <- PCA()
> emb <- pca@fun(dat, pca@stdpars)
> 
> ## using embed()
> emb2 <- embed(dat, "PCA")
> 
> plot(emb, type = "2vars")
> plot(emb@inverse(emb@data), type = "3vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("dataSets")
> ### * dataSets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataSets
> ### Title: Example Data Sets for dimensionality reduction
> ### Aliases: dataSets loadDataSet dataSetList
> 
> ### ** Examples
> 
> ## a list of available data sets:
> dataSetList()
 [1] "Swiss Roll"           "Broken Swiss Roll"    "Helix"               
 [4] "Twin Peaks"           "Sphere"               "Ball"                
 [7] "FishBowl"             "3D S Curve"           "variable Noise Helix"
[10] "Iris"                 "Cube"                
> 
> ## Load a data set:
> swissRoll <- loadDataSet("Swiss Roll")
> 
> ## Load Iris data set, partial matching:
> loadDataSet("I")
An object of class "dimRedData"
Slot "data":
       Sepal.Length Sepal.Width Petal.Length Petal.Width
  [1,]          5.1         3.5          1.4         0.2
  [2,]          4.9         3.0          1.4         0.2
  [3,]          4.7         3.2          1.3         0.2
  [4,]          4.6         3.1          1.5         0.2
  [5,]          5.0         3.6          1.4         0.2
  [6,]          5.4         3.9          1.7         0.4
  [7,]          4.6         3.4          1.4         0.3
  [8,]          5.0         3.4          1.5         0.2
  [9,]          4.4         2.9          1.4         0.2
 [10,]          4.9         3.1          1.5         0.1
 [11,]          5.4         3.7          1.5         0.2
 [12,]          4.8         3.4          1.6         0.2
 [13,]          4.8         3.0          1.4         0.1
 [14,]          4.3         3.0          1.1         0.1
 [15,]          5.8         4.0          1.2         0.2
 [16,]          5.7         4.4          1.5         0.4
 [17,]          5.4         3.9          1.3         0.4
 [18,]          5.1         3.5          1.4         0.3
 [19,]          5.7         3.8          1.7         0.3
 [20,]          5.1         3.8          1.5         0.3
 [21,]          5.4         3.4          1.7         0.2
 [22,]          5.1         3.7          1.5         0.4
 [23,]          4.6         3.6          1.0         0.2
 [24,]          5.1         3.3          1.7         0.5
 [25,]          4.8         3.4          1.9         0.2
 [26,]          5.0         3.0          1.6         0.2
 [27,]          5.0         3.4          1.6         0.4
 [28,]          5.2         3.5          1.5         0.2
 [29,]          5.2         3.4          1.4         0.2
 [30,]          4.7         3.2          1.6         0.2
 [31,]          4.8         3.1          1.6         0.2
 [32,]          5.4         3.4          1.5         0.4
 [33,]          5.2         4.1          1.5         0.1
 [34,]          5.5         4.2          1.4         0.2
 [35,]          4.9         3.1          1.5         0.2
 [36,]          5.0         3.2          1.2         0.2
 [37,]          5.5         3.5          1.3         0.2
 [38,]          4.9         3.6          1.4         0.1
 [39,]          4.4         3.0          1.3         0.2
 [40,]          5.1         3.4          1.5         0.2
 [41,]          5.0         3.5          1.3         0.3
 [42,]          4.5         2.3          1.3         0.3
 [43,]          4.4         3.2          1.3         0.2
 [44,]          5.0         3.5          1.6         0.6
 [45,]          5.1         3.8          1.9         0.4
 [46,]          4.8         3.0          1.4         0.3
 [47,]          5.1         3.8          1.6         0.2
 [48,]          4.6         3.2          1.4         0.2
 [49,]          5.3         3.7          1.5         0.2
 [50,]          5.0         3.3          1.4         0.2
 [51,]          7.0         3.2          4.7         1.4
 [52,]          6.4         3.2          4.5         1.5
 [53,]          6.9         3.1          4.9         1.5
 [54,]          5.5         2.3          4.0         1.3
 [55,]          6.5         2.8          4.6         1.5
 [56,]          5.7         2.8          4.5         1.3
 [57,]          6.3         3.3          4.7         1.6
 [58,]          4.9         2.4          3.3         1.0
 [59,]          6.6         2.9          4.6         1.3
 [60,]          5.2         2.7          3.9         1.4
 [61,]          5.0         2.0          3.5         1.0
 [62,]          5.9         3.0          4.2         1.5
 [63,]          6.0         2.2          4.0         1.0
 [64,]          6.1         2.9          4.7         1.4
 [65,]          5.6         2.9          3.6         1.3
 [66,]          6.7         3.1          4.4         1.4
 [67,]          5.6         3.0          4.5         1.5
 [68,]          5.8         2.7          4.1         1.0
 [69,]          6.2         2.2          4.5         1.5
 [70,]          5.6         2.5          3.9         1.1
 [71,]          5.9         3.2          4.8         1.8
 [72,]          6.1         2.8          4.0         1.3
 [73,]          6.3         2.5          4.9         1.5
 [74,]          6.1         2.8          4.7         1.2
 [75,]          6.4         2.9          4.3         1.3
 [76,]          6.6         3.0          4.4         1.4
 [77,]          6.8         2.8          4.8         1.4
 [78,]          6.7         3.0          5.0         1.7
 [79,]          6.0         2.9          4.5         1.5
 [80,]          5.7         2.6          3.5         1.0
 [81,]          5.5         2.4          3.8         1.1
 [82,]          5.5         2.4          3.7         1.0
 [83,]          5.8         2.7          3.9         1.2
 [84,]          6.0         2.7          5.1         1.6
 [85,]          5.4         3.0          4.5         1.5
 [86,]          6.0         3.4          4.5         1.6
 [87,]          6.7         3.1          4.7         1.5
 [88,]          6.3         2.3          4.4         1.3
 [89,]          5.6         3.0          4.1         1.3
 [90,]          5.5         2.5          4.0         1.3
 [91,]          5.5         2.6          4.4         1.2
 [92,]          6.1         3.0          4.6         1.4
 [93,]          5.8         2.6          4.0         1.2
 [94,]          5.0         2.3          3.3         1.0
 [95,]          5.6         2.7          4.2         1.3
 [96,]          5.7         3.0          4.2         1.2
 [97,]          5.7         2.9          4.2         1.3
 [98,]          6.2         2.9          4.3         1.3
 [99,]          5.1         2.5          3.0         1.1
[100,]          5.7         2.8          4.1         1.3
[101,]          6.3         3.3          6.0         2.5
[102,]          5.8         2.7          5.1         1.9
[103,]          7.1         3.0          5.9         2.1
[104,]          6.3         2.9          5.6         1.8
[105,]          6.5         3.0          5.8         2.2
[106,]          7.6         3.0          6.6         2.1
[107,]          4.9         2.5          4.5         1.7
[108,]          7.3         2.9          6.3         1.8
[109,]          6.7         2.5          5.8         1.8
[110,]          7.2         3.6          6.1         2.5
[111,]          6.5         3.2          5.1         2.0
[112,]          6.4         2.7          5.3         1.9
[113,]          6.8         3.0          5.5         2.1
[114,]          5.7         2.5          5.0         2.0
[115,]          5.8         2.8          5.1         2.4
[116,]          6.4         3.2          5.3         2.3
[117,]          6.5         3.0          5.5         1.8
[118,]          7.7         3.8          6.7         2.2
[119,]          7.7         2.6          6.9         2.3
[120,]          6.0         2.2          5.0         1.5
[121,]          6.9         3.2          5.7         2.3
[122,]          5.6         2.8          4.9         2.0
[123,]          7.7         2.8          6.7         2.0
[124,]          6.3         2.7          4.9         1.8
[125,]          6.7         3.3          5.7         2.1
[126,]          7.2         3.2          6.0         1.8
[127,]          6.2         2.8          4.8         1.8
[128,]          6.1         3.0          4.9         1.8
[129,]          6.4         2.8          5.6         2.1
[130,]          7.2         3.0          5.8         1.6
[131,]          7.4         2.8          6.1         1.9
[132,]          7.9         3.8          6.4         2.0
[133,]          6.4         2.8          5.6         2.2
[134,]          6.3         2.8          5.1         1.5
[135,]          6.1         2.6          5.6         1.4
[136,]          7.7         3.0          6.1         2.3
[137,]          6.3         3.4          5.6         2.4
[138,]          6.4         3.1          5.5         1.8
[139,]          6.0         3.0          4.8         1.8
[140,]          6.9         3.1          5.4         2.1
[141,]          6.7         3.1          5.6         2.4
[142,]          6.9         3.1          5.1         2.3
[143,]          5.8         2.7          5.1         1.9
[144,]          6.8         3.2          5.9         2.3
[145,]          6.7         3.3          5.7         2.5
[146,]          6.7         3.0          5.2         2.3
[147,]          6.3         2.5          5.0         1.9
[148,]          6.5         3.0          5.2         2.0
[149,]          6.2         3.4          5.4         2.3
[150,]          5.9         3.0          5.1         1.8

Slot "meta":
       Species
1       setosa
2       setosa
3       setosa
4       setosa
5       setosa
6       setosa
7       setosa
8       setosa
9       setosa
10      setosa
11      setosa
12      setosa
13      setosa
14      setosa
15      setosa
16      setosa
17      setosa
18      setosa
19      setosa
20      setosa
21      setosa
22      setosa
23      setosa
24      setosa
25      setosa
26      setosa
27      setosa
28      setosa
29      setosa
30      setosa
31      setosa
32      setosa
33      setosa
34      setosa
35      setosa
36      setosa
37      setosa
38      setosa
39      setosa
40      setosa
41      setosa
42      setosa
43      setosa
44      setosa
45      setosa
46      setosa
47      setosa
48      setosa
49      setosa
50      setosa
51  versicolor
52  versicolor
53  versicolor
54  versicolor
55  versicolor
56  versicolor
57  versicolor
58  versicolor
59  versicolor
60  versicolor
61  versicolor
62  versicolor
63  versicolor
64  versicolor
65  versicolor
66  versicolor
67  versicolor
68  versicolor
69  versicolor
70  versicolor
71  versicolor
72  versicolor
73  versicolor
74  versicolor
75  versicolor
76  versicolor
77  versicolor
78  versicolor
79  versicolor
80  versicolor
81  versicolor
82  versicolor
83  versicolor
84  versicolor
85  versicolor
86  versicolor
87  versicolor
88  versicolor
89  versicolor
90  versicolor
91  versicolor
92  versicolor
93  versicolor
94  versicolor
95  versicolor
96  versicolor
97  versicolor
98  versicolor
99  versicolor
100 versicolor
101  virginica
102  virginica
103  virginica
104  virginica
105  virginica
106  virginica
107  virginica
108  virginica
109  virginica
110  virginica
111  virginica
112  virginica
113  virginica
114  virginica
115  virginica
116  virginica
117  virginica
118  virginica
119  virginica
120  virginica
121  virginica
122  virginica
123  virginica
124  virginica
125  virginica
126  virginica
127  virginica
128  virginica
129  virginica
130  virginica
131  virginica
132  virginica
133  virginica
134  virginica
135  virginica
136  virginica
137  virginica
138  virginica
139  virginica
140  virginica
141  virginica
142  virginica
143  virginica
144  virginica
145  virginica
146  virginica
147  virginica
148  virginica
149  virginica
150  virginica

> 
> 
> 
> 
> cleanEx()
> nameEx("dimRedData-class")
> ### * dimRedData-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimRedData-class
> ### Title: Class "dimRedData"
> ### Aliases: dimRedData-class dimRedData as.data.frame,dimRedData-method
> ###   as.dimRedData,formula-method getData,dimRedData-method
> ###   getMeta,dimRedData-method nrow,dimRedData-method
> ###   [,dimRedData,ANY,ANY,ANY-method ndims,dimRedData-method
> 
> ### ** Examples
> 
> ## Load an example data set:
> s3d <- loadDataSet("3D S Curve")
> 
> ## Create using a constructor:
> 
> ### without meta information:
> dimRedData(iris[, 1:4])
An object of class "dimRedData"
Slot "data":
       Sepal.Length Sepal.Width Petal.Length Petal.Width
  [1,]          5.1         3.5          1.4         0.2
  [2,]          4.9         3.0          1.4         0.2
  [3,]          4.7         3.2          1.3         0.2
  [4,]          4.6         3.1          1.5         0.2
  [5,]          5.0         3.6          1.4         0.2
  [6,]          5.4         3.9          1.7         0.4
  [7,]          4.6         3.4          1.4         0.3
  [8,]          5.0         3.4          1.5         0.2
  [9,]          4.4         2.9          1.4         0.2
 [10,]          4.9         3.1          1.5         0.1
 [11,]          5.4         3.7          1.5         0.2
 [12,]          4.8         3.4          1.6         0.2
 [13,]          4.8         3.0          1.4         0.1
 [14,]          4.3         3.0          1.1         0.1
 [15,]          5.8         4.0          1.2         0.2
 [16,]          5.7         4.4          1.5         0.4
 [17,]          5.4         3.9          1.3         0.4
 [18,]          5.1         3.5          1.4         0.3
 [19,]          5.7         3.8          1.7         0.3
 [20,]          5.1         3.8          1.5         0.3
 [21,]          5.4         3.4          1.7         0.2
 [22,]          5.1         3.7          1.5         0.4
 [23,]          4.6         3.6          1.0         0.2
 [24,]          5.1         3.3          1.7         0.5
 [25,]          4.8         3.4          1.9         0.2
 [26,]          5.0         3.0          1.6         0.2
 [27,]          5.0         3.4          1.6         0.4
 [28,]          5.2         3.5          1.5         0.2
 [29,]          5.2         3.4          1.4         0.2
 [30,]          4.7         3.2          1.6         0.2
 [31,]          4.8         3.1          1.6         0.2
 [32,]          5.4         3.4          1.5         0.4
 [33,]          5.2         4.1          1.5         0.1
 [34,]          5.5         4.2          1.4         0.2
 [35,]          4.9         3.1          1.5         0.2
 [36,]          5.0         3.2          1.2         0.2
 [37,]          5.5         3.5          1.3         0.2
 [38,]          4.9         3.6          1.4         0.1
 [39,]          4.4         3.0          1.3         0.2
 [40,]          5.1         3.4          1.5         0.2
 [41,]          5.0         3.5          1.3         0.3
 [42,]          4.5         2.3          1.3         0.3
 [43,]          4.4         3.2          1.3         0.2
 [44,]          5.0         3.5          1.6         0.6
 [45,]          5.1         3.8          1.9         0.4
 [46,]          4.8         3.0          1.4         0.3
 [47,]          5.1         3.8          1.6         0.2
 [48,]          4.6         3.2          1.4         0.2
 [49,]          5.3         3.7          1.5         0.2
 [50,]          5.0         3.3          1.4         0.2
 [51,]          7.0         3.2          4.7         1.4
 [52,]          6.4         3.2          4.5         1.5
 [53,]          6.9         3.1          4.9         1.5
 [54,]          5.5         2.3          4.0         1.3
 [55,]          6.5         2.8          4.6         1.5
 [56,]          5.7         2.8          4.5         1.3
 [57,]          6.3         3.3          4.7         1.6
 [58,]          4.9         2.4          3.3         1.0
 [59,]          6.6         2.9          4.6         1.3
 [60,]          5.2         2.7          3.9         1.4
 [61,]          5.0         2.0          3.5         1.0
 [62,]          5.9         3.0          4.2         1.5
 [63,]          6.0         2.2          4.0         1.0
 [64,]          6.1         2.9          4.7         1.4
 [65,]          5.6         2.9          3.6         1.3
 [66,]          6.7         3.1          4.4         1.4
 [67,]          5.6         3.0          4.5         1.5
 [68,]          5.8         2.7          4.1         1.0
 [69,]          6.2         2.2          4.5         1.5
 [70,]          5.6         2.5          3.9         1.1
 [71,]          5.9         3.2          4.8         1.8
 [72,]          6.1         2.8          4.0         1.3
 [73,]          6.3         2.5          4.9         1.5
 [74,]          6.1         2.8          4.7         1.2
 [75,]          6.4         2.9          4.3         1.3
 [76,]          6.6         3.0          4.4         1.4
 [77,]          6.8         2.8          4.8         1.4
 [78,]          6.7         3.0          5.0         1.7
 [79,]          6.0         2.9          4.5         1.5
 [80,]          5.7         2.6          3.5         1.0
 [81,]          5.5         2.4          3.8         1.1
 [82,]          5.5         2.4          3.7         1.0
 [83,]          5.8         2.7          3.9         1.2
 [84,]          6.0         2.7          5.1         1.6
 [85,]          5.4         3.0          4.5         1.5
 [86,]          6.0         3.4          4.5         1.6
 [87,]          6.7         3.1          4.7         1.5
 [88,]          6.3         2.3          4.4         1.3
 [89,]          5.6         3.0          4.1         1.3
 [90,]          5.5         2.5          4.0         1.3
 [91,]          5.5         2.6          4.4         1.2
 [92,]          6.1         3.0          4.6         1.4
 [93,]          5.8         2.6          4.0         1.2
 [94,]          5.0         2.3          3.3         1.0
 [95,]          5.6         2.7          4.2         1.3
 [96,]          5.7         3.0          4.2         1.2
 [97,]          5.7         2.9          4.2         1.3
 [98,]          6.2         2.9          4.3         1.3
 [99,]          5.1         2.5          3.0         1.1
[100,]          5.7         2.8          4.1         1.3
[101,]          6.3         3.3          6.0         2.5
[102,]          5.8         2.7          5.1         1.9
[103,]          7.1         3.0          5.9         2.1
[104,]          6.3         2.9          5.6         1.8
[105,]          6.5         3.0          5.8         2.2
[106,]          7.6         3.0          6.6         2.1
[107,]          4.9         2.5          4.5         1.7
[108,]          7.3         2.9          6.3         1.8
[109,]          6.7         2.5          5.8         1.8
[110,]          7.2         3.6          6.1         2.5
[111,]          6.5         3.2          5.1         2.0
[112,]          6.4         2.7          5.3         1.9
[113,]          6.8         3.0          5.5         2.1
[114,]          5.7         2.5          5.0         2.0
[115,]          5.8         2.8          5.1         2.4
[116,]          6.4         3.2          5.3         2.3
[117,]          6.5         3.0          5.5         1.8
[118,]          7.7         3.8          6.7         2.2
[119,]          7.7         2.6          6.9         2.3
[120,]          6.0         2.2          5.0         1.5
[121,]          6.9         3.2          5.7         2.3
[122,]          5.6         2.8          4.9         2.0
[123,]          7.7         2.8          6.7         2.0
[124,]          6.3         2.7          4.9         1.8
[125,]          6.7         3.3          5.7         2.1
[126,]          7.2         3.2          6.0         1.8
[127,]          6.2         2.8          4.8         1.8
[128,]          6.1         3.0          4.9         1.8
[129,]          6.4         2.8          5.6         2.1
[130,]          7.2         3.0          5.8         1.6
[131,]          7.4         2.8          6.1         1.9
[132,]          7.9         3.8          6.4         2.0
[133,]          6.4         2.8          5.6         2.2
[134,]          6.3         2.8          5.1         1.5
[135,]          6.1         2.6          5.6         1.4
[136,]          7.7         3.0          6.1         2.3
[137,]          6.3         3.4          5.6         2.4
[138,]          6.4         3.1          5.5         1.8
[139,]          6.0         3.0          4.8         1.8
[140,]          6.9         3.1          5.4         2.1
[141,]          6.7         3.1          5.6         2.4
[142,]          6.9         3.1          5.1         2.3
[143,]          5.8         2.7          5.1         1.9
[144,]          6.8         3.2          5.9         2.3
[145,]          6.7         3.3          5.7         2.5
[146,]          6.7         3.0          5.2         2.3
[147,]          6.3         2.5          5.0         1.9
[148,]          6.5         3.0          5.2         2.0
[149,]          6.2         3.4          5.4         2.3
[150,]          5.9         3.0          5.1         1.8

Slot "meta":
data frame with 0 columns and 0 rows

> 
> ### with meta information:
> dimRedData(iris[, 1:4], iris[, 5])
An object of class "dimRedData"
Slot "data":
       Sepal.Length Sepal.Width Petal.Length Petal.Width
  [1,]          5.1         3.5          1.4         0.2
  [2,]          4.9         3.0          1.4         0.2
  [3,]          4.7         3.2          1.3         0.2
  [4,]          4.6         3.1          1.5         0.2
  [5,]          5.0         3.6          1.4         0.2
  [6,]          5.4         3.9          1.7         0.4
  [7,]          4.6         3.4          1.4         0.3
  [8,]          5.0         3.4          1.5         0.2
  [9,]          4.4         2.9          1.4         0.2
 [10,]          4.9         3.1          1.5         0.1
 [11,]          5.4         3.7          1.5         0.2
 [12,]          4.8         3.4          1.6         0.2
 [13,]          4.8         3.0          1.4         0.1
 [14,]          4.3         3.0          1.1         0.1
 [15,]          5.8         4.0          1.2         0.2
 [16,]          5.7         4.4          1.5         0.4
 [17,]          5.4         3.9          1.3         0.4
 [18,]          5.1         3.5          1.4         0.3
 [19,]          5.7         3.8          1.7         0.3
 [20,]          5.1         3.8          1.5         0.3
 [21,]          5.4         3.4          1.7         0.2
 [22,]          5.1         3.7          1.5         0.4
 [23,]          4.6         3.6          1.0         0.2
 [24,]          5.1         3.3          1.7         0.5
 [25,]          4.8         3.4          1.9         0.2
 [26,]          5.0         3.0          1.6         0.2
 [27,]          5.0         3.4          1.6         0.4
 [28,]          5.2         3.5          1.5         0.2
 [29,]          5.2         3.4          1.4         0.2
 [30,]          4.7         3.2          1.6         0.2
 [31,]          4.8         3.1          1.6         0.2
 [32,]          5.4         3.4          1.5         0.4
 [33,]          5.2         4.1          1.5         0.1
 [34,]          5.5         4.2          1.4         0.2
 [35,]          4.9         3.1          1.5         0.2
 [36,]          5.0         3.2          1.2         0.2
 [37,]          5.5         3.5          1.3         0.2
 [38,]          4.9         3.6          1.4         0.1
 [39,]          4.4         3.0          1.3         0.2
 [40,]          5.1         3.4          1.5         0.2
 [41,]          5.0         3.5          1.3         0.3
 [42,]          4.5         2.3          1.3         0.3
 [43,]          4.4         3.2          1.3         0.2
 [44,]          5.0         3.5          1.6         0.6
 [45,]          5.1         3.8          1.9         0.4
 [46,]          4.8         3.0          1.4         0.3
 [47,]          5.1         3.8          1.6         0.2
 [48,]          4.6         3.2          1.4         0.2
 [49,]          5.3         3.7          1.5         0.2
 [50,]          5.0         3.3          1.4         0.2
 [51,]          7.0         3.2          4.7         1.4
 [52,]          6.4         3.2          4.5         1.5
 [53,]          6.9         3.1          4.9         1.5
 [54,]          5.5         2.3          4.0         1.3
 [55,]          6.5         2.8          4.6         1.5
 [56,]          5.7         2.8          4.5         1.3
 [57,]          6.3         3.3          4.7         1.6
 [58,]          4.9         2.4          3.3         1.0
 [59,]          6.6         2.9          4.6         1.3
 [60,]          5.2         2.7          3.9         1.4
 [61,]          5.0         2.0          3.5         1.0
 [62,]          5.9         3.0          4.2         1.5
 [63,]          6.0         2.2          4.0         1.0
 [64,]          6.1         2.9          4.7         1.4
 [65,]          5.6         2.9          3.6         1.3
 [66,]          6.7         3.1          4.4         1.4
 [67,]          5.6         3.0          4.5         1.5
 [68,]          5.8         2.7          4.1         1.0
 [69,]          6.2         2.2          4.5         1.5
 [70,]          5.6         2.5          3.9         1.1
 [71,]          5.9         3.2          4.8         1.8
 [72,]          6.1         2.8          4.0         1.3
 [73,]          6.3         2.5          4.9         1.5
 [74,]          6.1         2.8          4.7         1.2
 [75,]          6.4         2.9          4.3         1.3
 [76,]          6.6         3.0          4.4         1.4
 [77,]          6.8         2.8          4.8         1.4
 [78,]          6.7         3.0          5.0         1.7
 [79,]          6.0         2.9          4.5         1.5
 [80,]          5.7         2.6          3.5         1.0
 [81,]          5.5         2.4          3.8         1.1
 [82,]          5.5         2.4          3.7         1.0
 [83,]          5.8         2.7          3.9         1.2
 [84,]          6.0         2.7          5.1         1.6
 [85,]          5.4         3.0          4.5         1.5
 [86,]          6.0         3.4          4.5         1.6
 [87,]          6.7         3.1          4.7         1.5
 [88,]          6.3         2.3          4.4         1.3
 [89,]          5.6         3.0          4.1         1.3
 [90,]          5.5         2.5          4.0         1.3
 [91,]          5.5         2.6          4.4         1.2
 [92,]          6.1         3.0          4.6         1.4
 [93,]          5.8         2.6          4.0         1.2
 [94,]          5.0         2.3          3.3         1.0
 [95,]          5.6         2.7          4.2         1.3
 [96,]          5.7         3.0          4.2         1.2
 [97,]          5.7         2.9          4.2         1.3
 [98,]          6.2         2.9          4.3         1.3
 [99,]          5.1         2.5          3.0         1.1
[100,]          5.7         2.8          4.1         1.3
[101,]          6.3         3.3          6.0         2.5
[102,]          5.8         2.7          5.1         1.9
[103,]          7.1         3.0          5.9         2.1
[104,]          6.3         2.9          5.6         1.8
[105,]          6.5         3.0          5.8         2.2
[106,]          7.6         3.0          6.6         2.1
[107,]          4.9         2.5          4.5         1.7
[108,]          7.3         2.9          6.3         1.8
[109,]          6.7         2.5          5.8         1.8
[110,]          7.2         3.6          6.1         2.5
[111,]          6.5         3.2          5.1         2.0
[112,]          6.4         2.7          5.3         1.9
[113,]          6.8         3.0          5.5         2.1
[114,]          5.7         2.5          5.0         2.0
[115,]          5.8         2.8          5.1         2.4
[116,]          6.4         3.2          5.3         2.3
[117,]          6.5         3.0          5.5         1.8
[118,]          7.7         3.8          6.7         2.2
[119,]          7.7         2.6          6.9         2.3
[120,]          6.0         2.2          5.0         1.5
[121,]          6.9         3.2          5.7         2.3
[122,]          5.6         2.8          4.9         2.0
[123,]          7.7         2.8          6.7         2.0
[124,]          6.3         2.7          4.9         1.8
[125,]          6.7         3.3          5.7         2.1
[126,]          7.2         3.2          6.0         1.8
[127,]          6.2         2.8          4.8         1.8
[128,]          6.1         3.0          4.9         1.8
[129,]          6.4         2.8          5.6         2.1
[130,]          7.2         3.0          5.8         1.6
[131,]          7.4         2.8          6.1         1.9
[132,]          7.9         3.8          6.4         2.0
[133,]          6.4         2.8          5.6         2.2
[134,]          6.3         2.8          5.1         1.5
[135,]          6.1         2.6          5.6         1.4
[136,]          7.7         3.0          6.1         2.3
[137,]          6.3         3.4          5.6         2.4
[138,]          6.4         3.1          5.5         1.8
[139,]          6.0         3.0          4.8         1.8
[140,]          6.9         3.1          5.4         2.1
[141,]          6.7         3.1          5.6         2.4
[142,]          6.9         3.1          5.1         2.3
[143,]          5.8         2.7          5.1         1.9
[144,]          6.8         3.2          5.9         2.3
[145,]          6.7         3.3          5.7         2.5
[146,]          6.7         3.0          5.2         2.3
[147,]          6.3         2.5          5.0         1.9
[148,]          6.5         3.0          5.2         2.0
[149,]          6.2         3.4          5.4         2.3
[150,]          5.9         3.0          5.1         1.8

Slot "meta":
          meta
1       setosa
2       setosa
3       setosa
4       setosa
5       setosa
6       setosa
7       setosa
8       setosa
9       setosa
10      setosa
11      setosa
12      setosa
13      setosa
14      setosa
15      setosa
16      setosa
17      setosa
18      setosa
19      setosa
20      setosa
21      setosa
22      setosa
23      setosa
24      setosa
25      setosa
26      setosa
27      setosa
28      setosa
29      setosa
30      setosa
31      setosa
32      setosa
33      setosa
34      setosa
35      setosa
36      setosa
37      setosa
38      setosa
39      setosa
40      setosa
41      setosa
42      setosa
43      setosa
44      setosa
45      setosa
46      setosa
47      setosa
48      setosa
49      setosa
50      setosa
51  versicolor
52  versicolor
53  versicolor
54  versicolor
55  versicolor
56  versicolor
57  versicolor
58  versicolor
59  versicolor
60  versicolor
61  versicolor
62  versicolor
63  versicolor
64  versicolor
65  versicolor
66  versicolor
67  versicolor
68  versicolor
69  versicolor
70  versicolor
71  versicolor
72  versicolor
73  versicolor
74  versicolor
75  versicolor
76  versicolor
77  versicolor
78  versicolor
79  versicolor
80  versicolor
81  versicolor
82  versicolor
83  versicolor
84  versicolor
85  versicolor
86  versicolor
87  versicolor
88  versicolor
89  versicolor
90  versicolor
91  versicolor
92  versicolor
93  versicolor
94  versicolor
95  versicolor
96  versicolor
97  versicolor
98  versicolor
99  versicolor
100 versicolor
101  virginica
102  virginica
103  virginica
104  virginica
105  virginica
106  virginica
107  virginica
108  virginica
109  virginica
110  virginica
111  virginica
112  virginica
113  virginica
114  virginica
115  virginica
116  virginica
117  virginica
118  virginica
119  virginica
120  virginica
121  virginica
122  virginica
123  virginica
124  virginica
125  virginica
126  virginica
127  virginica
128  virginica
129  virginica
130  virginica
131  virginica
132  virginica
133  virginica
134  virginica
135  virginica
136  virginica
137  virginica
138  virginica
139  virginica
140  virginica
141  virginica
142  virginica
143  virginica
144  virginica
145  virginica
146  virginica
147  virginica
148  virginica
149  virginica
150  virginica

> 
> ### using slot names:
> dimRedData(data = iris[, 1:4], meta = iris[, 5])
An object of class "dimRedData"
Slot "data":
       Sepal.Length Sepal.Width Petal.Length Petal.Width
  [1,]          5.1         3.5          1.4         0.2
  [2,]          4.9         3.0          1.4         0.2
  [3,]          4.7         3.2          1.3         0.2
  [4,]          4.6         3.1          1.5         0.2
  [5,]          5.0         3.6          1.4         0.2
  [6,]          5.4         3.9          1.7         0.4
  [7,]          4.6         3.4          1.4         0.3
  [8,]          5.0         3.4          1.5         0.2
  [9,]          4.4         2.9          1.4         0.2
 [10,]          4.9         3.1          1.5         0.1
 [11,]          5.4         3.7          1.5         0.2
 [12,]          4.8         3.4          1.6         0.2
 [13,]          4.8         3.0          1.4         0.1
 [14,]          4.3         3.0          1.1         0.1
 [15,]          5.8         4.0          1.2         0.2
 [16,]          5.7         4.4          1.5         0.4
 [17,]          5.4         3.9          1.3         0.4
 [18,]          5.1         3.5          1.4         0.3
 [19,]          5.7         3.8          1.7         0.3
 [20,]          5.1         3.8          1.5         0.3
 [21,]          5.4         3.4          1.7         0.2
 [22,]          5.1         3.7          1.5         0.4
 [23,]          4.6         3.6          1.0         0.2
 [24,]          5.1         3.3          1.7         0.5
 [25,]          4.8         3.4          1.9         0.2
 [26,]          5.0         3.0          1.6         0.2
 [27,]          5.0         3.4          1.6         0.4
 [28,]          5.2         3.5          1.5         0.2
 [29,]          5.2         3.4          1.4         0.2
 [30,]          4.7         3.2          1.6         0.2
 [31,]          4.8         3.1          1.6         0.2
 [32,]          5.4         3.4          1.5         0.4
 [33,]          5.2         4.1          1.5         0.1
 [34,]          5.5         4.2          1.4         0.2
 [35,]          4.9         3.1          1.5         0.2
 [36,]          5.0         3.2          1.2         0.2
 [37,]          5.5         3.5          1.3         0.2
 [38,]          4.9         3.6          1.4         0.1
 [39,]          4.4         3.0          1.3         0.2
 [40,]          5.1         3.4          1.5         0.2
 [41,]          5.0         3.5          1.3         0.3
 [42,]          4.5         2.3          1.3         0.3
 [43,]          4.4         3.2          1.3         0.2
 [44,]          5.0         3.5          1.6         0.6
 [45,]          5.1         3.8          1.9         0.4
 [46,]          4.8         3.0          1.4         0.3
 [47,]          5.1         3.8          1.6         0.2
 [48,]          4.6         3.2          1.4         0.2
 [49,]          5.3         3.7          1.5         0.2
 [50,]          5.0         3.3          1.4         0.2
 [51,]          7.0         3.2          4.7         1.4
 [52,]          6.4         3.2          4.5         1.5
 [53,]          6.9         3.1          4.9         1.5
 [54,]          5.5         2.3          4.0         1.3
 [55,]          6.5         2.8          4.6         1.5
 [56,]          5.7         2.8          4.5         1.3
 [57,]          6.3         3.3          4.7         1.6
 [58,]          4.9         2.4          3.3         1.0
 [59,]          6.6         2.9          4.6         1.3
 [60,]          5.2         2.7          3.9         1.4
 [61,]          5.0         2.0          3.5         1.0
 [62,]          5.9         3.0          4.2         1.5
 [63,]          6.0         2.2          4.0         1.0
 [64,]          6.1         2.9          4.7         1.4
 [65,]          5.6         2.9          3.6         1.3
 [66,]          6.7         3.1          4.4         1.4
 [67,]          5.6         3.0          4.5         1.5
 [68,]          5.8         2.7          4.1         1.0
 [69,]          6.2         2.2          4.5         1.5
 [70,]          5.6         2.5          3.9         1.1
 [71,]          5.9         3.2          4.8         1.8
 [72,]          6.1         2.8          4.0         1.3
 [73,]          6.3         2.5          4.9         1.5
 [74,]          6.1         2.8          4.7         1.2
 [75,]          6.4         2.9          4.3         1.3
 [76,]          6.6         3.0          4.4         1.4
 [77,]          6.8         2.8          4.8         1.4
 [78,]          6.7         3.0          5.0         1.7
 [79,]          6.0         2.9          4.5         1.5
 [80,]          5.7         2.6          3.5         1.0
 [81,]          5.5         2.4          3.8         1.1
 [82,]          5.5         2.4          3.7         1.0
 [83,]          5.8         2.7          3.9         1.2
 [84,]          6.0         2.7          5.1         1.6
 [85,]          5.4         3.0          4.5         1.5
 [86,]          6.0         3.4          4.5         1.6
 [87,]          6.7         3.1          4.7         1.5
 [88,]          6.3         2.3          4.4         1.3
 [89,]          5.6         3.0          4.1         1.3
 [90,]          5.5         2.5          4.0         1.3
 [91,]          5.5         2.6          4.4         1.2
 [92,]          6.1         3.0          4.6         1.4
 [93,]          5.8         2.6          4.0         1.2
 [94,]          5.0         2.3          3.3         1.0
 [95,]          5.6         2.7          4.2         1.3
 [96,]          5.7         3.0          4.2         1.2
 [97,]          5.7         2.9          4.2         1.3
 [98,]          6.2         2.9          4.3         1.3
 [99,]          5.1         2.5          3.0         1.1
[100,]          5.7         2.8          4.1         1.3
[101,]          6.3         3.3          6.0         2.5
[102,]          5.8         2.7          5.1         1.9
[103,]          7.1         3.0          5.9         2.1
[104,]          6.3         2.9          5.6         1.8
[105,]          6.5         3.0          5.8         2.2
[106,]          7.6         3.0          6.6         2.1
[107,]          4.9         2.5          4.5         1.7
[108,]          7.3         2.9          6.3         1.8
[109,]          6.7         2.5          5.8         1.8
[110,]          7.2         3.6          6.1         2.5
[111,]          6.5         3.2          5.1         2.0
[112,]          6.4         2.7          5.3         1.9
[113,]          6.8         3.0          5.5         2.1
[114,]          5.7         2.5          5.0         2.0
[115,]          5.8         2.8          5.1         2.4
[116,]          6.4         3.2          5.3         2.3
[117,]          6.5         3.0          5.5         1.8
[118,]          7.7         3.8          6.7         2.2
[119,]          7.7         2.6          6.9         2.3
[120,]          6.0         2.2          5.0         1.5
[121,]          6.9         3.2          5.7         2.3
[122,]          5.6         2.8          4.9         2.0
[123,]          7.7         2.8          6.7         2.0
[124,]          6.3         2.7          4.9         1.8
[125,]          6.7         3.3          5.7         2.1
[126,]          7.2         3.2          6.0         1.8
[127,]          6.2         2.8          4.8         1.8
[128,]          6.1         3.0          4.9         1.8
[129,]          6.4         2.8          5.6         2.1
[130,]          7.2         3.0          5.8         1.6
[131,]          7.4         2.8          6.1         1.9
[132,]          7.9         3.8          6.4         2.0
[133,]          6.4         2.8          5.6         2.2
[134,]          6.3         2.8          5.1         1.5
[135,]          6.1         2.6          5.6         1.4
[136,]          7.7         3.0          6.1         2.3
[137,]          6.3         3.4          5.6         2.4
[138,]          6.4         3.1          5.5         1.8
[139,]          6.0         3.0          4.8         1.8
[140,]          6.9         3.1          5.4         2.1
[141,]          6.7         3.1          5.6         2.4
[142,]          6.9         3.1          5.1         2.3
[143,]          5.8         2.7          5.1         1.9
[144,]          6.8         3.2          5.9         2.3
[145,]          6.7         3.3          5.7         2.5
[146,]          6.7         3.0          5.2         2.3
[147,]          6.3         2.5          5.0         1.9
[148,]          6.5         3.0          5.2         2.0
[149,]          6.2         3.4          5.4         2.3
[150,]          5.9         3.0          5.1         1.8

Slot "meta":
          meta
1       setosa
2       setosa
3       setosa
4       setosa
5       setosa
6       setosa
7       setosa
8       setosa
9       setosa
10      setosa
11      setosa
12      setosa
13      setosa
14      setosa
15      setosa
16      setosa
17      setosa
18      setosa
19      setosa
20      setosa
21      setosa
22      setosa
23      setosa
24      setosa
25      setosa
26      setosa
27      setosa
28      setosa
29      setosa
30      setosa
31      setosa
32      setosa
33      setosa
34      setosa
35      setosa
36      setosa
37      setosa
38      setosa
39      setosa
40      setosa
41      setosa
42      setosa
43      setosa
44      setosa
45      setosa
46      setosa
47      setosa
48      setosa
49      setosa
50      setosa
51  versicolor
52  versicolor
53  versicolor
54  versicolor
55  versicolor
56  versicolor
57  versicolor
58  versicolor
59  versicolor
60  versicolor
61  versicolor
62  versicolor
63  versicolor
64  versicolor
65  versicolor
66  versicolor
67  versicolor
68  versicolor
69  versicolor
70  versicolor
71  versicolor
72  versicolor
73  versicolor
74  versicolor
75  versicolor
76  versicolor
77  versicolor
78  versicolor
79  versicolor
80  versicolor
81  versicolor
82  versicolor
83  versicolor
84  versicolor
85  versicolor
86  versicolor
87  versicolor
88  versicolor
89  versicolor
90  versicolor
91  versicolor
92  versicolor
93  versicolor
94  versicolor
95  versicolor
96  versicolor
97  versicolor
98  versicolor
99  versicolor
100 versicolor
101  virginica
102  virginica
103  virginica
104  virginica
105  virginica
106  virginica
107  virginica
108  virginica
109  virginica
110  virginica
111  virginica
112  virginica
113  virginica
114  virginica
115  virginica
116  virginica
117  virginica
118  virginica
119  virginica
120  virginica
121  virginica
122  virginica
123  virginica
124  virginica
125  virginica
126  virginica
127  virginica
128  virginica
129  virginica
130  virginica
131  virginica
132  virginica
133  virginica
134  virginica
135  virginica
136  virginica
137  virginica
138  virginica
139  virginica
140  virginica
141  virginica
142  virginica
143  virginica
144  virginica
145  virginica
146  virginica
147  virginica
148  virginica
149  virginica
150  virginica

> 
> ## Convert to a dimRedData objects:
> Iris <- as(iris[, 1:4], "dimRedData")
> 
> ## Convert to data.frame:
> head(as(s3d, "data.frame"))
      meta.x    meta.y          x         y          z
1 -2.2100288 1.7436100 -0.8468614 1.6868785  1.5656383
2 -1.2052039 1.9343941 -1.0300249 1.9726220  0.5870262
3  0.6866268 1.7338325  0.7149170 1.7623680 -0.3351280
4  3.8472678 0.8754306 -0.6225844 0.8078459 -1.7627390
5 -2.8115816 0.3838756 -0.3268460 0.2823813  1.9330188
6  3.7547343 0.1645888 -0.5406188 0.1941127 -1.7911227
> head(as.data.frame(s3d))
      meta.x    meta.y          x         y          z
1 -2.2100288 1.7436100 -0.8468614 1.6868785  1.5656383
2 -1.2052039 1.9343941 -1.0300249 1.9726220  0.5870262
3  0.6866268 1.7338325  0.7149170 1.7623680 -0.3351280
4  3.8472678 0.8754306 -0.6225844 0.8078459 -1.7627390
5 -2.8115816 0.3838756 -0.3268460 0.2823813  1.9330188
6  3.7547343 0.1645888 -0.5406188 0.1941127 -1.7911227
> head(as.data.frame(as(iris[, 1:4], "dimRedData")))
  Sepal.Length Sepal.Width Petal.Length Petal.Width
1          5.1         3.5          1.4         0.2
2          4.9         3.0          1.4         0.2
3          4.7         3.2          1.3         0.2
4          4.6         3.1          1.5         0.2
5          5.0         3.6          1.4         0.2
6          5.4         3.9          1.7         0.4
> 
> ## Extract slots:
> head(getData(s3d))
              x         y          z
[1,] -0.8468614 1.6868785  1.5656383
[2,] -1.0300249 1.9726220  0.5870262
[3,]  0.7149170 1.7623680 -0.3351280
[4,] -0.6225844 0.8078459 -1.7627390
[5,] -0.3268460 0.2823813  1.9330188
[6,] -0.5406188 0.1941127 -1.7911227
> head(getMeta(s3d))
           x         y
1 -2.2100288 1.7436100
2 -1.2052039 1.9343941
3  0.6866268 1.7338325
4  3.8472678 0.8754306
5 -2.8115816 0.3838756
6  3.7547343 0.1645888
> 
> ## Get the number of observations:
> nrow(s3d)
[1] 2000
> 
> ## Subset:
> s3d[1:5, ]
An object of class "dimRedData"
Slot "data":
              x         y          z
[1,] -0.8468614 1.6868785  1.5656383
[2,] -1.0300249 1.9726220  0.5870262
[3,]  0.7149170 1.7623680 -0.3351280
[4,] -0.6225844 0.8078459 -1.7627390
[5,] -0.3268460 0.2823813  1.9330188

Slot "meta":
           x         y
1 -2.2100288 1.7436100
2 -1.2052039 1.9343941
3  0.6866268 1.7338325
4  3.8472678 0.8754306
5 -2.8115816 0.3838756

> 
> ## create a dimRedData object using a formula
> as.dimRedData(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
+               iris)[1:5]
An object of class "dimRedData"
Slot "data":
  Sepal.Length Sepal.Width Petal.Length Petal.Width
1          5.1         3.5          1.4         0.2
2          4.9         3.0          1.4         0.2
3          4.7         3.2          1.3         0.2
4          4.6         3.1          1.5         0.2
5          5.0         3.6          1.4         0.2

Slot "meta":
  Species
1  setosa
2  setosa
3  setosa
4  setosa
5  setosa

> 
> ## Shuffle data:
> s3 <- s3d[nrow(s3d)]
> 
> ## Get the number of variables:
> ndims(s3d)
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("dimRedMethodList")
> ### * dimRedMethodList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimRedMethodList
> ### Title: dimRedMethodList
> ### Aliases: dimRedMethodList
> 
> ### ** Examples
> 
> dimRedMethodList()
 [1] "DiffusionMaps"       "DRR"                 "FastICA"            
 [4] "KamadaKawai"         "DrL"                 "FruchtermanReingold"
 [7] "HLLE"                "Isomap"              "kPCA"               
[10] "LaplacianEigenmaps"  "LLE"                 "MDS"                
[13] "nMDS"                "PCA"                 "tSNE"               
> 
> 
> 
> 
> cleanEx()
> nameEx("dimRedResult-class")
> ### * dimRedResult-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimRedResult-class
> ### Title: Class "dimRedResult"
> ### Aliases: dimRedResult-class dimRedResult predict,dimRedResult-method
> ###   inverse,dimRedResult-method inverse as.data.frame,dimRedResult-method
> ###   getPars,dimRedResult-method print,dimRedResult-method
> ###   getOrgData,dimRedResult-method getDimRedData,dimRedResult-method
> ###   ndims,dimRedResult-method
> 
> ### ** Examples
> 
> ## Create object by embedding data
> iris.pca <- embed(loadDataSet("Iris"), "PCA")
> 
> ## Convert the result to a data.frame
> head(as(iris.pca, "data.frame"))
  meta.Species       PC1        PC2 Sepal.Length Sepal.Width Petal.Length
1       setosa -2.684126 -0.3193972          5.1         3.5          1.4
2       setosa -2.714142  0.1770012          4.9         3.0          1.4
3       setosa -2.888991  0.1449494          4.7         3.2          1.3
4       setosa -2.745343  0.3182990          4.6         3.1          1.5
5       setosa -2.728717 -0.3267545          5.0         3.6          1.4
6       setosa -2.280860 -0.7413304          5.4         3.9          1.7
  Petal.Width
1         0.2
2         0.2
3         0.2
4         0.2
5         0.2
6         0.4
> head(as.data.frame(iris.pca))
  meta.Species       PC1        PC2 org.Sepal.Length org.Sepal.Width
1       setosa -2.684126 -0.3193972              5.1             3.5
2       setosa -2.714142  0.1770012              4.9             3.0
3       setosa -2.888991  0.1449494              4.7             3.2
4       setosa -2.745343  0.3182990              4.6             3.1
5       setosa -2.728717 -0.3267545              5.0             3.6
6       setosa -2.280860 -0.7413304              5.4             3.9
  org.Petal.Length org.Petal.Width
1              1.4             0.2
2              1.4             0.2
3              1.3             0.2
4              1.5             0.2
5              1.4             0.2
6              1.7             0.4
> 
> ## There are no nameclashes to avoid here:
> head(as.data.frame(iris.pca,
+                    org.data.prefix = "",
+                    meta.prefix     = "",
+                    data.prefix     = ""))
  Species       PC1        PC2 Sepal.Length Sepal.Width Petal.Length
1  setosa -2.684126 -0.3193972          5.1         3.5          1.4
2  setosa -2.714142  0.1770012          4.9         3.0          1.4
3  setosa -2.888991  0.1449494          4.7         3.2          1.3
4  setosa -2.745343  0.3182990          4.6         3.1          1.5
5  setosa -2.728717 -0.3267545          5.0         3.6          1.4
6  setosa -2.280860 -0.7413304          5.4         3.9          1.7
  Petal.Width
1         0.2
2         0.2
3         0.2
4         0.2
5         0.2
6         0.4
> 
> ## Print it more or less nicely:
> print(iris.pca)
Method:
PCA 
Parameters:
List of 2
 $ center: logi TRUE
 $ scale.: logi FALSE
> 
> ## Get the embedded data as a dimRedData object:
> getDimRedData(iris.pca)
An object of class "dimRedData"
Slot "data":
                PC1          PC2
  [1,] -2.684125626 -0.319397247
  [2,] -2.714141687  0.177001225
  [3,] -2.888990569  0.144949426
  [4,] -2.745342856  0.318298979
  [5,] -2.728716537 -0.326754513
  [6,] -2.280859633 -0.741330449
  [7,] -2.820537751  0.089461385
  [8,] -2.626144973 -0.163384960
  [9,] -2.886382732  0.578311754
 [10,] -2.672755798  0.113774246
 [11,] -2.506947091 -0.645068899
 [12,] -2.612755231 -0.014729939
 [13,] -2.786109266  0.235112000
 [14,] -3.223803744  0.511394587
 [15,] -2.644750390 -1.178764636
 [16,] -2.386039034 -1.338062330
 [17,] -2.623527875 -0.810679514
 [18,] -2.648296706 -0.311849145
 [19,] -2.199820324 -0.872839039
 [20,] -2.587986400 -0.513560309
 [21,] -2.310256215 -0.391345936
 [22,] -2.543705229 -0.432996063
 [23,] -3.215939416 -0.133468070
 [24,] -2.302733182 -0.098708855
 [25,] -2.355754049  0.037281860
 [26,] -2.506668907  0.146016880
 [27,] -2.468820073 -0.130951489
 [28,] -2.562319906 -0.367718857
 [29,] -2.639534715 -0.312039980
 [30,] -2.631989387  0.196961225
 [31,] -2.587398477  0.204318491
 [32,] -2.409932497 -0.410924264
 [33,] -2.648862334 -0.813363820
 [34,] -2.598736749 -1.093145759
 [35,] -2.636926878  0.121322348
 [36,] -2.866241652 -0.069364472
 [37,] -2.625238050 -0.599370021
 [38,] -2.800684115 -0.268643738
 [39,] -2.980502044  0.487958344
 [40,] -2.590006314 -0.229043837
 [41,] -2.770102426 -0.263527534
 [42,] -2.849368705  0.940960574
 [43,] -2.997406547  0.341926057
 [44,] -2.405614485 -0.188871429
 [45,] -2.209489238 -0.436663142
 [46,] -2.714451427  0.250208204
 [47,] -2.538148259 -0.503771144
 [48,] -2.839462168  0.227945569
 [49,] -2.543085750 -0.579410022
 [50,] -2.703359782 -0.107706082
 [51,]  1.284825689 -0.685160470
 [52,]  0.932488532 -0.318333638
 [53,]  1.464302322 -0.504262815
 [54,]  0.183317720  0.827959012
 [55,]  1.088103258 -0.074590675
 [56,]  0.641669084  0.418246872
 [57,]  1.095060663 -0.283468270
 [58,] -0.749122670  1.004890961
 [59,]  1.044131826 -0.228361900
 [60,] -0.008745404  0.723081905
 [61,] -0.507840884  1.265971191
 [62,]  0.511698557  0.103981235
 [63,]  0.264976508  0.550036464
 [64,]  0.984934510  0.124817854
 [65,] -0.173925372  0.254854209
 [66,]  0.927860781 -0.467179494
 [67,]  0.660283762  0.352969666
 [68,]  0.236104993  0.333610767
 [69,]  0.944733728  0.543145551
 [70,]  0.045226976  0.583834377
 [71,]  1.116283177  0.084616852
 [72,]  0.357888418  0.068925032
 [73,]  1.298183875  0.327787308
 [74,]  0.921728922  0.182737794
 [75,]  0.714853326 -0.149055944
 [76,]  0.900174373 -0.328504474
 [77,]  1.332024437 -0.244440876
 [78,]  1.557802155 -0.267495447
 [79,]  0.813290650  0.163350301
 [80,] -0.305583778  0.368262190
 [81,] -0.068126492  0.705172132
 [82,] -0.189622472  0.680286764
 [83,]  0.136428712  0.314032438
 [84,]  1.380026436  0.420954287
 [85,]  0.588006443  0.484287420
 [86,]  0.806858313 -0.194182315
 [87,]  1.220690882 -0.407619594
 [88,]  0.815095236  0.372037060
 [89,]  0.245957680  0.268524397
 [90,]  0.166413217  0.681926725
 [91,]  0.464800288  0.670711545
 [92,]  0.890815198  0.034464444
 [93,]  0.230548024  0.404385848
 [94,] -0.704531759  1.012248228
 [95,]  0.356981495  0.504910093
 [96,]  0.331934480  0.212654684
 [97,]  0.376215651  0.293218929
 [98,]  0.642576008 -0.017738190
 [99,] -0.906469865  0.756093367
[100,]  0.299000842  0.348897806
[101,]  2.531192728  0.009849109
[102,]  1.415235877  0.574916348
[103,]  2.616676016 -0.343903151
[104,]  1.971531053  0.179727904
[105,]  2.350005920  0.040260947
[106,]  3.397038736 -0.550836673
[107,]  0.521232244  1.192758727
[108,]  2.932587069 -0.355500003
[109,]  2.321228817  0.243831502
[110,]  2.916750967 -0.782791949
[111,]  1.661774154 -0.242228408
[112,]  1.803401953  0.215637617
[113,]  2.165591796 -0.216275585
[114,]  1.346163579  0.776818347
[115,]  1.585928224  0.539640714
[116,]  1.904456375 -0.119250692
[117,]  1.949689059 -0.041943260
[118,]  3.487055364 -1.175739330
[119,]  3.795645422 -0.257322973
[120,]  1.300791713  0.761149636
[121,]  2.427817913 -0.378196013
[122,]  1.199001105  0.606091528
[123,]  3.499920039 -0.460674099
[124,]  1.388766132  0.204399327
[125,]  2.275430504 -0.334990606
[126,]  2.614090474 -0.560901355
[127,]  1.258508161  0.179704795
[128,]  1.291132059  0.116668651
[129,]  2.123608723  0.209729477
[130,]  2.388003016 -0.464639805
[131,]  2.841672778 -0.375269167
[132,]  3.230673661 -1.374165087
[133,]  2.159437642  0.217277579
[134,]  1.444161242  0.143413410
[135,]  1.781294810  0.499901681
[136,]  3.076499932 -0.688085678
[137,]  2.144243314 -0.140064201
[138,]  1.905098149 -0.049300526
[139,]  1.169326339  0.164990262
[140,]  2.107611143 -0.372287872
[141,]  2.314154705 -0.183651279
[142,]  1.922267801 -0.409203467
[143,]  1.415235877  0.574916348
[144,]  2.563013375 -0.277862603
[145,]  2.418746183 -0.304798198
[146,]  1.944109795 -0.187532303
[147,]  1.527166615  0.375316983
[148,]  1.764345717 -0.078858855
[149,]  1.900941614 -0.116627959
[150,]  1.390188862  0.282660938

Slot "meta":
       Species
1       setosa
2       setosa
3       setosa
4       setosa
5       setosa
6       setosa
7       setosa
8       setosa
9       setosa
10      setosa
11      setosa
12      setosa
13      setosa
14      setosa
15      setosa
16      setosa
17      setosa
18      setosa
19      setosa
20      setosa
21      setosa
22      setosa
23      setosa
24      setosa
25      setosa
26      setosa
27      setosa
28      setosa
29      setosa
30      setosa
31      setosa
32      setosa
33      setosa
34      setosa
35      setosa
36      setosa
37      setosa
38      setosa
39      setosa
40      setosa
41      setosa
42      setosa
43      setosa
44      setosa
45      setosa
46      setosa
47      setosa
48      setosa
49      setosa
50      setosa
51  versicolor
52  versicolor
53  versicolor
54  versicolor
55  versicolor
56  versicolor
57  versicolor
58  versicolor
59  versicolor
60  versicolor
61  versicolor
62  versicolor
63  versicolor
64  versicolor
65  versicolor
66  versicolor
67  versicolor
68  versicolor
69  versicolor
70  versicolor
71  versicolor
72  versicolor
73  versicolor
74  versicolor
75  versicolor
76  versicolor
77  versicolor
78  versicolor
79  versicolor
80  versicolor
81  versicolor
82  versicolor
83  versicolor
84  versicolor
85  versicolor
86  versicolor
87  versicolor
88  versicolor
89  versicolor
90  versicolor
91  versicolor
92  versicolor
93  versicolor
94  versicolor
95  versicolor
96  versicolor
97  versicolor
98  versicolor
99  versicolor
100 versicolor
101  virginica
102  virginica
103  virginica
104  virginica
105  virginica
106  virginica
107  virginica
108  virginica
109  virginica
110  virginica
111  virginica
112  virginica
113  virginica
114  virginica
115  virginica
116  virginica
117  virginica
118  virginica
119  virginica
120  virginica
121  virginica
122  virginica
123  virginica
124  virginica
125  virginica
126  virginica
127  virginica
128  virginica
129  virginica
130  virginica
131  virginica
132  virginica
133  virginica
134  virginica
135  virginica
136  virginica
137  virginica
138  virginica
139  virginica
140  virginica
141  virginica
142  virginica
143  virginica
144  virginica
145  virginica
146  virginica
147  virginica
148  virginica
149  virginica
150  virginica

> 
> ## Get the original data including meta information:
> getOrgData(iris.pca)
An object of class "dimRedData"
Slot "data":
       Sepal.Length Sepal.Width Petal.Length Petal.Width
  [1,]          5.1         3.5          1.4         0.2
  [2,]          4.9         3.0          1.4         0.2
  [3,]          4.7         3.2          1.3         0.2
  [4,]          4.6         3.1          1.5         0.2
  [5,]          5.0         3.6          1.4         0.2
  [6,]          5.4         3.9          1.7         0.4
  [7,]          4.6         3.4          1.4         0.3
  [8,]          5.0         3.4          1.5         0.2
  [9,]          4.4         2.9          1.4         0.2
 [10,]          4.9         3.1          1.5         0.1
 [11,]          5.4         3.7          1.5         0.2
 [12,]          4.8         3.4          1.6         0.2
 [13,]          4.8         3.0          1.4         0.1
 [14,]          4.3         3.0          1.1         0.1
 [15,]          5.8         4.0          1.2         0.2
 [16,]          5.7         4.4          1.5         0.4
 [17,]          5.4         3.9          1.3         0.4
 [18,]          5.1         3.5          1.4         0.3
 [19,]          5.7         3.8          1.7         0.3
 [20,]          5.1         3.8          1.5         0.3
 [21,]          5.4         3.4          1.7         0.2
 [22,]          5.1         3.7          1.5         0.4
 [23,]          4.6         3.6          1.0         0.2
 [24,]          5.1         3.3          1.7         0.5
 [25,]          4.8         3.4          1.9         0.2
 [26,]          5.0         3.0          1.6         0.2
 [27,]          5.0         3.4          1.6         0.4
 [28,]          5.2         3.5          1.5         0.2
 [29,]          5.2         3.4          1.4         0.2
 [30,]          4.7         3.2          1.6         0.2
 [31,]          4.8         3.1          1.6         0.2
 [32,]          5.4         3.4          1.5         0.4
 [33,]          5.2         4.1          1.5         0.1
 [34,]          5.5         4.2          1.4         0.2
 [35,]          4.9         3.1          1.5         0.2
 [36,]          5.0         3.2          1.2         0.2
 [37,]          5.5         3.5          1.3         0.2
 [38,]          4.9         3.6          1.4         0.1
 [39,]          4.4         3.0          1.3         0.2
 [40,]          5.1         3.4          1.5         0.2
 [41,]          5.0         3.5          1.3         0.3
 [42,]          4.5         2.3          1.3         0.3
 [43,]          4.4         3.2          1.3         0.2
 [44,]          5.0         3.5          1.6         0.6
 [45,]          5.1         3.8          1.9         0.4
 [46,]          4.8         3.0          1.4         0.3
 [47,]          5.1         3.8          1.6         0.2
 [48,]          4.6         3.2          1.4         0.2
 [49,]          5.3         3.7          1.5         0.2
 [50,]          5.0         3.3          1.4         0.2
 [51,]          7.0         3.2          4.7         1.4
 [52,]          6.4         3.2          4.5         1.5
 [53,]          6.9         3.1          4.9         1.5
 [54,]          5.5         2.3          4.0         1.3
 [55,]          6.5         2.8          4.6         1.5
 [56,]          5.7         2.8          4.5         1.3
 [57,]          6.3         3.3          4.7         1.6
 [58,]          4.9         2.4          3.3         1.0
 [59,]          6.6         2.9          4.6         1.3
 [60,]          5.2         2.7          3.9         1.4
 [61,]          5.0         2.0          3.5         1.0
 [62,]          5.9         3.0          4.2         1.5
 [63,]          6.0         2.2          4.0         1.0
 [64,]          6.1         2.9          4.7         1.4
 [65,]          5.6         2.9          3.6         1.3
 [66,]          6.7         3.1          4.4         1.4
 [67,]          5.6         3.0          4.5         1.5
 [68,]          5.8         2.7          4.1         1.0
 [69,]          6.2         2.2          4.5         1.5
 [70,]          5.6         2.5          3.9         1.1
 [71,]          5.9         3.2          4.8         1.8
 [72,]          6.1         2.8          4.0         1.3
 [73,]          6.3         2.5          4.9         1.5
 [74,]          6.1         2.8          4.7         1.2
 [75,]          6.4         2.9          4.3         1.3
 [76,]          6.6         3.0          4.4         1.4
 [77,]          6.8         2.8          4.8         1.4
 [78,]          6.7         3.0          5.0         1.7
 [79,]          6.0         2.9          4.5         1.5
 [80,]          5.7         2.6          3.5         1.0
 [81,]          5.5         2.4          3.8         1.1
 [82,]          5.5         2.4          3.7         1.0
 [83,]          5.8         2.7          3.9         1.2
 [84,]          6.0         2.7          5.1         1.6
 [85,]          5.4         3.0          4.5         1.5
 [86,]          6.0         3.4          4.5         1.6
 [87,]          6.7         3.1          4.7         1.5
 [88,]          6.3         2.3          4.4         1.3
 [89,]          5.6         3.0          4.1         1.3
 [90,]          5.5         2.5          4.0         1.3
 [91,]          5.5         2.6          4.4         1.2
 [92,]          6.1         3.0          4.6         1.4
 [93,]          5.8         2.6          4.0         1.2
 [94,]          5.0         2.3          3.3         1.0
 [95,]          5.6         2.7          4.2         1.3
 [96,]          5.7         3.0          4.2         1.2
 [97,]          5.7         2.9          4.2         1.3
 [98,]          6.2         2.9          4.3         1.3
 [99,]          5.1         2.5          3.0         1.1
[100,]          5.7         2.8          4.1         1.3
[101,]          6.3         3.3          6.0         2.5
[102,]          5.8         2.7          5.1         1.9
[103,]          7.1         3.0          5.9         2.1
[104,]          6.3         2.9          5.6         1.8
[105,]          6.5         3.0          5.8         2.2
[106,]          7.6         3.0          6.6         2.1
[107,]          4.9         2.5          4.5         1.7
[108,]          7.3         2.9          6.3         1.8
[109,]          6.7         2.5          5.8         1.8
[110,]          7.2         3.6          6.1         2.5
[111,]          6.5         3.2          5.1         2.0
[112,]          6.4         2.7          5.3         1.9
[113,]          6.8         3.0          5.5         2.1
[114,]          5.7         2.5          5.0         2.0
[115,]          5.8         2.8          5.1         2.4
[116,]          6.4         3.2          5.3         2.3
[117,]          6.5         3.0          5.5         1.8
[118,]          7.7         3.8          6.7         2.2
[119,]          7.7         2.6          6.9         2.3
[120,]          6.0         2.2          5.0         1.5
[121,]          6.9         3.2          5.7         2.3
[122,]          5.6         2.8          4.9         2.0
[123,]          7.7         2.8          6.7         2.0
[124,]          6.3         2.7          4.9         1.8
[125,]          6.7         3.3          5.7         2.1
[126,]          7.2         3.2          6.0         1.8
[127,]          6.2         2.8          4.8         1.8
[128,]          6.1         3.0          4.9         1.8
[129,]          6.4         2.8          5.6         2.1
[130,]          7.2         3.0          5.8         1.6
[131,]          7.4         2.8          6.1         1.9
[132,]          7.9         3.8          6.4         2.0
[133,]          6.4         2.8          5.6         2.2
[134,]          6.3         2.8          5.1         1.5
[135,]          6.1         2.6          5.6         1.4
[136,]          7.7         3.0          6.1         2.3
[137,]          6.3         3.4          5.6         2.4
[138,]          6.4         3.1          5.5         1.8
[139,]          6.0         3.0          4.8         1.8
[140,]          6.9         3.1          5.4         2.1
[141,]          6.7         3.1          5.6         2.4
[142,]          6.9         3.1          5.1         2.3
[143,]          5.8         2.7          5.1         1.9
[144,]          6.8         3.2          5.9         2.3
[145,]          6.7         3.3          5.7         2.5
[146,]          6.7         3.0          5.2         2.3
[147,]          6.3         2.5          5.0         1.9
[148,]          6.5         3.0          5.2         2.0
[149,]          6.2         3.4          5.4         2.3
[150,]          5.9         3.0          5.1         1.8

Slot "meta":
       Species
1       setosa
2       setosa
3       setosa
4       setosa
5       setosa
6       setosa
7       setosa
8       setosa
9       setosa
10      setosa
11      setosa
12      setosa
13      setosa
14      setosa
15      setosa
16      setosa
17      setosa
18      setosa
19      setosa
20      setosa
21      setosa
22      setosa
23      setosa
24      setosa
25      setosa
26      setosa
27      setosa
28      setosa
29      setosa
30      setosa
31      setosa
32      setosa
33      setosa
34      setosa
35      setosa
36      setosa
37      setosa
38      setosa
39      setosa
40      setosa
41      setosa
42      setosa
43      setosa
44      setosa
45      setosa
46      setosa
47      setosa
48      setosa
49      setosa
50      setosa
51  versicolor
52  versicolor
53  versicolor
54  versicolor
55  versicolor
56  versicolor
57  versicolor
58  versicolor
59  versicolor
60  versicolor
61  versicolor
62  versicolor
63  versicolor
64  versicolor
65  versicolor
66  versicolor
67  versicolor
68  versicolor
69  versicolor
70  versicolor
71  versicolor
72  versicolor
73  versicolor
74  versicolor
75  versicolor
76  versicolor
77  versicolor
78  versicolor
79  versicolor
80  versicolor
81  versicolor
82  versicolor
83  versicolor
84  versicolor
85  versicolor
86  versicolor
87  versicolor
88  versicolor
89  versicolor
90  versicolor
91  versicolor
92  versicolor
93  versicolor
94  versicolor
95  versicolor
96  versicolor
97  versicolor
98  versicolor
99  versicolor
100 versicolor
101  virginica
102  virginica
103  virginica
104  virginica
105  virginica
106  virginica
107  virginica
108  virginica
109  virginica
110  virginica
111  virginica
112  virginica
113  virginica
114  virginica
115  virginica
116  virginica
117  virginica
118  virginica
119  virginica
120  virginica
121  virginica
122  virginica
123  virginica
124  virginica
125  virginica
126  virginica
127  virginica
128  virginica
129  virginica
130  virginica
131  virginica
132  virginica
133  virginica
134  virginica
135  virginica
136  virginica
137  virginica
138  virginica
139  virginica
140  virginica
141  virginica
142  virginica
143  virginica
144  virginica
145  virginica
146  virginica
147  virginica
148  virginica
149  virginica
150  virginica

> 
> ## Get the number of variables:
> ndims(iris.pca)
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("embed")
> ### * embed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: embed
> ### Title: dispatches the different methods for dimensionality reduction
> ### Aliases: embed embed,formula-method embed,ANY-method
> ###   embed,dimRedData-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D embed_methods <- dimRedMethodList()
> ##D quality_methods <- dimRedQualityList()
> ##D dataset <- loadDataSet("Iris")
> ##D 
> ##D quality_results <- matrix(NA, length(embed_methods), length(quality_methods),
> ##D                               dimnames = list(embed_methods, quality_methods))
> ##D embedded_data <- list()
> ##D 
> ##D for (e in embed_methods) {
> ##D   message("embedding: ", e)
> ##D   embedded_data[[e]] <- embed(dataset, e, .mute = c("message", "output"))
> ##D   for (q in quality_methods) {
> ##D     message("  quality: ", q)
> ##D     quality_results[e, q] <- tryCatch(
> ##D       quality(embedded_data[[e]], q),
> ##D       error = function(e) NA
> ##D     )
> ##D   }
> ##D }
> ##D 
> ##D print(quality_results)
> ## End(Not run)
> ## embed a data.frame using a formula:
> head(as.data.frame(
+   embed(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
+         iris, "PCA")
+ ))
  meta.Species       PC1        PC2 org.Sepal.Length org.Sepal.Width
1       setosa -2.684126 -0.3193972              5.1             3.5
2       setosa -2.714142  0.1770012              4.9             3.0
3       setosa -2.888991  0.1449494              4.7             3.2
4       setosa -2.745343  0.3182990              4.6             3.1
5       setosa -2.728717 -0.3267545              5.0             3.6
6       setosa -2.280860 -0.7413304              5.4             3.9
  org.Petal.Length org.Petal.Width
1              1.4             0.2
2              1.4             0.2
3              1.3             0.2
4              1.5             0.2
5              1.4             0.2
6              1.7             0.4
> 
> head(as.data.frame(
+   embed(iris[, 1:4], "PCA")
+ ))
        PC1        PC2 org.Sepal.Length org.Sepal.Width org.Petal.Length
1 -2.684126 -0.3193972              5.1             3.5              1.4
2 -2.714142  0.1770012              4.9             3.0              1.4
3 -2.888991  0.1449494              4.7             3.2              1.3
4 -2.745343  0.3182990              4.6             3.1              1.5
5 -2.728717 -0.3267545              5.0             3.6              1.4
6 -2.280860 -0.7413304              5.4             3.9              1.7
  org.Petal.Width
1             0.2
2             0.2
3             0.2
4             0.2
5             0.2
6             0.4
> head(as.data.frame(
+   embed(as.matrix(iris[, 1:4]), "PCA")
+ ))
        PC1        PC2 org.Sepal.Length org.Sepal.Width org.Petal.Length
1 -2.684126 -0.3193972              5.1             3.5              1.4
2 -2.714142  0.1770012              4.9             3.0              1.4
3 -2.888991  0.1449494              4.7             3.2              1.3
4 -2.745343  0.3182990              4.6             3.1              1.5
5 -2.728717 -0.3267545              5.0             3.6              1.4
6 -2.280860 -0.7413304              5.4             3.9              1.7
  org.Petal.Width
1             0.2
2             0.2
3             0.2
4             0.2
5             0.2
6             0.4
> 
> 
> 
> cleanEx()
> nameEx("getRotationMatrix")
> ### * getRotationMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getRotationMatrix
> ### Title: getRotationMatrix
> ### Aliases: getRotationMatrix
> 
> ### ** Examples
> 
> dat <- loadDataSet("Iris")
> 
> pca <- embed(dat, "PCA")
> ica <- embed(dat, "FastICA")
> 
> rot_pca <- getRotationMatrix(pca)
> rot_ica <- getRotationMatrix(ica)
> 
> scale(getData(dat), TRUE, FALSE) %*% rot_pca - getData(getDimRedData(pca))
       PC1 PC2
  [1,]   0   0
  [2,]   0   0
  [3,]   0   0
  [4,]   0   0
  [5,]   0   0
  [6,]   0   0
  [7,]   0   0
  [8,]   0   0
  [9,]   0   0
 [10,]   0   0
 [11,]   0   0
 [12,]   0   0
 [13,]   0   0
 [14,]   0   0
 [15,]   0   0
 [16,]   0   0
 [17,]   0   0
 [18,]   0   0
 [19,]   0   0
 [20,]   0   0
 [21,]   0   0
 [22,]   0   0
 [23,]   0   0
 [24,]   0   0
 [25,]   0   0
 [26,]   0   0
 [27,]   0   0
 [28,]   0   0
 [29,]   0   0
 [30,]   0   0
 [31,]   0   0
 [32,]   0   0
 [33,]   0   0
 [34,]   0   0
 [35,]   0   0
 [36,]   0   0
 [37,]   0   0
 [38,]   0   0
 [39,]   0   0
 [40,]   0   0
 [41,]   0   0
 [42,]   0   0
 [43,]   0   0
 [44,]   0   0
 [45,]   0   0
 [46,]   0   0
 [47,]   0   0
 [48,]   0   0
 [49,]   0   0
 [50,]   0   0
 [51,]   0   0
 [52,]   0   0
 [53,]   0   0
 [54,]   0   0
 [55,]   0   0
 [56,]   0   0
 [57,]   0   0
 [58,]   0   0
 [59,]   0   0
 [60,]   0   0
 [61,]   0   0
 [62,]   0   0
 [63,]   0   0
 [64,]   0   0
 [65,]   0   0
 [66,]   0   0
 [67,]   0   0
 [68,]   0   0
 [69,]   0   0
 [70,]   0   0
 [71,]   0   0
 [72,]   0   0
 [73,]   0   0
 [74,]   0   0
 [75,]   0   0
 [76,]   0   0
 [77,]   0   0
 [78,]   0   0
 [79,]   0   0
 [80,]   0   0
 [81,]   0   0
 [82,]   0   0
 [83,]   0   0
 [84,]   0   0
 [85,]   0   0
 [86,]   0   0
 [87,]   0   0
 [88,]   0   0
 [89,]   0   0
 [90,]   0   0
 [91,]   0   0
 [92,]   0   0
 [93,]   0   0
 [94,]   0   0
 [95,]   0   0
 [96,]   0   0
 [97,]   0   0
 [98,]   0   0
 [99,]   0   0
[100,]   0   0
[101,]   0   0
[102,]   0   0
[103,]   0   0
[104,]   0   0
[105,]   0   0
[106,]   0   0
[107,]   0   0
[108,]   0   0
[109,]   0   0
[110,]   0   0
[111,]   0   0
[112,]   0   0
[113,]   0   0
[114,]   0   0
[115,]   0   0
[116,]   0   0
[117,]   0   0
[118,]   0   0
[119,]   0   0
[120,]   0   0
[121,]   0   0
[122,]   0   0
[123,]   0   0
[124,]   0   0
[125,]   0   0
[126,]   0   0
[127,]   0   0
[128,]   0   0
[129,]   0   0
[130,]   0   0
[131,]   0   0
[132,]   0   0
[133,]   0   0
[134,]   0   0
[135,]   0   0
[136,]   0   0
[137,]   0   0
[138,]   0   0
[139,]   0   0
[140,]   0   0
[141,]   0   0
[142,]   0   0
[143,]   0   0
[144,]   0   0
[145,]   0   0
[146,]   0   0
[147,]   0   0
[148,]   0   0
[149,]   0   0
[150,]   0   0
> scale(getData(dat), TRUE, FALSE) %*% rot_ica - getData(getDimRedData(ica))
                ICA1          ICA2
  [1,] -6.661338e-16 -3.330669e-16
  [2,] -6.661338e-16 -2.220446e-16
  [3,] -1.110223e-15  5.551115e-17
  [4,] -4.440892e-16 -1.110223e-16
  [5,] -4.440892e-16 -4.440892e-16
  [6,] -6.661338e-16 -2.220446e-16
  [7,] -8.881784e-16 -5.551115e-17
  [8,] -4.440892e-16 -3.053113e-16
  [9,] -8.881784e-16 -2.220446e-16
 [10,] -4.440892e-16 -3.330669e-16
 [11,] -2.220446e-16 -2.220446e-16
 [12,] -8.881784e-16 -8.326673e-17
 [13,] -6.661338e-16 -2.220446e-16
 [14,] -8.881784e-16 -4.440892e-16
 [15,] -4.440892e-16  0.000000e+00
 [16,] -4.440892e-16  0.000000e+00
 [17,] -8.881784e-16 -2.220446e-16
 [18,] -6.661338e-16 -2.775558e-16
 [19,] -4.440892e-16  0.000000e+00
 [20,] -6.661338e-16 -3.330669e-16
 [21,] -2.220446e-16 -3.330669e-16
 [22,] -6.661338e-16 -4.440892e-16
 [23,] -4.440892e-16 -3.053113e-16
 [24,] -6.661338e-16 -4.302114e-16
 [25,] -6.661338e-16 -8.326673e-17
 [26,] -6.661338e-16 -2.775558e-16
 [27,] -8.881784e-16 -2.775558e-16
 [28,] -4.440892e-16 -2.220446e-16
 [29,] -6.661338e-16 -1.665335e-16
 [30,] -6.661338e-16  0.000000e+00
 [31,] -4.440892e-16  0.000000e+00
 [32,] -6.661338e-16 -2.220446e-16
 [33,] -2.220446e-16  0.000000e+00
 [34,] -6.661338e-16  0.000000e+00
 [35,] -4.440892e-16 -2.775558e-16
 [36,] -4.440892e-16 -5.273559e-16
 [37,] -8.881784e-16 -2.220446e-16
 [38,] -8.881784e-16 -4.440892e-16
 [39,] -8.881784e-16  0.000000e+00
 [40,] -4.440892e-16 -2.775558e-16
 [41,] -8.881784e-16 -1.665335e-16
 [42,] -1.110223e-15  4.440892e-16
 [43,] -1.110223e-15  1.110223e-16
 [44,] -6.661338e-16 -3.330669e-16
 [45,] -8.881784e-16 -3.330669e-16
 [46,] -8.881784e-16 -1.110223e-16
 [47,] -8.881784e-16 -2.220446e-16
 [48,] -8.881784e-16  0.000000e+00
 [49,] -4.440892e-16 -4.440892e-16
 [50,] -4.440892e-16 -3.053113e-16
 [51,] -6.106227e-16 -2.220446e-16
 [52,] -6.661338e-16 -2.220446e-16
 [53,] -6.661338e-16 -4.440892e-16
 [54,] -6.661338e-16 -4.440892e-16
 [55,] -5.551115e-16 -1.387779e-16
 [56,] -6.106227e-16 -2.220446e-16
 [57,] -6.106227e-16 -3.330669e-16
 [58,] -6.106227e-16 -8.881784e-16
 [59,] -6.106227e-16 -3.330669e-16
 [60,] -6.106227e-16 -2.220446e-16
 [61,] -6.245005e-16 -4.440892e-16
 [62,] -5.551115e-16 -2.220446e-16
 [63,] -5.551115e-16 -4.440892e-16
 [64,] -5.551115e-16 -1.665335e-16
 [65,] -5.863365e-16 -2.220446e-16
 [66,] -6.106227e-16  0.000000e+00
 [67,] -6.106227e-16 -2.220446e-16
 [68,] -5.828671e-16 -3.330669e-16
 [69,] -6.661338e-16 -4.440892e-16
 [70,] -5.828671e-16 -4.440892e-16
 [71,] -6.661338e-16 -2.081668e-16
 [72,] -6.383782e-16 -1.804112e-16
 [73,] -5.551115e-16 -2.220446e-16
 [74,] -6.106227e-16 -1.665335e-16
 [75,] -6.106227e-16 -1.665335e-16
 [76,] -6.106227e-16 -2.220446e-16
 [77,] -6.661338e-16 -1.110223e-16
 [78,] -5.551115e-16 -1.110223e-16
 [79,] -5.551115e-16 -2.775558e-16
 [80,] -5.967449e-16 -3.330669e-16
 [81,] -6.245005e-16 -6.661338e-16
 [82,] -6.245005e-16 -4.440892e-16
 [83,] -5.828671e-16 -2.220446e-16
 [84,] -6.661338e-16 -3.330669e-16
 [85,] -6.106227e-16 -3.330669e-16
 [86,] -5.551115e-16 -1.665335e-16
 [87,] -5.551115e-16 -1.110223e-16
 [88,] -6.661338e-16 -3.330669e-16
 [89,] -5.828671e-16 -2.220446e-16
 [90,] -6.106227e-16 -6.661338e-16
 [91,] -6.661338e-16 -2.220446e-16
 [92,] -6.106227e-16 -2.012279e-16
 [93,] -5.828671e-16 -2.220446e-16
 [94,] -6.245005e-16 -4.440892e-16
 [95,] -6.106227e-16 -4.440892e-16
 [96,] -5.828671e-16 -2.775558e-16
 [97,] -6.106227e-16 -3.330669e-16
 [98,] -6.106227e-16 -2.498002e-16
 [99,] -5.551115e-16 -2.220446e-16
[100,] -5.828671e-16 -1.110223e-16
[101,] -4.440892e-16 -3.053113e-16
[102,] -6.661338e-16 -2.220446e-16
[103,] -4.440892e-16 -2.220446e-16
[104,] -5.551115e-16 -3.885781e-16
[105,] -6.661338e-16 -2.220446e-16
[106,] -6.661338e-16 -4.440892e-16
[107,] -6.661338e-16  0.000000e+00
[108,] -4.440892e-16 -3.330669e-16
[109,] -4.440892e-16 -1.110223e-16
[110,] -6.661338e-16  0.000000e+00
[111,] -6.661338e-16 -2.220446e-16
[112,] -6.661338e-16 -3.330669e-16
[113,] -6.661338e-16  0.000000e+00
[114,] -5.551115e-16 -2.220446e-16
[115,] -6.661338e-16 -4.440892e-16
[116,] -5.551115e-16 -1.110223e-16
[117,] -4.440892e-16 -1.942890e-16
[118,] -6.661338e-16 -4.440892e-16
[119,] -4.440892e-16 -3.330669e-16
[120,] -6.661338e-16 -4.440892e-16
[121,] -6.661338e-16 -2.220446e-16
[122,] -7.771561e-16 -4.440892e-16
[123,] -6.661338e-16 -6.661338e-16
[124,] -6.661338e-16 -3.330669e-16
[125,] -6.661338e-16  0.000000e+00
[126,] -4.440892e-16 -2.220446e-16
[127,] -5.551115e-16 -2.220446e-16
[128,] -5.551115e-16 -1.942890e-16
[129,] -6.661338e-16 -3.330669e-16
[130,] -4.440892e-16  0.000000e+00
[131,] -6.661338e-16 -3.330669e-16
[132,] -6.661338e-16 -4.440892e-16
[133,] -6.661338e-16 -3.330669e-16
[134,] -6.661338e-16 -2.498002e-16
[135,] -5.551115e-16 -4.440892e-16
[136,] -6.661338e-16 -4.440892e-16
[137,] -6.661338e-16 -1.665335e-16
[138,] -5.551115e-16 -1.942890e-16
[139,] -5.551115e-16 -2.775558e-16
[140,] -5.551115e-16 -2.220446e-16
[141,] -6.661338e-16 -1.665335e-16
[142,] -6.661338e-16 -2.220446e-16
[143,] -6.661338e-16 -2.220446e-16
[144,] -4.440892e-16  0.000000e+00
[145,] -6.661338e-16 -1.110223e-16
[146,] -6.661338e-16 -5.551115e-17
[147,] -4.440892e-16 -1.110223e-16
[148,] -6.661338e-16 -2.220446e-16
[149,] -5.551115e-16 -1.665335e-16
[150,] -6.661338e-16 -2.775558e-16
> 
> 
> 
> 
> cleanEx()
> nameEx("installSuggests")
> ### * installSuggests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: installSuggests
> ### Title: getSuggests
> ### Aliases: installSuggests
> 
> ### ** Examples
> 
> ## Not run: 
> ##D installSuggests()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("kPCA-class")
> ### * kPCA-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kPCA-class
> ### Title: Kernel PCA
> ### Aliases: kPCA-class kPCA
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dat <- loadDataSet("3D S Curve")
> ##D 
> ##D ## use the S4 class directly:
> ##D kpca <- kPCA()
> ##D emb <- kpca@fun(dat, kpca@stdpars)
> ##D 
> ##D ## simpler, use embed():
> ##D emb2 <- embed(dat, "kPCA")
> ##D 
> ##D plot(emb, type = "2vars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mixColorRamps")
> ### * mixColorRamps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mixColorRamps
> ### Title: Mixing color ramps
> ### Aliases: mixColorRamps mixColor1Ramps mixColor2Ramps mixColor3Ramps
> 
> ### ** Examples
> 
> cols <- expand.grid(x = seq(0, 1, length.out = 10),
+                     y = seq(0, 1, length.out = 10),
+                     z = seq(0, 1, length.out = 10))
> mixed <- mixColor3Ramps(cols)
> 
> ## Not run: 
> ##D library(rgl)
> ##D plot3d(cols$x, cols$y, cols$z, col = mixed, pch = 15)
> ##D 
> ##D cols <- expand.grid(x = seq(0, 1, length.out = 10),
> ##D                     y = seq(0, 1, length.out = 10))
> ##D mixed <- mixColor2Ramps(cols)
> ## End(Not run)
> 
> plot(cols$x, cols$y, col = mixed, pch = 15)
> 
> 
> 
> cleanEx()
> nameEx("nMDS-class")
> ### * nMDS-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nMDS-class
> ### Title: Non-Metric Dimensional Scaling
> ### Aliases: nMDS-class nMDS
> 
> ### ** Examples
> 
> dat <- loadDataSet("3D S Curve", n = 1000)
> 
> ## using the S4 classes:
> nmds <- nMDS()
> emb <- nmds@fun(dat, nmds@stdpars)
> 
> 
> ## using embed()
> emb2 <- embed(dat, "nMDS", d = function(x) exp(dist(x)))
> 
> 
> plot(emb, type = "2vars")
> plot(emb2, type = "2vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot
> ### Title: Plotting of dimRed* objects
> ### Aliases: plot plot.dimRed plot,dimRedData,ANY-method plot.dimRedData
> ###   plot,dimRedResult,ANY-method plot.dimRedResult
> 
> ### ** Examples
> 
> scurve = loadDataSet("3D S Curve")
> plot(scurve, type = "pairs", main = "pairs plot of S curve")
> plot(scurve, type = "parpl")
> plot(scurve, type = "2vars", vars = c("y", "z"))
> plot(scurve, type = "3vars")
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_R_NX")
> ### * plot_R_NX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_R_NX
> ### Title: plot_R_NX
> ### Aliases: plot_R_NX
> 
> ### ** Examples
> 
> 
> ## define which methods to apply
> embed_methods <- c("Isomap", "PCA")
> ## load test data set
> data_set <- loadDataSet("3D S Curve", n = 1000)
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2017-08-15 04:11:52: Isomap START
2017-08-15 04:11:52: constructing knn graph
2017-08-15 04:11:52: calculating geodesic distances
2017-08-15 04:11:54: cmdscale
2017-08-15 04:11:57: post processing
> names(data_emb) <- embed_methods
> ## plot the R_NX curves:
> plot_R_NX(data_emb) +
+     ggplot2::theme(legend.title = ggplot2::element_blank(),
+                    legend.position = c(0.5, 0.1),
+                    legend.justification = c(0.5, 0.1))
Warning: Removed 100 rows containing missing values (geom_path).
> 
> 
> 
> 
> cleanEx()
> nameEx("quality")
> ### * quality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quality,dimRedResult-method
> ### Title: Quality Criteria for dimensionality reduction.
> ### Aliases: quality,dimRedResult-method quality quality.dimRedResult
> ###   dimRedQualityList
> 
> ### ** Examples
> 
> ## Not run: 
> ##D embed_methods <- dimRedMethodList()
> ##D quality_methods <- dimRedQualityList()
> ##D scurve <- loadDataSet("3D S Curve", n = 500)
> ##D 
> ##D quality_results <- matrix(NA, length(embed_methods), length(quality_methods),
> ##D                               dimnames = list(embed_methods, quality_methods))
> ##D embedded_data <- list()
> ##D 
> ##D for (e in embed_methods) {
> ##D   message("embedding: ", e)
> ##D   embedded_data[[e]] <- embed(scurve, e, .mute = c("message", "output"))
> ##D   for (q in quality_methods) {
> ##D     message("  quality: ", q)
> ##D     quality_results[e, q] <- tryCatch(
> ##D       quality(embedded_data[[e]], q),
> ##D       error = function (e) NA
> ##D     )
> ##D   }
> ##D }
> ##D 
> ##D print(quality_results)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("reconstruction_error-dimRedResult-method")
> ### * reconstruction_error-dimRedResult-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reconstruction_error,dimRedResult-method
> ### Title: Method reconstruction_error
> ### Aliases: reconstruction_error,dimRedResult-method reconstruction_error
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ir <- loadDataSet("Iris")
> ##D ir.drr <- embed(ir, "DRR", ndim = ndims(ir))
> ##D ir.pca <- embed(ir, "PCA", ndim = ndims(ir))
> ##D 
> ##D rmse <- data.frame(
> ##D   rmse_drr = reconstruction_error(ir.drr),
> ##D   rmse_pca = reconstruction_error(ir.pca)
> ##D )
> ##D 
> ##D matplot(rmse, type = "l")
> ##D plot(ir)
> ##D plot(ir.drr)
> ##D plot(ir.pca)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tSNE-class")
> ### * tSNE-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tSNE-class
> ### Title: t-Distributed Stochastic Neighborhood Embedding
> ### Aliases: tSNE-class tSNE
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dat <- loadDataSet("3D S Curve", n = 500)
> ##D 
> ##D ## using the S4 class directly:
> ##D tsne <- tSNE()
> ##D emb <- tsne@fun(dat, tsne@stdpars)
> ##D 
> ##D ## using embed()
> ##D emb2 <- embed(dat, "tSNE", perplexity = 80)
> ##D 
> ##D plot(emb, type = "2vars")
> ##D plot(emb2, type = "2vars")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  63.572 1.424 65.385 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
