
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(dimRed)
Loading required package: DRR
Loading required package: kernlab
Loading required package: CVST
Loading required package: Matrix

Attaching package: 'dimRed'

The following object is masked from 'package:stats':

    embed

The following object is masked from 'package:base':

    as.data.frame

> 
> test_check("dimRed")
predictors:  PC1 PC2 dependent:  PC3 
sigma=0.001 kernel=rbfdot lambda=0 nblocks=4 ( 2262.445 )
sigma=0.01 kernel=rbfdot lambda=0 nblocks=4 ( 14739.21 )
sigma=0.1 kernel=rbfdot lambda=0 nblocks=4 ( 10864380 )
sigma=1 kernel=rbfdot lambda=0 nblocks=4 ( 3032.276 )
sigma=10 kernel=rbfdot lambda=0 nblocks=4 ( 0.2098294 )
sigma=100 kernel=rbfdot lambda=0 nblocks=4 ( 0.3325476 )
sigma=1000 kernel=rbfdot lambda=0 nblocks=4 ( 0.4857321 )
sigma=10000 kernel=rbfdot lambda=0 nblocks=4 ( 0.5169368 )
sigma=0.001 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.5268173 )
sigma=0.01 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.5313263 )
sigma=0.1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.553525 )
sigma=1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.196247 )
sigma=10 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.120491 )
sigma=100 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.324761 )
sigma=1000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.4859524 )
sigma=10000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.5169427 )
sigma=0.001 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5260519 )
sigma=0.01 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.529207 )
sigma=0.1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5379551 )
sigma=1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.1703321 )
sigma=10 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.1051663 )
sigma=100 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.3243158 )
sigma=1000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.4860215 )
sigma=10000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5169768 )
sigma=0.001 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5253687 )
sigma=0.01 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5250248 )
sigma=0.1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5359189 )
sigma=1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.2247499 )
sigma=10 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.1216701 )
sigma=100 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.3378279 )
sigma=1000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.488213 )
sigma=10000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5172851 )
sigma=0.001 kernel=rbfdot lambda=1 nblocks=4 ( 0.5234506 )
sigma=0.01 kernel=rbfdot lambda=1 nblocks=4 ( 0.5252741 )
sigma=0.1 kernel=rbfdot lambda=1 nblocks=4 ( 0.5282853 )
sigma=1 kernel=rbfdot lambda=1 nblocks=4 ( 0.38535 )
sigma=10 kernel=rbfdot lambda=1 nblocks=4 ( 0.2295082 )
sigma=100 kernel=rbfdot lambda=1 nblocks=4 ( 0.4049058 )
sigma=1000 kernel=rbfdot lambda=1 nblocks=4 ( 0.5021031 )
sigma=10000 kernel=rbfdot lambda=1 nblocks=4 ( 0.5189113 )
sigma=0.001 kernel=rbfdot lambda=10 nblocks=4 ( 0.5226149 )
sigma=0.01 kernel=rbfdot lambda=10 nblocks=4 ( 0.5234456 )
sigma=0.1 kernel=rbfdot lambda=10 nblocks=4 ( 0.5241326 )
sigma=1 kernel=rbfdot lambda=10 nblocks=4 ( 0.4975975 )
sigma=10 kernel=rbfdot lambda=10 nblocks=4 ( 0.4422042 )
sigma=100 kernel=rbfdot lambda=10 nblocks=4 ( 0.4962544 )
sigma=1000 kernel=rbfdot lambda=10 nblocks=4 ( 0.5174217 )
sigma=10000 kernel=rbfdot lambda=10 nblocks=4 ( 0.5206498 )
sigma=0.001 kernel=rbfdot lambda=100 nblocks=4 ( 0.5218009 )
sigma=0.01 kernel=rbfdot lambda=100 nblocks=4 ( 0.5218749 )
sigma=0.1 kernel=rbfdot lambda=100 nblocks=4 ( 0.5218806 )
sigma=1 kernel=rbfdot lambda=100 nblocks=4 ( 0.5182305 )
sigma=10 kernel=rbfdot lambda=100 nblocks=4 ( 0.5113839 )
sigma=100 kernel=rbfdot lambda=100 nblocks=4 ( 0.5182508 )
sigma=1000 kernel=rbfdot lambda=100 nblocks=4 ( 0.5206501 )
sigma=10000 kernel=rbfdot lambda=100 nblocks=4 ( 0.5210053 )
predictors:  PC1 dependent:  PC2 
sigma=0.001 kernel=rbfdot lambda=0 nblocks=4 ( 3179.189 )
sigma=0.01 kernel=rbfdot lambda=0 nblocks=4 ( 4369.734 )
sigma=0.1 kernel=rbfdot lambda=0 nblocks=4 ( 565808229 )
sigma=1 kernel=rbfdot lambda=0 nblocks=4 ( 1.527453e+12 )
sigma=10 kernel=rbfdot lambda=0 nblocks=4 ( 721620923921 )
Error in solve(Matrix(K + diag(lambda, N))) : 
  Lapack dgecon(): system computationally singular, reciprocal condition number = 1.10908e-16
sigma=100 kernel=rbfdot lambda=0 nblocks=4 ( NA )
sigma=1000 kernel=rbfdot lambda=0 nblocks=4 ( 15972034 )
sigma=10000 kernel=rbfdot lambda=0 nblocks=4 ( 145.6348 )
sigma=0.001 kernel=rbfdot lambda=0.001 nblocks=4 ( 2.128898 )
sigma=0.01 kernel=rbfdot lambda=0.001 nblocks=4 ( 2.139991 )
sigma=0.1 kernel=rbfdot lambda=0.001 nblocks=4 ( 2.139169 )
sigma=1 kernel=rbfdot lambda=0.001 nblocks=4 ( 1.899113 )
sigma=10 kernel=rbfdot lambda=0.001 nblocks=4 ( 2.032883 )
sigma=100 kernel=rbfdot lambda=0.001 nblocks=4 ( 4.273759 )
sigma=1000 kernel=rbfdot lambda=0.001 nblocks=4 ( 3.874772 )
sigma=10000 kernel=rbfdot lambda=0.001 nblocks=4 ( 2.385115 )
sigma=0.001 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.122986 )
sigma=0.01 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.141758 )
sigma=0.1 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.16039 )
sigma=1 kernel=rbfdot lambda=0.01 nblocks=4 ( 1.904798 )
sigma=10 kernel=rbfdot lambda=0.01 nblocks=4 ( 1.933888 )
sigma=100 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.182847 )
sigma=1000 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.334866 )
sigma=10000 kernel=rbfdot lambda=0.01 nblocks=4 ( 2.076512 )
sigma=0.001 kernel=rbfdot lambda=0.1 nblocks=4 ( 2.120924 )
sigma=0.01 kernel=rbfdot lambda=0.1 nblocks=4 ( 2.129526 )
sigma=0.1 kernel=rbfdot lambda=0.1 nblocks=4 ( 2.14404 )
sigma=1 kernel=rbfdot lambda=0.1 nblocks=4 ( 1.9359 )
sigma=10 kernel=rbfdot lambda=0.1 nblocks=4 ( 1.803037 )
sigma=100 kernel=rbfdot lambda=0.1 nblocks=4 ( 1.973497 )
sigma=1000 kernel=rbfdot lambda=0.1 nblocks=4 ( 1.951323 )
sigma=10000 kernel=rbfdot lambda=0.1 nblocks=4 ( 2.029263 )
sigma=0.001 kernel=rbfdot lambda=1 nblocks=4 ( 2.117067 )
sigma=0.01 kernel=rbfdot lambda=1 nblocks=4 ( 2.122697 )
sigma=0.1 kernel=rbfdot lambda=1 nblocks=4 ( 2.135465 )
sigma=1 kernel=rbfdot lambda=1 nblocks=4 ( 1.990661 )
sigma=10 kernel=rbfdot lambda=1 nblocks=4 ( 1.82258 )
sigma=100 kernel=rbfdot lambda=1 nblocks=4 ( 1.822264 )
sigma=1000 kernel=rbfdot lambda=1 nblocks=4 ( 1.883924 )
sigma=10000 kernel=rbfdot lambda=1 nblocks=4 ( 1.997532 )
sigma=0.001 kernel=rbfdot lambda=10 nblocks=4 ( 2.114508 )
sigma=0.01 kernel=rbfdot lambda=10 nblocks=4 ( 2.116644 )
sigma=0.1 kernel=rbfdot lambda=10 nblocks=4 ( 2.124708 )
sigma=1 kernel=rbfdot lambda=10 nblocks=4 ( 2.079941 )
sigma=10 kernel=rbfdot lambda=10 nblocks=4 ( 1.934024 )
sigma=100 kernel=rbfdot lambda=10 nblocks=4 ( 1.944317 )
sigma=1000 kernel=rbfdot lambda=10 nblocks=4 ( 2.020327 )
sigma=10000 kernel=rbfdot lambda=10 nblocks=4 ( 2.071138 )
sigma=0.001 kernel=rbfdot lambda=100 nblocks=4 ( 2.108257 )
sigma=0.01 kernel=rbfdot lambda=100 nblocks=4 ( 2.10865 )
sigma=0.1 kernel=rbfdot lambda=100 nblocks=4 ( 2.110555 )
sigma=1 kernel=rbfdot lambda=100 nblocks=4 ( 2.102978 )
sigma=10 kernel=rbfdot lambda=100 nblocks=4 ( 2.069983 )
sigma=100 kernel=rbfdot lambda=100 nblocks=4 ( 2.076246 )
sigma=1000 kernel=rbfdot lambda=100 nblocks=4 ( 2.090938 )
sigma=10000 kernel=rbfdot lambda=100 nblocks=4 ( 2.098052 )
predictors:  PC1 PC2 PC3 dependent:  PC4 
sigma=0.001 kernel=rbfdot lambda=0 nblocks=4 ( 2547453 )
sigma=0.01 kernel=rbfdot lambda=0 nblocks=4 ( 52.36465 )
sigma=0.1 kernel=rbfdot lambda=0 nblocks=4 ( 127.628 )
sigma=1 kernel=rbfdot lambda=0 nblocks=4 ( 0.0505502 )
sigma=10 kernel=rbfdot lambda=0 nblocks=4 ( 0.02290289 )
sigma=100 kernel=rbfdot lambda=0 nblocks=4 ( 0.0237221 )
sigma=1000 kernel=rbfdot lambda=0 nblocks=4 ( 0.02367448 )
Error in LU.dgC(a) : cs_lu(A) failed: near-singular A (or out of memory)
sigma=10000 kernel=rbfdot lambda=0 nblocks=4 ( NA )
sigma=0.001 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.02650264 )
sigma=0.01 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.0262416 )
sigma=0.1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.03368455 )
sigma=1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.04112642 )
sigma=10 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.02339221 )
sigma=100 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.0237006 )
sigma=1000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.02367452 )
sigma=10000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.02367483 )
sigma=0.001 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02540393 )
sigma=0.01 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02592841 )
sigma=0.1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02535467 )
sigma=1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.0259528 )
sigma=10 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02435192 )
sigma=100 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02369345 )
sigma=1000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.0236745 )
sigma=10000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.02367484 )
sigma=0.001 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.024519 )
sigma=0.01 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.0252813 )
sigma=0.1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02597475 )
sigma=1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02326762 )
sigma=10 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02318922 )
sigma=100 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02370924 )
sigma=1000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02367462 )
sigma=10000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.02367493 )
sigma=0.001 kernel=rbfdot lambda=1 nblocks=4 ( 0.02404768 )
sigma=0.01 kernel=rbfdot lambda=1 nblocks=4 ( 0.02444201 )
sigma=0.1 kernel=rbfdot lambda=1 nblocks=4 ( 0.02461465 )
sigma=1 kernel=rbfdot lambda=1 nblocks=4 ( 0.02262459 )
sigma=10 kernel=rbfdot lambda=1 nblocks=4 ( 0.02333383 )
sigma=100 kernel=rbfdot lambda=1 nblocks=4 ( 0.02368525 )
sigma=1000 kernel=rbfdot lambda=1 nblocks=4 ( 0.02367529 )
sigma=10000 kernel=rbfdot lambda=1 nblocks=4 ( 0.02367546 )
sigma=0.001 kernel=rbfdot lambda=10 nblocks=4 ( 0.02389215 )
sigma=0.01 kernel=rbfdot lambda=10 nblocks=4 ( 0.02396793 )
sigma=0.1 kernel=rbfdot lambda=10 nblocks=4 ( 0.02402792 )
sigma=1 kernel=rbfdot lambda=10 nblocks=4 ( 0.02344334 )
sigma=10 kernel=rbfdot lambda=10 nblocks=4 ( 0.02356308 )
sigma=100 kernel=rbfdot lambda=10 nblocks=4 ( 0.02367648 )
sigma=1000 kernel=rbfdot lambda=10 nblocks=4 ( 0.02367602 )
sigma=10000 kernel=rbfdot lambda=10 nblocks=4 ( 0.02367605 )
sigma=0.001 kernel=rbfdot lambda=100 nblocks=4 ( 0.02373593 )
sigma=0.01 kernel=rbfdot lambda=100 nblocks=4 ( 0.02373982 )
sigma=0.1 kernel=rbfdot lambda=100 nblocks=4 ( 0.02374229 )
sigma=1 kernel=rbfdot lambda=100 nblocks=4 ( 0.02364799 )
sigma=10 kernel=rbfdot lambda=100 nblocks=4 ( 0.02366285 )
sigma=100 kernel=rbfdot lambda=100 nblocks=4 ( 0.0236762 )
sigma=1000 kernel=rbfdot lambda=100 nblocks=4 ( 0.02367617 )
sigma=10000 kernel=rbfdot lambda=100 nblocks=4 ( 0.02367618 )
predictors:  PC1 PC2 dependent:  PC3 
sigma=0.001 kernel=rbfdot lambda=0 nblocks=4 ( 15076.39 )
sigma=0.01 kernel=rbfdot lambda=0 nblocks=4 ( 3350966 )
sigma=0.1 kernel=rbfdot lambda=0 nblocks=4 ( 265571174684 )
sigma=1 kernel=rbfdot lambda=0 nblocks=4 ( 24.76993 )
Error in solve(Matrix(K + diag(lambda, N))) : 
  Lapack routine dsytrf returned error code 29
sigma=10 kernel=rbfdot lambda=0 nblocks=4 ( NA )
sigma=100 kernel=rbfdot lambda=0 nblocks=4 ( 0.07361453 )
Error in LU.dgC(a) : cs_lu(A) failed: near-singular A (or out of memory)
sigma=1000 kernel=rbfdot lambda=0 nblocks=4 ( NA )
Error in LU.dgC(a) : cs_lu(A) failed: near-singular A (or out of memory)
sigma=10000 kernel=rbfdot lambda=0 nblocks=4 ( NA )
sigma=0.001 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.08679335 )
sigma=0.01 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.08477696 )
sigma=0.1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.1059325 )
sigma=1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.1851561 )
sigma=10 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.0861358 )
sigma=100 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.07387987 )
sigma=1000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.07504111 )
sigma=10000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.07548306 )
sigma=0.001 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.08460518 )
sigma=0.01 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.08661746 )
sigma=0.1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.08079915 )
sigma=1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.08295992 )
sigma=10 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.07476438 )
sigma=100 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.07378884 )
sigma=1000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.07506312 )
sigma=10000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.07550018 )
sigma=0.001 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.08303666 )
sigma=0.01 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.08685158 )
sigma=0.1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07817055 )
sigma=1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07550465 )
sigma=10 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07483902 )
sigma=100 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07421221 )
sigma=1000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07524731 )
sigma=10000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.07565807 )
sigma=0.001 kernel=rbfdot lambda=1 nblocks=4 ( 0.08196033 )
sigma=0.01 kernel=rbfdot lambda=1 nblocks=4 ( 0.08400207 )
sigma=0.1 kernel=rbfdot lambda=1 nblocks=4 ( 0.08537022 )
sigma=1 kernel=rbfdot lambda=1 nblocks=4 ( 0.07521185 )
sigma=10 kernel=rbfdot lambda=1 nblocks=4 ( 0.07445559 )
sigma=100 kernel=rbfdot lambda=1 nblocks=4 ( 0.07540854 )
sigma=1000 kernel=rbfdot lambda=1 nblocks=4 ( 0.07626644 )
sigma=10000 kernel=rbfdot lambda=1 nblocks=4 ( 0.07651293 )
sigma=0.001 kernel=rbfdot lambda=10 nblocks=4 ( 0.08072778 )
sigma=0.01 kernel=rbfdot lambda=10 nblocks=4 ( 0.08123341 )
sigma=0.1 kernel=rbfdot lambda=10 nblocks=4 ( 0.08207952 )
sigma=1 kernel=rbfdot lambda=10 nblocks=4 ( 0.07788743 )
sigma=10 kernel=rbfdot lambda=10 nblocks=4 ( 0.07656375 )
sigma=100 kernel=rbfdot lambda=10 nblocks=4 ( 0.07722632 )
sigma=1000 kernel=rbfdot lambda=10 nblocks=4 ( 0.07741497 )
sigma=10000 kernel=rbfdot lambda=10 nblocks=4 ( 0.07746377 )
sigma=0.001 kernel=rbfdot lambda=100 nblocks=4 ( 0.07855533 )
sigma=0.01 kernel=rbfdot lambda=100 nblocks=4 ( 0.07857912 )
sigma=0.1 kernel=rbfdot lambda=100 nblocks=4 ( 0.07858605 )
sigma=1 kernel=rbfdot lambda=100 nblocks=4 ( 0.07780645 )
sigma=10 kernel=rbfdot lambda=100 nblocks=4 ( 0.07755052 )
sigma=100 kernel=rbfdot lambda=100 nblocks=4 ( 0.07763627 )
sigma=1000 kernel=rbfdot lambda=100 nblocks=4 ( 0.07765804 )
sigma=10000 kernel=rbfdot lambda=100 nblocks=4 ( 0.07766344 )
1. Error: rmse_by_ndim (@test_quality.R#30) ------------------------------------
Lapack dgecon(): system computationally singular, reciprocal condition number = 0
1: embed(ir, "DRR", ndim = ndims(ir)) at testthat/test_quality.R:30
2: embed(ir, "DRR", ndim = ndims(ir))
3: .local(.data, ...)
4: do.call(methodObject@fun, args)
5: (function (data, pars, keep.org.data = TRUE) 
   {
       chckpkg("DRR")
       chckpkg("kernlab")
       meta <- data@meta
       orgdata <- if (keep.org.data) 
           data@data
       else NULL
       indata <- data@data
       res <- do.call(DRR::drr, c(list(X = indata), pars))
       outdata <- res$fitted.data
       colnames(outdata) <- paste0("DRR", 1:ncol(outdata))
       appl <- function(x) {
           appl.meta <- if (inherits(x, "dimRedData")) 
               x@meta
           else data.frame()
           proj <- if (inherits(x, "dimRedData")) 
               x@data
           else x
           if (ncol(proj) != ncol(data@data)) 
               stop("x must have the same number of dimensions ", "as the original data")
           appl.out <- new("dimRedData", data = res$apply(proj), meta = appl.meta)
           dimnames(appl.out@data) <- list(rownames(x), paste0("DRR", seq_len(ncol(appl.out@data))))
           return(appl.out)
       }
       inv <- function(x) {
           appl.meta <- if (inherits(x, "dimRedData")) 
               x@meta
           else data.frame()
           proj <- if (inherits(x, "dimRedData")) 
               x@data
           else x
           if (ncol(proj) > ncol(data@data)) 
               stop("x must have less or equal number of dimensions ", "as the original data")
           inv.out <- new("dimRedData", data = res$inverse(proj), meta = appl.meta)
           dimnames(inv.out@data) <- list(rownames(proj), colnames(data@data))
           return(inv.out)
       }
       return(new("dimRedResult", data = new("dimRedData", data = outdata, meta = meta), 
           org.data = orgdata, apply = appl, inverse = inv, has.org.data = keep.org.data, 
           has.apply = TRUE, has.inverse = TRUE, method = "drr", pars = pars))
   })(data = <S4 object of class structure("dimRedData", package = "dimRed")>, keep.org.data = TRUE, 
       pars = structure(list(ndim = 4L, lambda = c(0, 0.001, 0.01, 0.1, 1, 10, 100), 
           kernel = "rbfdot", kernel.pars = structure(list(sigma = c(0.001, 0.01, 0.1, 
           1, 10, 100, 1000, 10000)), .Names = "sigma"), pca = TRUE, pca.center = TRUE, 
           pca.scale = FALSE, fastcv = FALSE, cv.folds = 5, fastcv.test = NULL, fastkrr.nblocks = 4, 
           verbose = TRUE), .Names = c("ndim", "lambda", "kernel", "kernel.pars", "pca", 
       "pca.center", "pca.scale", "fastcv", "cv.folds", "fastcv.test", "fastkrr.nblocks", 
       "verbose")))
6: do.call(DRR::drr, c(list(X = indata), pars))
7: (function (X, ndim = ncol(X), lambda = c(0, 10^(-3:2)), kernel = "rbfdot", kernel.pars = list(sigma = 10^(-3:4)), 
       pca = TRUE, pca.center = TRUE, pca.scale = FALSE, fastcv = FALSE, cv.folds = 5, 
       fastcv.test = NULL, fastkrr.nblocks = 4, verbose = TRUE) 
   {
       if ((!fastcv) && (cv.folds <= 1)) 
           stop("need more than one fold for crossvalidation")
       if (cv.folds%%1 != 0) 
           stop("cv.folds must be a whole number")
       if (fastkrr.nblocks < 1) 
           stop("fastkrr.nblocks must be at least 1")
       if (fastkrr.nblocks%%1 != 0) 
           stop("fastkrr.nblocks must be a whole number")
       if (!requireNamespace("CVST")) 
           stop("require the 'CVST' package")
       if (!requireNamespace("kernlab")) 
           stop("require 'kernlab' package")
       if (ndim < ncol(X)) 
           warning("ndim < data dimensionality, the inverse functions will be incomplete!")
       if (ndim > ncol(X)) 
           ndim <- ncol(X)
       if (pca) {
           pca <- stats::prcomp(X, center = pca.center, scale. = pca.scale)
           if (!pca.center) 
               pca$center <- rep(0, ncol(X))
           if (!pca.scale) 
               pca$scale <- rep(1, ncol(X))
       }
       else {
           pca <- list()
           pca$x <- X
           pca$rotation <- diag(1, ncol(X), ncol(X))
           pca$center <- rep(0, ncol(X))
           pca$scale <- rep(1, ncol(X))
       }
       alpha <- pca$x
       d <- ndim
       kpars <- kernel.pars
       kpars$kernel <- kernel
       kpars$lambda <- lambda
       kpars$nblocks <- fastkrr.nblocks
       krrl <- constructFastKRRLearner()
       p <- do.call(CVST::constructParams, kpars)
       Y <- matrix(NA_real_, nrow = nrow(X), ncol = d)
       models <- list()
       if (d > 1) 
           for (i in d:2) {
               message(Sys.time(), ": Constructing Axis ", d - i + 1, "/", d)
               data <- CVST::constructData(x = alpha[, 1:(i - 1), drop = FALSE], y = alpha[, 
                   i])
               cat("predictors: ", colnames(alpha)[1:(i - 1)], "dependent: ", colnames(alpha)[i], 
                   "\n")
               res <- if (fastcv) {
                   CVST::fastCV(data, krrl, p, CVST::constructCVSTModel(), test = fastcv.test, 
                     verbose = verbose)
               }
               else {
                   CVST::CV(data, krrl, p, fold = cv.folds, verbose = verbose)
               }
               model <- krrl$learn(data, res[[1]])
               models[[i]] <- model
               Y[, i] <- as.matrix(alpha[, i] - krrl$predict(model, data))
           }
       message(Sys.time(), ": Constructing Axis ", d, "/", d)
       Y[, 1] <- alpha[, 1]
       models[[1]] <- list()
       appl <- function(x) {
           dat <- scale(x, pca$center, pca$scale)
           dat <- dat %*% pca$rotation
           outdat <- matrix(NA_real_, ncol = d, nrow = nrow(x))
           if (d > 1) 
               for (i in d:2) outdat[, i] <- dat[, i] - krrl$predict(models[[i]], CVST::constructData(x = dat[, 
                   1:(i - 1), drop = FALSE], y = NA))
           outdat[, 1] <- dat[, 1]
           return(outdat)
       }
       inv <- function(x) {
           dat <- cbind(x, matrix(0, nrow(x), ncol(X) - ncol(x)))
           outdat <- dat
           if (d > 1) 
               for (i in 2:d) outdat[, i] <- dat[, i] + krrl$predict(models[[i]], CVST::constructData(x = outdat[, 
                   1:(i - 1), drop = FALSE], y = NA))
           outdat <- outdat %*% t(pca$rotation)
           outdat <- sweep(outdat, 2L, pca$scale, "*")
           outdat <- sweep(outdat, 2L, pca$center, "+")
           return(outdat)
       }
       return(list(fitted.data = Y, pca.means = pca$center, pca.scale = pca$scale, pca.rotation = pca$rotation, 
           models = models, apply = appl, inverse = inv))
   })(X = structure(c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 
   5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7, 4.8, 
   5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 
   5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 
   5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 
   5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 
   5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 
   7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 
   7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9, 3.5, 3, 
   3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 
   3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 
   3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 
   2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 
   2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 
   2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 
   3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 
   2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1, 2.7, 3.2, 
   3.3, 3, 2.5, 3, 3.4, 3, 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 
   1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 
   1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 
   1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 
   4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 
   3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 
   4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 
   5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 
   5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 
   5.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 
   0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 
   0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 
   1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 
   1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 
   1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 
   2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 
   1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 
   1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), .Dim = c(150L, 4L
   ), .Dimnames = list(NULL, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"
   ))), ndim = 4L, lambda = c(0, 0.001, 0.01, 0.1, 1, 10, 100), kernel = "rbfdot", kernel.pars = structure(list(
       sigma = c(0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000)), .Names = "sigma"), pca = TRUE, 
       pca.center = TRUE, pca.scale = FALSE, fastcv = FALSE, cv.folds = 5, fastcv.test = NULL, 
       fastkrr.nblocks = 4, verbose = TRUE)
8: krrl$learn(data, res[[1]])
9: krr(data$x[iIndices, ], kernel, data$y[iIndices], params$lambda)
10: solve(Matrix(K + diag(lambda, N)))
11: solve(Matrix(K + diag(lambda, N)))

testthat results ================================================================
OK: 109 SKIPPED: 0 FAILED: 1
1. Error: rmse_by_ndim (@test_quality.R#30) 

Error: testthat unit tests failed
Execution halted
