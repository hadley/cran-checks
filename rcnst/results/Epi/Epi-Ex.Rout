
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Epi"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Epi')

Attaching package: ‘Epi’

The following object is masked from ‘package:base’:

    merge.data.frame

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("B.dk")
> ### * B.dk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: B.dk
> ### Title: Births in Denmark by year and month of birth and sex
> ### Aliases: B.dk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data( B.dk )
> str( B.dk )
'data.frame':	1308 obs. of  4 variables:
 $ year : int  1901 1901 1901 1901 1901 1901 1901 1901 1901 1901 ...
 $ month: int  1 2 3 4 5 6 7 8 9 10 ...
 $ m    : num  2948 2851 3476 3326 3324 ...
 $ f    : num  2786 2695 3284 3143 3141 ...
 - attr(*, "Contents")= chr "Number of births by month in Denmark"
> attach( B.dk )
> # Plot the no of births and the M/F-ratio
> par( las=1, mar=c(4,4,2,4) )
> matplot( year+(month-0.5)/12,
+          cbind( m, f ),
+          bty="n", col=c("blue","red"), lty=1, lwd=1, type="l",
+          ylim=c(0,5000),
+          xlab="Date of birth", ylab="" )
> usr <- par()$usr
> mtext( "Monthly no. births in Denmark", side=3, adj=0, at=usr[1], line=1/1.6 )
> text( usr[1:2] %*% cbind(c(19,1),c(19,1))/20,
+       usr[3:4] %*% cbind(c(1,19),c(2,18))/20, c("Boys","Girls"), col=c("blue","red"), adj=0 ) 
> lines( year+(month-0.5)/12, (m/(m+f)-0.5)*30000, lwd=1 )
> axis( side=4, at=(seq(0.505,0.525,0.005)-0.5)*30000, labels=c("","","","",""), tcl=-0.3 )
> axis( side=4, at=(50:53/100-0.5)*30000, labels=50:53, tcl=-0.5 )
> axis( side=4, at=(0.54-0.5)*30000, labels="% boys", tick=FALSE, mgp=c(3,0.1,0) )
> abline( v=1920, col=gray(0.8) )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘B.dk’

> nameEx("DMconv")
> ### * DMconv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DMconv
> ### Title: Conversion to diabetes
> ### Aliases: DMconv
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(DMconv)
> str(DMconv)
'data.frame':	1519 obs. of  6 variables:
 $ id  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ doe : Date, format: "2003-06-12" "2002-06-28" ...
 $ dlw : Date, format: "2007-01-12" "2006-05-10" ...
 $ dfi : Date, format: NA NA ...
 $ gtol: Factor w/ 2 levels "IFG","IGT": 2 1 1 2 2 1 2 2 2 1 ...
 $ grp : Factor w/ 2 levels "Intervention",..: 2 1 1 1 1 2 2 1 2 1 ...
> head(DMconv)
  id        doe        dlw  dfi gtol          grp
1  1 2003-06-12 2007-01-12 <NA>  IGT      Control
2  2 2002-06-28 2006-05-10 <NA>  IFG Intervention
3  3 2001-09-03 2005-10-02 <NA>  IFG Intervention
4  4 2002-06-03 2006-01-02 <NA>  IGT Intervention
5  5 2000-11-27 2005-08-16 <NA>  IGT Intervention
6  6 2001-08-31 2005-07-08 <NA>  IFG      Control
> 
> 
> 
> cleanEx()
> nameEx("DMepi")
> ### * DMepi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DMepi
> ### Title: Epidmiological rates for diabetes in Denmark 1996-2015
> ### Aliases: DMepi
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(DMepi)
> # Total deaths and person-years in the Danish population
> ftable( addmargins( xtabs( cbind( Deaths=D.nD+D.DM,
+                                     PYrs=Y.nD+Y.DM ) ~ P + sex,
+                            data=DMepi ),
+                     2 ),
+         row.vars = 1 )
     sex       M               F             Sum        
          Deaths    PYrs  Deaths    PYrs  Deaths    PYrs
P                                                       
1996       29852 2599602   30072 2663778   59924 5263380
1997       29274 2610859   30002 2673538   59276 5284398
1998       28731 2620413   29172 2682142   57903 5302555
1999       28650 2629031   30116 2689733   58766 5318764
2000       27869 2638323   29231 2698115   57100 5336438
2001       28159 2648869   29578 2707204   57737 5356073
2002       28106 2658664   29894 2715643   58000 5374308
2003       28013 2666589   29125 2721777   57138 5388366
2004       27187 2673810   27842 2728275   55029 5402085
2005       26547 2682147   27782 2735473   54329 5417621
2006       26987 2692505   27855 2744163   54842 5436668
2007       26888 2706495   28245 2755328   55133 5461824
2008       26504 2725356   27195 2771031   53699 5496387
2009       26697 2743385   27493 2787327   54190 5530712
2010       26477 2758941   27046 2802004   53523 5560945
2011       25761 2774590   26143 2816048   51904 5590639
2012       25560 2789982   25860 2828609   51420 5618591
2013       25813 2806346   25733 2842442   51546 5648788
2014       25408 2827869   25143 2859734   50551 5687603
2015       25828 2832162   25547 2856296   51375 5688459
> # Deaths and person-years in the population of diabetes patients
> round(
+ ftable( addmargins( xtabs( cbind( Deaths=D.DM,
+                                     PYrs=Y.DM ) ~ P + sex,
+                            data=DMepi ),
+                     2 ),
+         row.vars = 1 ) )
     sex      M             F           Sum       
         Deaths   PYrs Deaths   PYrs Deaths   PYrs
P                                                 
1996       2958  47789   2661  43025   5619  90814
1997       3069  51223   2728  45520   5797  96743
1998       3124  54920   2765  48237   5889 103158
1999       3415  58725   2873  50976   6288 109701
2000       3406  62791   2971  53927   6377 116717
2001       3504  66845   3045  56871   6549 123717
2002       3747  70815   3110  59848   6857 130663
2003       3872  75133   3253  62949   7125 138082
2004       3871  80158   3124  66811   6995 146969
2005       3947  85083   3323  70570   7270 155653
2006       4124  90126   3424  74431   7548 164557
2007       4242  95272   3566  78479   7808 173752
2008       4280 101316   3484  83325   7764 184641
2009       4763 107637   3710  88124   8473 195761
2010       4788 114590   3884  93337   8672 207927
2011       4928 122766   3802  99759   8730 222524
2012       5141 130855   3837 106525   8978 237380
2013       5290 136249   3981 111039   9271 247288
2014       5470 139869   4063 113931   9533 253800
2015       5532 142459   4271 115710   9803 258170
> 
> 
> 
> cleanEx()
> nameEx("DMlate")
> ### * DMlate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DMlate
> ### Title: The Danish National Diabetes Register.
> ### Aliases: DMlate DMrand
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(DMlate)
> str(DMlate)
'data.frame':	10000 obs. of  7 variables:
 $ sex  : Factor w/ 2 levels "M","F": 2 1 2 2 1 2 1 1 2 1 ...
 $ dobth: num  1940 1939 1918 1965 1933 ...
 $ dodm : num  1999 2003 2005 2009 2009 ...
 $ dodth: num  NA NA NA NA NA ...
 $ dooad: num  NA 2007 NA NA NA ...
 $ doins: num  NA NA NA NA NA NA NA NA NA NA ...
 $ dox  : num  2010 2010 2010 2010 2010 ...
> dml <- Lexis( entry=list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit=list(Per=dox),
+         exit.status=factor(!is.na(dodth),labels=c("DM","Dead")),
+                data=DMlate )
NOTE: entry.status has been set to "DM" for all.
Warning in Lexis(entry = list(Per = dodm, Age = dodm - dobth, DMdur = 0),  :
  Dropping 4 rows with duration of follow up < tol

> 
> # Cut the follow-up at insulin start, and introduce a new timescale,
> # and split non-precursor states
> system.time(
+ dmi <- cutLexis( dml, cut = dml$doins,
+                       pre = "DM",
+                 new.state = "Ins",
+                 new.scale = "t.Ins",
+              split.states = TRUE ) )
   user  system elapsed 
  2.960   0.052   3.012 
> summary( dmi )
     
Transitions:
     To
From    DM  Ins Dead Dead(Ins)  Records:  Events: Risk time:  Persons:
  DM  6157 1694 2048         0      9899     3742   45885.49      9899
  Ins    0 1340    0       451      1791      451    8387.77      1791
  Sum 6157 3034 2048       451     11690     4193   54273.27      9996
> 
> 
> 
> cleanEx()
> nameEx("Icens")
> ### * Icens
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Icens
> ### Title: Fits a regression model to interval censored data.
> ### Aliases: Icens print.Icens
> ### Keywords: models regression survival
> 
> ### ** Examples
> 
> data( hivDK )
> # Convert the dates to fractional years so that rates are
> # expressed in cases per year
> for( i in 2:4 ) hivDK[,i] <- cal.yr( hivDK[,i] )
> 
> m.RR <- Icens( entry, well, ill,
+                model="MRR", formula=~pyr+us, breaks=seq(1980,1990,5),
+                data=hivDK)
> # Currently the MRR model returns a list with 2 glm objects.
> round( ci.lin( m.RR$rates ), 4 )
              Estimate StdErr      z      P   2.5%  97.5%
`(1980,1985)`   0.0495 0.0067 7.3858 0.0000 0.0364 0.0627
`(1985,1990)`   0.0076 0.0033 2.3099 0.0209 0.0011 0.0140
> round( ci.lin( m.RR$cov, Exp=TRUE ), 4 )
    Estimate StdErr      z      P exp(Est.)   2.5%  97.5%
pyr   0.0111 0.0041 2.7089 0.0068    1.0111 1.0031 1.0193
us    0.5070 0.2227 2.2763 0.0228    1.6603 1.0730 2.5691
> # There is actually a print method:
> print( m.RR )
              Estimate StdErr      z      P     RR   2.5%  97.5%
`(1980,1985)`   0.0495 0.0067 7.3858 0.0000     NA 0.0364 0.0627
`(1985,1990)`   0.0076 0.0033 2.3099 0.0209     NA 0.0011 0.0140
pyr             0.0111 0.0041 2.7089 0.0068 1.0111 1.0031 1.0193
us              0.5070 0.2227 2.2763 0.0228 1.6603 1.0730 2.5691
> 
> m.ER <- Icens( entry, well, ill,
+                model="AER", formula=~pyr+us, breaks=seq(1980,1990,5),
+                data=hivDK)
> # There is actually a print method:
> print( m.ER )
              Estimate StdErr      z      P    2.5%  97.5%
`(1980,1985)`   0.0534 0.0104 5.1125 0.0000  0.0329 0.0738
`(1985,1990)`   0.0059 0.0053 1.1146 0.2650 -0.0045 0.0163
pyr             0.0009 0.0004 2.2337 0.0255  0.0001 0.0017
us              0.0086 0.0121 0.7074 0.4793 -0.0152 0.0324
>   
> 
> 
> cleanEx()
> nameEx("LCa.fit")
> ### * LCa.fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LCa.fit
> ### Title: Fit Lee-Carter-type models for rates to arbitrarily shaped
> ###   observations of rates in a Lexis diagram.
> ### Aliases: LCa.fit print.LCa summary.LCa plot.LCa predict.LCa
> ### Keywords: models regression
> 
> ### ** Examples
> 
> library( Epi )
> # Load the testis cancer data by Lexis triangles
> data( testisDK )
> tc <- subset( testisDK, A>14 & A<60 )
> head( tc )
    A    P D        Y
16 15 1943 0 31188.00
17 16 1943 0 31654.33
18 17 1943 0 32084.33
19 18 1943 0 32681.67
20 19 1943 0 33005.67
21 20 1943 0 33302.67
> 
> # We want to see rates per 100,000 PY
> tc$Y <- tc$Y / 10^5
> 
> # Fit the Lee-Carter model with age-period interaction (default)
> LCa.tc <- LCa.fit( tc, model="ACa", a.ref=30, p.ref=1980, quiet=FALSE, eps=10e-4, maxit=50 )
    Deviances: model(AT) model(A) Rel. diff.
Iteration   1  2665.636 2671.511 0.0060852 
Iteration   2  2657.462 2661.084 0.0039186 
Iteration   3  2652.008 2654.469 0.0024920 
Iteration   4  2648.234 2649.949 0.0017056 
Iteration   5  2645.593 2646.796 0.0011913 
Iteration   6  2643.741 2644.584 0.0008361 
LCa.fit convergence in  6  iterations, deviance: 2644.584 on 2414 d.f.
...using 14.2 seconds.
...computing Hessian by numerical differentiation...
...done - in 1.4 seconds.
> 
> LCa.tc
ACa: Lee-Carter model with natural splines:
  log(Rate) = ax(Age) + ci(Age)kc(Coh)
with 6, 5 and 5 parameters respectively.
Deviance: 2644.584 on 2414 d.f.
> summary( LCa.tc )
ACa: Lee-Carter model with natural splines:
  log(Rate) = ax(Age) + ci(Age)kc(Coh)
with 6, 5 and 5 parameters respectively.
Deviance: 2644.584 on 2414 d.f.

Knots used:
a.kn 
 8% 25% 42% 58% 75% 92% 
 22  27  32  36  41  50 
ci.kn 
 8% 25% 42% 58% 75% 92% 
 22  27  32  36  41  50 
c.kn 
  8%  25%  42%  58%  75%  92% 
1914 1930 1940 1948 1956 1965 
> 
> # Inspect what we got
> names( LCa.tc )
 [1] "model"       "ax"          "ci"          "kc"          "mod.at"     
 [6] "mod.b"       "coef"        "vcov"        "knots"       "refs"       
[11] "deviance"    "df.residual" "iter"       
> 
> # show the estimated effects
> par( mfrow=c(1,3) )
> plot( LCa.tc )
> 
> # Prediction data frame for ages 15 to 60 for three time points: 
> nd <- data.frame( A=15:60 )
> 
> p50 <- predict.LCa( LCa.tc, newdata=cbind(nd,P=1950), sim=10000 )
> p70 <- predict.LCa( LCa.tc, newdata=cbind(nd,P=1970), sim=10000 )
> p90 <- predict.LCa( LCa.tc, newdata=cbind(nd,P=1990), sim=10000 )
> 
> # Inspect the curves from the parametric bootstrap (simulation):
> par( mfrow=c(1,1) )
> matplot( nd$A, cbind(p50,p70,p90), type="l", lwd=c(6,3,3), lty=1,
+          col=rep( c("red","green","blue"), each=3 ), log="y",
+          ylab="Testis cancer incidence per 100,000 PY, 1970, 80, 90", xlab="Age" )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("Lexis")
> ### * Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lexis
> ### Title: Create a Lexis object
> ### Aliases: Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> # A small bogus cohort
> xcoh <- structure( list( id = c("A", "B", "C"),
+                       birth = c("14/07/1952", "01/04/1954", "10/06/1987"),
+                       entry = c("04/08/1965", "08/09/1972", "23/12/1991"),
+                        exit = c("27/06/1997", "23/05/1995", "24/07/1998"),
+                        fail = c(1, 0, 1) ),
+                      .Names = c("id", "birth", "entry", "exit", "fail"),
+                   row.names = c("1", "2", "3"),
+                       class = "data.frame" )
> 
> # Convert the character dates into numerical variables (fractional years)
> xcoh <- cal.yr( xcoh, format="%d/%m/%Y", wh=2:4 )
> # See how it looks
> xcoh
  id    birth    entry     exit fail
1  A 1952.533 1965.589 1997.485    1
2  B 1954.246 1972.686 1995.388    0
3  C 1987.437 1991.974 1998.559    1
> str( xcoh )
'data.frame':	3 obs. of  5 variables:
 $ id   : chr  "A" "B" "C"
 $ birth:Classes 'cal.yr', 'numeric'  num [1:3] 1953 1954 1987
 $ entry:Classes 'cal.yr', 'numeric'  num [1:3] 1966 1973 1992
 $ exit :Classes 'cal.yr', 'numeric'  num [1:3] 1997 1995 1999
 $ fail : num  1 0 1
> 
> # Define as Lexis object with timescales calendar time and age
> Lcoh <- Lexis( entry = list( per=entry ),
+                 exit = list( per=exit, age=exit-birth ),
+          exit.status = fail,
+                 data = xcoh )
> Lcoh
       per       age   lex.dur lex.Cst lex.Xst lex.id id    birth    entry
1 1965.589 13.056810 31.895962       0       1      1  A 1952.533 1965.589
2 1972.686 18.439425 22.702259       0       0      2  B 1954.246 1972.686
3 1991.974  4.536619  6.584531       0       1      3  C 1987.437 1991.974
      exit fail
1 1997.485    1
2 1995.388    0
3 1998.559    1
> 
> # Using character states may have undesired effects:
> xcoh$Fail <- c("Dead","Well","Dead")
> Lexis( entry = list( per=entry ),
+         exit = list( per=exit, age=exit-birth ),
+  exit.status = Fail,
+         data = xcoh )
NOTE: entry.status has been set to "Dead" for all.
       per       age   lex.dur lex.Cst lex.Xst lex.id id    birth    entry
1 1965.589 13.056810 31.895962    Dead    Dead      1  A 1952.533 1965.589
2 1972.686 18.439425 22.702259    Dead    Well      2  B 1954.246 1972.686
3 1991.974  4.536619  6.584531    Dead    Dead      3  C 1987.437 1991.974
      exit fail Fail
1 1997.485    1 Dead
2 1995.388    0 Well
3 1998.559    1 Dead
> 
> # ...unless you order the levels correctly
> ( xcoh$Fail <- factor( xcoh$Fail, levels=c("Well","Dead") ) )
[1] Dead Well Dead
Levels: Well Dead
> Lexis( entry = list( per=entry ),
+         exit = list( per=exit, age=exit-birth ),
+  exit.status = Fail,
+         data = xcoh )
NOTE: entry.status has been set to "Well" for all.
       per       age   lex.dur lex.Cst lex.Xst lex.id id    birth    entry
1 1965.589 13.056810 31.895962    Well    Dead      1  A 1952.533 1965.589
2 1972.686 18.439425 22.702259    Well    Well      2  B 1954.246 1972.686
3 1991.974  4.536619  6.584531    Well    Dead      3  C 1987.437 1991.974
      exit fail Fail
1 1997.485    1 Dead
2 1995.388    0 Well
3 1998.559    1 Dead
> 
> 
> 
> cleanEx()
> nameEx("Lexis.diagram")
> ### * Lexis.diagram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lexis.diagram
> ### Title: Plot a Lexis diagram
> ### Aliases: Lexis.diagram
> ### Keywords: hplot dplot
> 
> ### ** Examples
> 
> Lexis.diagram( entry.age = c(3,30,45),
+                risk.time = c(25,5,14),
+               birth.date = c(1970,1931,1925.7),
+                     fail = c(TRUE,TRUE,FALSE) )
> LL <- Lexis.diagram( entry.age = sample( 0:50, 17, replace=TRUE ),
+                      risk.time = sample( 5:40, 17, r=TRUE),
+                     birth.date = sample( 1910:1980, 17, r=TRUE ),
+           		  fail = sample( 0:1, 17, r=TRUE ), 
+ 	              cex.fail = 1.1,
+ 	              lwd.life = 2 )
> # Identify the persons' entry and exits
> text( LL$exit.date, LL$exit.age, paste(1:nrow(LL)), col="red", font=2, adj=c(0,1) )
> text( LL$entry.date, LL$entry.age, paste(1:nrow(LL)), col="blue", font=2, adj=c(1,0) )
> data( nickel )
> attach( nickel )
> LL <- Lexis.diagram( age=c(10,100), date=c(1900,1990), 
+ 	             entry.age=age1st, exit.age=ageout, birth.date=dob, 
+ 		     fail=(icd %in% c(162,163)), lwd.life=1,
+ 		     cex.fail=0.8, col.fail=c("green","red") )
> abline( v=1934, col="blue" )
> nickel[1:10,]
   id icd exposure      dob  age1st   agein  ageout
1   3   0      5.0 1889.019 17.4808 45.2273 92.9808
2   4 162      5.0 1885.978 23.1864 48.2684 63.2712
3   6 163     10.0 1881.255 25.2452 52.9917 54.1644
4   8 527      9.0 1886.340 24.7206 47.9067 69.6794
5   9 150      0.0 1879.500 29.9575 54.7465 76.8442
6  10 163      2.0 1889.915 21.2877 44.3314 62.5413
7  15 334      0.0 1890.500 23.2836 43.7465 62.0000
8  16 160      0.5 1874.332 50.3569 59.9149 65.5835
9  17 420      0.0 1909.500 15.4618 34.7465 50.5137
10 18  12      0.0 1892.500 24.1394 51.7465 57.5931
> LL[1:10,]
   entry.date entry.age exit.date exit.age birth.date risk.time  fail
1    1906.500   17.4808  1982.000  92.9808   1889.019   75.5000 FALSE
2    1909.164   23.1864  1949.249  63.2712   1885.978   40.0848  TRUE
3    1906.500   25.2452  1935.419  54.1644   1881.255   28.9192  TRUE
4    1911.060   24.7206  1956.019  69.6794   1886.340   44.9588 FALSE
5    1909.457   29.9575  1956.344  76.8442   1879.500   46.8867 FALSE
6    1911.203   21.2877  1952.456  62.5413   1889.915   41.2536  TRUE
7    1913.784   23.2836  1952.500  62.0000   1890.500   38.7164 FALSE
8    1924.688   50.3569  1939.915  65.5835   1874.332   15.2266 FALSE
9    1924.962   15.4618  1960.014  50.5137   1909.500   35.0519 FALSE
10   1916.639   24.1394  1950.093  57.5931   1892.500   33.4537 FALSE
> 
> 
> 
> cleanEx()

detaching ‘nickel’

> nameEx("Lexis.lines")
> ### * Lexis.lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lexis.lines
> ### Title: Draw life lines in a Lexis diagram.
> ### Aliases: Lexis.lines
> ### Keywords: hplot dplot
> 
> ### ** Examples
> 
> Lexis.diagram( entry.age = c(3,30,45),
+                risk.time = c(25,5,14),
+               birth.date = c(1970,1931,1925.7),
+                     fail = c(TRUE,TRUE,FALSE) )
> Lexis.lines( entry.age = sample( 0:50, 100, replace=TRUE ),
+              risk.time = sample( 5:40, 100, r=TRUE),
+             birth.date = sample( 1910:1980, 100, r=TRUE ),
+                   fail = sample(0:1,100,r=TRUE),
+               cex.fail = 0.5,
+               lwd.life = 1 )
> 
> 
> 
> cleanEx()
> nameEx("Life.lines")
> ### * Life.lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Life.lines
> ### Title: Compute dates/ages for life lines in a Lexis diagram
> ### Aliases: Life.lines
> ### Keywords: manip dplot
> 
> ### ** Examples
> 
> ( Life.lines( entry.age = c(3,30,45),
+               risk.time = c(25,5,14),
+              birth.date = c(1970,1931,1925.7) ) )
  entry.date entry.age exit.date exit.age birth.date risk.time
1     1973.0         3    1998.0       28     1970.0        25
2     1961.0        30    1966.0       35     1931.0         5
3     1970.7        45    1984.7       59     1925.7        14
> 
> # Draw a Lexis diagram
> Lexis.diagram()
> 
> # Compute entry and exit age and date.
> ( LL <-  Life.lines( entry.age = c(3,30,45),
+                      risk.time = c(25,5,14),
+                     birth.date = c(1970,1931,1925.7) ) )
  entry.date entry.age exit.date exit.age birth.date risk.time
1     1973.0         3    1998.0       28     1970.0        25
2     1961.0        30    1966.0       35     1931.0         5
3     1970.7        45    1984.7       59     1925.7        14
> segments( LL[,1], LL[,2], LL[,3], LL[,4] ) # Plot the life lines.
> 
> # Compute entry and exit age and date, supplying a date variable
> bd <- ( c(1970,1931,1925.7) - 1970 ) * 365.25
> class( bd ) <- "Date"
> ( Life.lines( entry.age = c(3,30,45),
+               risk.time = c(25,5,14),
+              birth.date = bd ) )
  entry.date entry.age  exit.date  exit.age birth.date risk.time
1 1972-12-31  1095.75  1998-01-01 10227.00  1970-01-01  9131.25 
2 1961-01-04 10957.50  1966-01-04 12783.75  1931-01-05  1826.25 
3 1970-09-18 16436.25  1984-09-17 21549.75  1925-09-17  5113.50 
> 
> 
> 
> cleanEx()
> nameEx("M.dk")
> ### * M.dk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: M.dk
> ### Title: Mortality in Denmark 1974 ff.
> ### Aliases: M.dk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(M.dk)
> str(M.dk)
'data.frame':	7800 obs. of  6 variables:
 $ A   : num  0 0 0 0 0 0 0 0 0 0 ...
 $ sex : num  1 2 1 2 1 2 1 2 1 2 ...
 $ P   : num  1974 1974 1975 1975 1976 ...
 $ D   : num  459 303 435 311 405 258 332 205 312 233 ...
 $ Y   : num  35963 34383 36099 34652 34965 ...
 $ rate: num  12.76 8.81 12.05 8.97 11.58 ...
 - attr(*, "Contents")= chr "Number of deaths and risk time in Denmark"
> 
> zz <- xtabs( rate ~ sex+A+P, data=M.dk )
> zz[zz==0] <- NA # 0s makes log-scale plots crash
> par(mfrow=c(1,2), mar=c(0,0,0,0), oma=c(3,3,1,1), mgp=c(3,1,0)/1.6 )
> for( i in 1:2 )
+ {
+ matplot( dimnames(zz)[[2]], zz[i,,],
+          lty=1, lwd=1, col=rev(heat.colors(37)),
+          log="y", type="l", ylim=range(zz,na.rm=TRUE),
+          ylab="", xlab="", yaxt="n" )
+ text( 0, max(zz,na.rm=TRUE), c("M","F")[i], font=2, adj=0:1, cex=2, col="gray" )
+ if( i==1 ) axis( side=2, las=1 )
+ }
> mtext( side=1, "Age", line=2, outer=TRUE )
> mtext( side=2, "Mortality rate", line=2, outer=TRUE )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("N.dk")
> ### * N.dk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: N.dk
> ### Title: Population size in Denmark
> ### Aliases: N.dk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(N.dk)
> str(N.dk)
'data.frame':	8600 obs. of  4 variables:
 $ sex: num  1 2 1 2 1 2 1 2 1 2 ...
 $ A  : num  0 0 1 1 2 2 3 3 4 4 ...
 $ P  : num  1971 1971 1971 1971 1971 ...
 $ N  : num  35839 34108 36302 34153 37855 ...
 - attr(*, "Contents")= chr "Population size as of 1 January in Denmark"
> with(N.dk,addmargins(tapply(N,list(P,sex),sum),2))
           1       2     Sum
1971 2459880 2490844 4950724
1972 2470257 2505518 4975775
1973 2484869 2522780 5007649
1974 2498227 2538075 5036302
1975 2504278 2550248 5054526
1976 2506903 2558526 5065429
1977 2512888 2567113 5080001
1978 2519900 2577178 5097078
1979 2525645 2586011 5111656
1980 2529111 2593078 5122189
1981 2528285 2595833 5124118
1982 2523888 2595397 5119285
1983 2521280 2595311 5116591
1984 2518002 2594253 5112255
1985 2517131 2594096 5111227
1986 2520624 2595769 5116393
1987 2526079 2598836 5124915
1988 2528051 2601317 5129368
1989 2528219 2601673 5129892
1990 2530653 2604872 5135525
1991 2536442 2610138 5146580
1992 2544511 2617733 5162244
1993 2554650 2626078 5180728
1994 2563497 2633256 5196753
1995 2573379 2642452 5215831
1996 2592277 2658860 5251137
1997 2604982 2670233 5275215
1998 2615716 2679242 5294958
1999 2625470 2688210 5313680
2000 2634169 2695950 5330119
2001 2644369 2704945 5349314
2002 2654198 2714262 5368460
2003 2662423 2721084 5383507
2004 2670135 2727505 5397640
2005 2677292 2734113 5411405
2006 2685846 2741613 5427459
2007 2696662 2750422 5447084
2008 2712666 2763125 5475791
2009 2732020 2779431 5511451
2010 2743286 2791452 5534738
2011 2756582 2804046 5560628
2012 2766776 2813740 5580516
2013 2778852 2823776 5602628
> with(subset(N.dk,P==max(P)),addmargins(tapply(N,list(A,sex),sum)))
          1       2     Sum
0     29991   28255   58246
1     30402   29316   59718
2     33032   31390   64422
3     32921   31085   64006
4     34325   32239   66564
5     33629   32014   65643
6     34197   32437   66634
7     33446   32230   65676
8     33628   32173   65801
9     33695   32071   65766
10    33498   31669   65167
11    33797   32476   66273
12    34841   33387   68228
13    34455   33094   67549
14    34863   33040   67903
15    35710   33883   69593
16    36099   34179   70278
17    37455   35379   72834
18    37572   35919   73491
19    36981   35047   72028
20    37928   36018   73946
21    36674   35457   72131
22    36904   35693   72597
23    36187   35150   71337
24    35357   34257   69614
25    34078   32926   67004
26    33753   32701   66454
27    32718   32152   64870
28    31548   31056   62604
29    30650   30640   61290
30    31684   30969   62653
31    31250   31121   62371
32    33162   33060   66222
33    33751   33648   67399
34    34842   34576   69418
35    34598   34498   69096
36    36142   35679   71821
37    38717   39081   77798
38    38288   38333   76621
39    38383   38252   76635
40    39925   39996   79921
41    39916   39131   79047
42    38172   37693   75865
43    38172   37366   75538
44    39665   38507   78172
45    42267   41341   83608
46    45376   44261   89637
47    43814   42912   86726
48    42961   41671   84632
49    41768   40980   82748
50    39383   38708   78091
51    38174   37645   75819
52    38105   37500   75605
53    36328   36056   72384
54    36344   36127   72471
55    35939   35761   71700
56    36002   35963   71965
57    35446   35260   70706
58    34255   34805   69060
59    34821   35129   69950
60    33880   34380   68260
61    33298   33484   66782
62    33688   34725   68413
63    33238   34308   67546
64    34812   35668   70480
65    36693   37607   74300
66    37621   38275   75896
67    35774   36581   72355
68    33179   34665   67844
69    29795   31845   61640
70    27667   29417   57084
71    23947   25976   49923
72    22713   25017   47730
73    21019   23319   44338
74    20088   22831   42919
75    18412   21758   40170
76    17154   20165   37319
77    15525   18786   34311
78    14230   17761   31991
79    12849   16449   29298
80    11614   15687   27301
81    10685   14639   25324
82     9746   13779   23525
83     8813   12860   21673
84     8058   12289   20347
85     6796   11234   18030
86     6134   10557   16691
87     5144    9660   14804
88     4339    8801   13140
89     3456    7760   11216
90     2727    6324    9051
91     2298    5832    8130
92     1780    4960    6740
93     1164    3388    4552
94      873    2723    3596
95      544    2072    2616
96      406    1595    2001
97      261    1093    1354
98      178     804     982
99      270    1340    1610
Sum 2778852 2823776 5602628
> 
> 
> 
> cleanEx()
> nameEx("N2Y")
> ### * N2Y
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: N2Y
> ### Title: Create risk time ("Person-Years") in Lexis triangles from
> ###   population count data.
> ### Aliases: N2Y
> ### Keywords: Data
> 
> ### ** Examples
> 
> # Danish population at 1 Jan each year by sex and age
> data( N.dk )
> # An illustrative subset
> ( Nx <- subset( N.dk, sex==1 & A<5 & P<1975 ) )
    sex A    P     N
1     1 0 1971 35839
3     1 1 1971 36302
5     1 2 1971 37855
7     1 3 1971 40920
9     1 4 1971 44452
201   1 0 1972 38390
203   1 1 1972 35987
205   1 2 1972 36385
207   1 3 1972 37896
209   1 4 1972 40958
401   1 0 1973 38186
403   1 1 1973 38435
405   1 2 1973 36056
407   1 3 1973 36428
409   1 4 1973 37912
601   1 0 1974 36196
603   1 1 1974 38239
605   1 2 1974 38437
607   1 3 1974 36121
609   1 4 1974 36501
> # Show the data in tabular form
> xtabs( N ~ A + P, data=Nx )
   P
A    1971  1972  1973  1974
  0 35839 38390 38186 36196
  1 36302 35987 38435 38239
  2 37855 36385 36056 38437
  3 40920 37896 36428 36121
  4 44452 40958 37912 36501
> # Lexis triangles as data frame
> Nt <- N2Y( data=Nx, return.dfr=TRUE )
> xtabs( Y ~ round(A,2) + round(P,2), data=Nt )
           round(P, 2)
round(A, 2)  1971.33  1971.67  1972.33  1972.67  1973.33  1973.67
       0.33     0.00 19170.33     0.00 19085.50     0.00 18089.17
       0.67 17944.17     0.00 19202.50     0.00 19101.83     0.00
       1.33     0.00 17968.83     0.00 19210.00     0.00 19110.67
       1.67 18164.83     0.00 18005.00     0.00 19217.83     0.00
       2.33     0.00 18178.67     0.00 18016.50     0.00 19218.17
       2.67 18934.33     0.00 18199.67     0.00 18038.83     0.00
       3.33     0.00 18941.17     0.00 18206.83     0.00 18049.67
       3.67 20466.33     0.00 18950.67     0.00 18226.17     0.00
> # Lexis triangles as a 3-dim array
> ftable( N2Y( data=Nx, return.dfr=FALSE ) )
       wh       lo       up
A P                        
0 1971    19170.33 17944.17
  1972    19085.50 19202.50
  1973    18089.17 19101.83
1 1971    17968.83 18164.83
  1972    19210.00 18005.00
  1973    19110.67 19217.83
2 1971    18178.67 18934.33
  1972    18016.50 18199.67
  1973    19218.17 18038.83
3 1971    18941.17 20466.33
  1972    18206.83 18950.67
  1973    18049.67 18226.17
> 
> # Calculation of PY for persons born 1970 in 1972
> ( N.1.1972 <- subset( Nx, A==1 & P==1972)$N )
[1] 35987
> ( N.2.1973 <- subset( Nx, A==2 & P==1973)$N )
[1] 36056
> N.1.1972/3 + N.2.1973/6
[1] 18005
> N.1.1972/6 + N.2.1973/3
[1] 18016.5
> # These number can be found in the following plot:
> 
> # Blue numbers are population size at 1 January
> # Red numbers are the computed person-years in Lexis triangles:
> Lexis.diagram(age=c(0,4), date=c(1970,1975), int=1, coh.grid=TRUE )
> with( Nx, text(P,A+0.5,paste(N),srt=90,col="blue") )
> with( Nt, text(P,A,formatC(Y,format="f",digits=1),col="red") )
> text( 1970.5, 2, "Population count 1 January", srt=90, col="blue")
> text( 1974.5, 2, "Person-\nyears", col="red")
> 
> 
> 
> cleanEx()
> nameEx("NArray")
> ### * NArray
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NArray
> ### Title: Set up an array of NAs, solely from the list of dimnames
> ### Aliases: NArray ZArray
> 
> ### ** Examples
> 
> ftable(
+ NArray( list(Aye = c("Yes", "Si", "Oui"),
+              Bee = c("Hum", "Buzz"),
+              Sea = c("White", "Black", "Red", "Dead") ) ) )
         Sea White Black Red Dead
Aye Bee                          
Yes Hum         NA    NA  NA   NA
    Buzz        NA    NA  NA   NA
Si  Hum         NA    NA  NA   NA
    Buzz        NA    NA  NA   NA
Oui Hum         NA    NA  NA   NA
    Buzz        NA    NA  NA   NA
> 
> 
> 
> cleanEx()
> nameEx("Ns")
> ### * Ns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ns
> ### Title: Natural splines - (cubic splines linear beyond outermost knots)
> ###   with convenient specification of knots and possibility of centering,
> ###   detrending and clamping.
> ### Aliases: Ns
> ### Keywords: regression
> 
> ### ** Examples
> 
> require(splines)
Loading required package: splines
> require(stats)
> require(graphics)
> 
> ns( women$height, df = 3)
                1         2           3
 [1,]  0.00000000 0.0000000  0.00000000
 [2,] -0.05197694 0.1608506 -0.10723376
 [3,] -0.08982745 0.3088409 -0.20589396
 [4,] -0.09942509 0.4311106 -0.28740704
 [5,] -0.06664345 0.5147991 -0.34319943
 [6,]  0.02233265 0.5472513 -0.36477348
 [7,]  0.16264169 0.5281099 -0.34818600
 [8,]  0.32047336 0.4760799 -0.29655328
 [9,]  0.45952712 0.4115061 -0.21359882
[10,]  0.54350243 0.3547332 -0.10304615
[11,]  0.53898640 0.3247318  0.03132556
[12,]  0.44613489 0.3244962  0.18509047
[13,]  0.28676105 0.3467139  0.35340549
[14,]  0.08303901 0.3839005  0.53142058
[15,] -0.14285714 0.4285714  0.71428571
attr(,"degree")
[1] 3
attr(,"knots")
33.33333% 66.66667% 
 62.66667  67.33333 
attr(,"Boundary.knots")
[1] 58 72
attr(,"intercept")
[1] FALSE
attr(,"class")
[1] "ns"     "basis"  "matrix"
> Ns( women$height, knots=c(63,59,71,67) )
                1          2          3
 [1,]  0.06338657 -0.1901597  0.1267731
 [2,]  0.00000000  0.0000000  0.0000000
 [3,] -0.05964786  0.1867561 -0.1245041
 [4,] -0.09686347  0.3530904 -0.2353936
 [5,] -0.08921458  0.4785813 -0.3190542
 [6,] -0.01426895  0.5428068 -0.3618712
 [7,]  0.13705966  0.5341335 -0.3534848
 [8,]  0.32047336  0.4760799 -0.2965533
 [9,]  0.47832824  0.4009528 -0.1969894
[10,]  0.55298038  0.3410589 -0.0607059
[11,]  0.50226181  0.3213396  0.1060861
[12,]  0.34590826  0.3372752  0.2959832
[13,]  0.11913139  0.3769808  0.5012836
[14,] -0.14285714  0.4285714  0.7142857
[15,] -0.41071429  0.4821429  0.9285714
attr(,"degree")
[1] 3
attr(,"knots")
[1] 63 67
attr(,"Boundary.knots")
[1] 59 71
attr(,"intercept")
[1] FALSE
attr(,"class")
[1] "cns"    "basis"  "matrix"
> 
> # Gives the same results as ns:
> summary( lm(weight ~ ns(height, df = 3), data = women) )

Call:
lm(formula = weight ~ ns(height, df = 3), data = women)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.51981 -0.12010 -0.04552  0.06539  0.54253 

Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)         114.5595     0.2455  466.57  < 2e-16 ***
ns(height, df = 3)1  23.8732     0.3439   69.41 6.89e-16 ***
ns(height, df = 3)2  53.0416     0.6170   85.96  < 2e-16 ***
ns(height, df = 3)3  41.6637     0.2619  159.09  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.321 on 11 degrees of freedom
Multiple R-squared:  0.9997,	Adjusted R-squared:  0.9996 
F-statistic: 1.087e+04 on 3 and 11 DF,  p-value: < 2.2e-16

> summary( lm(weight ~ Ns(height, df = 3), data = women) )

Call:
lm(formula = weight ~ Ns(height, df = 3), data = women)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.51981 -0.12010 -0.04552  0.06539  0.54253 

Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)         114.5595     0.2455  466.57  < 2e-16 ***
Ns(height, df = 3)1  23.8732     0.3439   69.41 6.89e-16 ***
Ns(height, df = 3)2  53.0416     0.6170   85.96  < 2e-16 ***
Ns(height, df = 3)3  41.6637     0.2619  159.09  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.321 on 11 degrees of freedom
Multiple R-squared:  0.9997,	Adjusted R-squared:  0.9996 
F-statistic: 1.087e+04 on 3 and 11 DF,  p-value: < 2.2e-16

> 
> # Get the diabetes data and set up as Lexis object
> data(DMlate)
> DMlate <- DMlate[sample(1:nrow(DMlate),500),]
> dml <- Lexis( entry = list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit = list(Per=dox),
+         exit.status = factor(!is.na(dodth),labels=c("DM","Dead")),
+                data = DMlate )
NOTE: entry.status has been set to "DM" for all.
> 
> # Split follow-up in 1-year age intervals
> dms <- splitLexis( dml, time.scale="Age", breaks=0:100 )
> summary( dms )
    
Transitions:
     To
From   DM Dead  Records:  Events: Risk time:  Persons:
  DM 3082  112      3194      112    2704.77       500
> 
> # Model  age-specific rates using Ns with 6 knots
> # and period-specific RRs around 2000 with 4 knots
> # with the same number of deaths between each pair of knots
> n.kn <- 6
> ( a.kn <- with( subset(dms,lex.Xst=="Dead"),
+                 quantile( Age+lex.dur, probs=(1:n.kn-0.5)/n.kn ) ) )
8.333333%       25% 41.66667% 58.33333%       75% 91.66667% 
 59.55373  67.74812  74.92334  79.89391  84.12047  89.43669 
> n.kn <- 4
> ( p.kn <- with( subset( dms, lex.Xst=="Dead" ),
+                 quantile( Per+lex.dur, probs=(1:n.kn-0.5)/n.kn ) ) )
   12.5%    37.5%    62.5%    87.5% 
1999.524 2004.040 2006.679 2009.049 
> m1 <- glm( lex.Xst=="Dead" ~ Ns( Age, kn=a.kn ) +
+                              Ns( Per, kn=p.kn, ref=2000 ),
+            offset = log( lex.dur ),
+            family = poisson,
+              data = dms )
> 
> # Plot estimated age-mortality curve for the year 2005 and knots chosen:
> nd <- data.frame( Age=seq(40,100,0.1), Per=2005, lex.dur=1000 )
> par( mfrow=c(1,2) )
> matplot( nd$Age, ci.pred( m1, newdata=nd ),
+          type="l", lwd=c(3,1,1), lty=1, col="black", log="y",
+          ylab="Mortality rates per 1000 PY", xlab="Age (years)", las=1, ylim=c(1,1000) )
> rug( a.kn, lwd=2 )
> 
> # Clamped Age effect to the right of rightmost knot.
> m1.c <- glm( lex.Xst=="Dead" ~ Ns( Age, kn=a.kn, fixsl=c(FALSE,TRUE) ) +
+                                Ns( Per, kn=p.kn, ref=2000 ),
+              offset = log( lex.dur ),
+              family = poisson,
+                data = dms )
> 
> # Plot estimated age-mortality curve for the year 2005 and knots chosen.
> matplot( nd$Age, ci.pred( m1.c, newdata=nd ),
+          type="l", lwd=c(3,1,1), lty=1, col="black", log="y",
+          ylab="Mortality rates per 1000 PY", xlab="Age (years)", las=1, ylim=c(1,1000) )
> rug( a.kn, lwd=2 )
> 
> par( mfrow=c(1,1) )
> 
> # Including a linear Age effect of 0.05 to the right of rightmost knot.
> m1.l <- glm( lex.Xst=="Dead" ~ Ns( Age, kn=a.kn, fixsl=c(FALSE,TRUE) ) +
+                                Ns( Per, kn=p.kn, ref=2000 ),
+              offset = log( lex.dur ) + pmax( Age, max( a.kn ) ) * 0.05,
+              family = poisson,
+                data = dms )
> 
> # Plot estimated age-mortality curve for the year 2005 and knots chosen.
> nd <- data.frame(Age=40:100,Per=2005,lex.dur=1000)
> matplot( nd$Age, ci.pred( m1.l, newdata=nd ),
+          type="l", lwd=c(3,1,1), lty=1, col="black", log="y",
+          ylab="Mortality rates per 1000 PY", xlab="Age (years)", las=1, ylim=c(1,1000) )
> rug( a.kn, lwd=2 )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:splines’

> nameEx("ROC")
> ### * ROC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ROC
> ### Title: Function to compute and draw ROC-curves.
> ### Aliases: ROC
> ### Keywords: manip htest
> 
> ### ** Examples
> 
> x <- rnorm( 100 )
> z <- rnorm( 100 )
> w <- rnorm( 100 )
> tigol <- function( x ) 1 - ( 1 + exp( x ) )^(-1)
> y <- rbinom( 100, 1, tigol( 0.3 + 3*x + 5*z + 7*w ) )
> ROC( form = y ~ x + z, plot="ROC" )
> 
> 
> 
> cleanEx()
> nameEx("Relevel")
> ### * Relevel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Relevel
> ### Title: Reorder and combine levels of a factor
> ### Aliases: Relevel Relevel.factor
> ### Keywords: manip
> 
> ### ** Examples
> 
> ff <- factor( sample( letters[1:5], 100, replace=TRUE ) )
> table( ff, Relevel( ff, list( AB=1:2, "Dee"=4, c(3,5) ) ) )
   
ff  AB Dee c+e
  a 13   0   0
  b 25   0   0
  c  0   0  19
  d  0  26   0
  e  0   0  17
> table( ff, rr=Relevel( ff, list( 5:4, Z=c("c","a") ), coll="-und-", first=FALSE ) )
   rr
ff   b e-und-d  Z
  a  0       0 13
  b 25       0  0
  c  0       0 19
  d  0      26  0
  e  0      17  0
> 
> 
> 
> cleanEx()
> nameEx("S.typh")
> ### * S.typh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: S.typh
> ### Title: Salmonella Typhimurium outbreak 1996 in Denmark.
> ### Aliases: S.typh
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(S.typh)
> 
> 
> 
> cleanEx()
> nameEx("Termplot")
> ### * Termplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Termplot
> ### Title: A wrapper for 'termplot' that optionally (but by default)
> ###   exponentiates terms, and plot them on a common log-scale. Also scales
> ###   x-axes to the same physical scale.
> ### Aliases: Termplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> # Get the diabetes data and set up as Lexis object
> data(DMlate)
> DMlate <- DMlate[sample(1:nrow(DMlate),500),]
> dml <- Lexis( entry = list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit = list(Per=dox),
+         exit.status = factor(!is.na(dodth),labels=c("DM","Dead")),
+                data = DMlate )
NOTE: entry.status has been set to "DM" for all.
> 
> # Split in 1-year age intervals
> dms <- splitLexis( dml, time.scale="Age", breaks=0:100 )
> 
> # Model with 6 knots for both age and period
> n.kn <- 6
> # Model age-specific rates with period referenced to 2004
> ( a.kn <- with( subset(dms,lex.Xst=="Dead"),
+                 quantile( Age+lex.dur, probs=(1:n.kn-0.5)/n.kn ) ) )
8.333333%       25% 41.66667% 58.33333%       75% 91.66667% 
 59.55373  67.74812  74.92334  79.89391  84.12047  89.43669 
> ( p.kn <- with( subset(dms,lex.Xst=="Dead"),
+                 quantile( Per+lex.dur, probs=(1:n.kn-0.5)/n.kn ) ) )
8.333333%       25% 41.66667% 58.33333%       75% 91.66667% 
 1999.364  2001.769  2004.437  2006.227  2008.582  2009.490 
> m2 <- glm( lex.Xst=="Dead" ~ -1 +
+                              Ns( Age, kn=a.kn, intercept=TRUE ) +
+                              Ns( Per, kn=p.kn, ref=2004 ),
+            offset = log( lex.dur ), family=poisson, data=dms )
> 
> # Finally we can plot the two effects:
> Termplot( m2, yshr=0.9 )
> 
> 
> 
> cleanEx()
> nameEx("Y.dk")
> ### * Y.dk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Y.dk
> ### Title: Population risk time in Denmark
> ### Aliases: Y.dk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Y.dk)
> str(Y.dk)
'data.frame':	16800 obs. of  6 variables:
 $ sex  : num  1 1 1 1 1 1 1 1 1 1 ...
 $ A    : num  0 0 1 1 2 2 3 3 4 4 ...
 $ P    : num  1971 1971 1971 1971 1971 ...
 $ C    : num  1971 1970 1970 1969 1969 ...
 $ Y    : num  19195 17944 17969 18165 18179 ...
 $ upper: num  0 1 0 1 0 1 0 1 0 1 ...
 - attr(*, "Contents")= chr "Population risk time in Denmark, in triangles of a Lexis diagram"
> # Compute mean age, period for the triangles
> attach( Y.dk )
> age <- A + (1+upper)/3
> per <- P + (2-upper)/3
> # Plot a Lexis diagram
> library( Epi )
> Lexis.diagram( age=c(0,10), date=c(1990,2000), coh.grid=TRUE, int=1 )
> box()
> # Print the person-years for males there
> text( per[sex==1], age[sex==1],
+       formatC( Y[sex==1]/1000, format="f", digits=1 ) )
> 
> 
> 
> cleanEx()

detaching ‘Y.dk’

> nameEx("addCov.Lexis")
> ### * addCov.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addCov.Lexis
> ### Title: Add covariates (typically clinical measurements) taken at known
> ###   times to a Lexis object.
> ### Aliases: addCov.Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> # A small bogus cohort
> xcoh <- structure( list( id = c("A", "B", "C"),
+                       birth = c("1952-07-14", "1954-04-01", "1987-06-10"),
+                       entry = c("1965-08-04", "1972-09-08", "1991-12-23"),
+                        exit = c("1997-06-27", "1995-05-23", "1998-07-24"),
+                        fail = c(1, 0, 1) ),
+                      .Names = c("id", "birth", "entry", "exit", "fail"),
+                   row.names = c("1", "2", "3"),
+                       class = "data.frame" )
> 
> # Convert the character dates into numerical variables (fractional years)
> xcoh$bt <- cal.yr( xcoh$birth )
> xcoh$en <- cal.yr( xcoh$entry )
> xcoh$ex <- cal.yr( xcoh$exit  )
> 
> # Define as Lexis object with timescales calendar time and age
> Lcoh <- Lexis( entry = list( per=en ),
+                 exit = list( per=ex, age=ex-bt ),
+          exit.status = factor( fail, 0:1, c("Alive","Dead") ),
+                 data = xcoh )
NOTE: entry.status has been set to "Alive" for all.
> str( Lcoh )
Classes ‘Lexis’ and 'data.frame':	3 obs. of  14 variables:
 $ per    :Classes 'cal.yr', 'numeric'  num [1:3] 1966 1973 1992
 $ age    :Classes 'cal.yr', 'numeric'  num [1:3] 13.06 18.44 4.54
 $ lex.dur:Classes 'cal.yr', 'numeric'  num [1:3] 31.9 22.7 6.58
 $ lex.Cst: Factor w/ 2 levels "Alive","Dead": 1 1 1
 $ lex.Xst: Factor w/ 2 levels "Alive","Dead": 2 1 2
 $ lex.id : int  1 2 3
 $ id     : chr  "A" "B" "C"
 $ birth  : chr  "1952-07-14" "1954-04-01" "1987-06-10"
 $ entry  : chr  "1965-08-04" "1972-09-08" "1991-12-23"
 $ exit   : chr  "1997-06-27" "1995-05-23" "1998-07-24"
 $ fail   : num  1 0 1
 $ bt     :Classes 'cal.yr', 'numeric'  num [1:3] 1953 1954 1987
 $ en     :Classes 'cal.yr', 'numeric'  num [1:3] 1966 1973 1992
 $ ex     :Classes 'cal.yr', 'numeric'  num [1:3] 1997 1995 1999
 - attr(*, "time.scales")= chr  "per" "age"
 - attr(*, "time.since")= chr  "" ""
 - attr(*, "breaks")=List of 2
  ..$ per: NULL
  ..$ age: NULL
> Lx <- Lcoh[,1:7]
> 
> # Data frame with clinical examination data, date of examination in per
> clin <- data.frame( lex.id = c(1,1,3,2),
+                        per = c(1977.3,1971.7,1996.2,1990.6),
+                         bp = c(120,140,160,157),
+                       chol = c(5,7,8,9) )
> Lx
       per       age   lex.dur lex.Cst lex.Xst lex.id id
1 1965.589 13.056810 31.895962   Alive    Dead      1  A
2 1972.686 18.439425 22.702259   Alive   Alive      2  B
3 1991.974  4.536619  6.584531   Alive    Dead      3  C
> clin 
  lex.id    per  bp chol
1      1 1977.3 120    5
2      1 1971.7 140    7
3      3 1996.2 160    8
4      2 1990.6 157    9
> 
> # Works with time split BEFORE adding clinical data:
> Lb <- addCov.Lexis( splitLexis( Lx,
+                                 time.scale="age",
+                                 breaks=seq(0,80,5) ),
+                     clin,
+                     exnam="clX" )
> Lb
   lex.id      per       age   lex.dur lex.Cst lex.Xst id  bp chol  clX
1       1 1965.589 13.056810 1.9431896   Alive   Alive  A  NA   NA <NA>
2       1 1967.533 15.000000 4.1674880   Alive   Alive  A  NA   NA <NA>
3       1 1971.700 19.167488 0.8325120   Alive   Alive  A 140    7 ex.1
4       1 1972.533 20.000000 4.7674880   Alive   Alive  A 140    7 ex.1
5       1 1977.300 24.767488 0.2325120   Alive   Alive  A 120    5 ex.2
6       1 1977.533 25.000000 5.0000000   Alive   Alive  A 120    5 ex.2
7       1 1982.533 30.000000 5.0000000   Alive   Alive  A 120    5 ex.2
8       1 1987.533 35.000000 5.0000000   Alive   Alive  A 120    5 ex.2
9       1 1992.533 40.000000 4.9527721   Alive    Dead  A 120    5 ex.2
10      2 1972.686 18.439425 1.5605749   Alive   Alive  B  NA   NA <NA>
11      2 1974.246 20.000000 5.0000000   Alive   Alive  B  NA   NA <NA>
12      2 1979.246 25.000000 5.0000000   Alive   Alive  B  NA   NA <NA>
13      2 1984.246 30.000000 5.0000000   Alive   Alive  B  NA   NA <NA>
14      2 1989.246 35.000000 1.3535934   Alive   Alive  B  NA   NA <NA>
15      2 1990.600 36.353593 3.6464066   Alive   Alive  B 157    9 ex.1
16      2 1994.246 40.000000 1.1416838   Alive   Alive  B 157    9 ex.1
17      3 1991.974  4.536619 0.4633812   Alive   Alive  C  NA   NA <NA>
18      3 1992.437  5.000000 3.7626283   Alive   Alive  C  NA   NA <NA>
19      3 1996.200  8.762628 1.2373717   Alive   Alive  C 160    8 ex.1
20      3 1997.437 10.000000 1.1211499   Alive    Dead  C 160    8 ex.1
         tfc
1         NA
2         NA
3   0.000000
4   0.832512
5   0.000000
6   0.232512
7   5.232512
8  10.232512
9  15.232512
10        NA
11        NA
12        NA
13        NA
14        NA
15  0.000000
16  3.646407
17        NA
18        NA
19  0.000000
20  1.237372
> # With time split AFTER adding clinincal data, variable tfc is largely meaningless:
> La <- splitLexis( addCov.Lexis( Lx,
+                                 clin,
+                                 exnam="clX" ),
+                   breaks=seq(0,80,5),
+                   time.scale="age" )
> La
   lex.id      per       age   lex.dur lex.Cst lex.Xst id  bp chol  clX tfc
1       1 1965.589 13.056810 1.9431896   Alive   Alive  A  NA   NA <NA>  NA
2       1 1967.533 15.000000 4.1674880   Alive   Alive  A  NA   NA <NA>  NA
3       1 1971.700 19.167488 0.8325120   Alive   Alive  A 140    7 ex.1   0
4       1 1972.533 20.000000 4.7674880   Alive   Alive  A 140    7 ex.1   0
5       1 1977.300 24.767488 0.2325120   Alive   Alive  A 120    5 ex.2   0
6       1 1977.533 25.000000 5.0000000   Alive   Alive  A 120    5 ex.2   0
7       1 1982.533 30.000000 5.0000000   Alive   Alive  A 120    5 ex.2   0
8       1 1987.533 35.000000 5.0000000   Alive   Alive  A 120    5 ex.2   0
9       1 1992.533 40.000000 4.9527721   Alive    Dead  A 120    5 ex.2   0
10      2 1972.686 18.439425 1.5605749   Alive   Alive  B  NA   NA <NA>  NA
11      2 1974.246 20.000000 5.0000000   Alive   Alive  B  NA   NA <NA>  NA
12      2 1979.246 25.000000 5.0000000   Alive   Alive  B  NA   NA <NA>  NA
13      2 1984.246 30.000000 5.0000000   Alive   Alive  B  NA   NA <NA>  NA
14      2 1989.246 35.000000 1.3535934   Alive   Alive  B  NA   NA <NA>  NA
15      2 1990.600 36.353593 3.6464066   Alive   Alive  B 157    9 ex.1   0
16      2 1994.246 40.000000 1.1416838   Alive   Alive  B 157    9 ex.1   0
17      3 1991.974  4.536619 0.4633812   Alive   Alive  C  NA   NA <NA>  NA
18      3 1992.437  5.000000 3.7626283   Alive   Alive  C  NA   NA <NA>  NA
19      3 1996.200  8.762628 1.2373717   Alive   Alive  C 160    8 ex.1   0
20      3 1997.437 10.000000 1.1211499   Alive    Dead  C 160    8 ex.1   0
> 
> 
> 
> cleanEx()
> nameEx("apc.LCa")
> ### * apc.LCa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apc.LCa
> ### Title: Fit Age-Period-Cohort models and Lee-Carter models with effects
> ###   modeled by natural splines.
> ### Aliases: apc.LCa show.apc.LCa
> ### Keywords: regression models
> 
> ### ** Examples
> 
> library( Epi )
> 
> # Danish lung cancer incidence in 5x5x5 Lexis triangles
> data( lungDK )
> lc <- subset( lungDK, Ax>40 )[,c("Ax","Px","D","Y")]
> names( lc )[1:2] <- c("A","P")
> head( lc )
         A        P  D        Y
1 43.33333 1944.667 52 336233.8
2 41.66667 1946.333 28 357812.7
3 43.33333 1949.667 51 363783.7
4 41.66667 1951.333 30 390985.8
5 43.33333 1954.667 50 391925.3
6 41.66667 1956.333 23 377515.3
> 
> al <- apc.LCa( lc, npar=c(9,6,6,6,10), keep.models=TRUE, maxit=500, eps=10e-3 )
APa :
LCa.fit convergence in  4  iterations, deviance: 765.7065 on 201 d.f.
ACa :
LCa.fit convergence in  4  iterations, deviance: 677.3769 on 197 d.f.
APaC :
LCa.fit convergence in  3  iterations, deviance: 297.4892 on 196 d.f.
APCa :
LCa.fit convergence in  4  iterations, deviance: 279.8382 on 192 d.f.
APaCa :
LCa.fit convergence in  5  iterations, deviance: 276.2598 on 186 d.f.
[1] "ML of APC-model Poisson with log(Y) offset : ( ACP ):\n"

Analysis of deviance for Age-Period-Cohort model

                  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
Age                     211    15457.0                          
Age-drift               210     6844.3  1   8612.7 < 2.2e-16 ***
Age-Cohort              206     1022.4  4   5821.9 < 2.2e-16 ***
Age-Period-Cohort       202      416.9  4    605.5 < 2.2e-16 ***
Age-Period              206     3067.4 -4  -2650.5 < 2.2e-16 ***
Age-drift               210     6844.3 -4  -3776.9 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
No reference period given:
 Reference period for age-effects is chosen as
 the median date of birth for persons  with event:  1911.333 .
> show.apc.LCa( al, dev=FALSE )
> show.apc.LCa( al, top="AP" )
> show.apc.LCa( al, top="APa" )
> show.apc.LCa( al, top="ACa" )
> 
> # Danish mortality data
> ## Not run: 
> ##D data( M.dk )
> ##D mdk <- subset( M.dk, sex==1 )[,c("A","P","D","Y")]
> ##D head( mdk )
> ##D 
> ##D al <- apc.LCa( mdk, npar=c(15,15,20,6,6), maxit=50, eps=10e-3,
> ##D                quiet=FALSE, VC=FALSE )
> ##D show.apc.LCa( al, dev=FALSE )
> ##D show.apc.LCa( al, dev=TRUE )
> ##D show.apc.LCa( al, top="AP" )
> ##D 
> ##D # Fit a reasonable model to Danish mortality data and plot results
> ##D mACa <- LCa.fit( mdk, model="ACa", npar=c(15,15,20,6,6), c.ref=1930,
> ##D                  a.ref=70, quiet=FALSE, maxit=250 )
> ##D par( mfrow=c(1,3) )
> ##D plot( mACa )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("apc.fit")
> ### * apc.fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apc.fit
> ### Title: Fit an Age-Period-Cohort model to tabular data.
> ### Aliases: apc.fit
> ### Keywords: models regression
> 
> ### ** Examples
> 
> library( Epi )
> data(lungDK)
> 
> # Taylor a dataframe that meets the requirements
> exd <- lungDK[,c("Ax","Px","D","Y")]
> names(exd)[1:2] <- c("A","P")
> 
> # Two different ways of parametrizing the APC-model, ML
> ex.H <- apc.fit( exd, npar=7, model="ns", dr.extr="Holford",  parm="ACP", scale=10^5 )
NOTE: npar is specified as:A P C 
7 7 7 
[1] "ML of APC-model Poisson with log(Y) offset : ( ACP ):\n"

Analysis of deviance for Age-Period-Cohort model

                  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
Age                     213    15479.4                          
Age-drift               212     6867.7  1   8611.7 < 2.2e-16 ***
Age-Cohort              207     1042.5  5   5825.1 < 2.2e-16 ***
Age-Period-Cohort       202      435.1  5    607.4 < 2.2e-16 ***
Age-Period              207     3092.4 -5  -2657.3 < 2.2e-16 ***
Age-drift               212     6867.7 -5  -3775.2 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
No reference period given:
 Reference period for age-effects is chosen as
 the median date of birth for persons  with event:  1911.333 .
> ex.W <- apc.fit( exd, npar=7, model="ns", dr.extr="weighted", parm="ACP", scale=10^5 )
NOTE: npar is specified as:A P C 
7 7 7 
[1] "ML of APC-model Poisson with log(Y) offset : ( ACP ):\n"

Analysis of deviance for Age-Period-Cohort model

                  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
Age                     213    15479.4                          
Age-drift               212     6867.7  1   8611.7 < 2.2e-16 ***
Age-Cohort              207     1042.5  5   5825.1 < 2.2e-16 ***
Age-Period-Cohort       202      435.1  5    607.4 < 2.2e-16 ***
Age-Period              207     3092.4 -5  -2657.3 < 2.2e-16 ***
Age-drift               212     6867.7 -5  -3775.2 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
No reference period given:
 Reference period for age-effects is chosen as
 the median date of birth for persons  with event:  1911.333 .
> 
> # Sequential fit, first AC, then P given AC.
> ex.S <- apc.fit( exd, npar=7, model="ns", parm="AC-P", scale=10^5 )
NOTE: npar is specified as:A P C 
7 7 7 
[1] "Sequential modelling Poisson with log(Y) offset : ( AC-P ):\n"

Analysis of deviance for Age-Period-Cohort model

                  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
Age                     213    15479.4                          
Age-drift               212     6867.7  1   8611.7 < 2.2e-16 ***
Age-Cohort              207     1042.5  5   5825.1 < 2.2e-16 ***
Age-Period-Cohort       202      435.1  5    607.4 < 2.2e-16 ***
Age-Period              207     3092.4 -5  -2657.3 < 2.2e-16 ***
Age-drift               212     6867.7 -5  -3775.2 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> # Show the estimated drifts
> ex.H[["Drift"]]
                exp(Est.)     2.5%    97.5%
APC (1-weights)  1.032921 1.032080 1.033763
A-d              1.023489 1.022974 1.024005
> ex.W[["Drift"]]
                exp(Est.)     2.5%    97.5%
APC (D-weights)  1.019656 1.019056 1.020256
A-d              1.023489 1.022974 1.024005
> ex.S[["Drift"]]
    exp(Est.)     2.5%    97.5%
A-d  1.023489 1.022974 1.024005
> 
> # Plot the effects
> fp <- apc.plot( ex.H )
> apc.lines( ex.W, frame.par=fp, col="red" )
> apc.lines( ex.S, frame.par=fp, col="blue" )
> 
> 
> 
> cleanEx()
> nameEx("apc.frame")
> ### * apc.frame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apc.frame
> ### Title: Produce an empty frame for display of parameter-estimates from
> ###   Age-Period-Cohort-models.
> ### Aliases: apc.frame
> ### Keywords: hplot
> 
> ### ** Examples
> 
> par( mar=c(4,4,1,4) )
> res <-
+ apc.frame( a.lab=seq(30,90,20), cp.lab=seq(1880,2000,30), r.lab=c(1,2,5,10,20,50),
+            a.tic=seq(30,90,10), cp.tic=seq(1880,2000,10), r.tic=c(1:10,1:5*10),
+            gap=27 )
> res
cp.offset    RR.fac 
     1763         5 
> # What are the axes actually?
> par(c("usr","xlog","ylog"))
$usr
[1]  30.00000 237.00000   0.00000   1.69897

$xlog
[1] FALSE

$ylog
[1] TRUE

> # How to plot in the age-part: a point at (50,10)
> points( 50, 10, pch=16, cex=2, col="blue" )
> # How to plot in the cohort-period-part: a point at (1960,0.3)
> points( 1960-res[1], 0.3*res[2], pch=16, cex=2, col="red" )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("bdendo")
> ### * bdendo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdendo
> ### Title: A case-control study of endometrial cancer
> ### Aliases: bdendo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bdendo)
> 
> 
> 
> cleanEx()
> nameEx("bdendo11")
> ### * bdendo11
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdendo11
> ### Title: A 1:1 subset of the endometrial cancer case-control study
> ### Aliases: bdendo11
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bdendo11)
> 
> 
> 
> cleanEx()
> nameEx("births")
> ### * births
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: births
> ### Title: Births in a London Hospital
> ### Aliases: births
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(births)
> 
> 
> 
> cleanEx()
> nameEx("blcaIT")
> ### * blcaIT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blcaIT
> ### Title: Bladder cancer mortality in Italian males
> ### Aliases: blcaIT
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(blcaIT)
> 
> 
> 
> cleanEx()
> nameEx("boxes.MS")
> ### * boxes.MS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boxes.MS
> ### Title: Draw boxes and arrows for illustration of multistate models.
> ### Aliases: tbox dbox fillarr boxarr boxes boxes.Lexis boxes.matrix
> ###   boxes.MS
> ### Keywords: survival hplot iplot
> 
> ### ** Examples
> 
> par( mar=c(0,0,0,0), cex=1.5 )
> plot( NA,
+       bty="n",
+       xlim=0:1*100, ylim=0:1*100, xaxt="n", yaxt="n", xlab="", ylab="" )
> bw  <- tbox( "Well"    , 10, 60, 22, 10, col.txt="blue" )
> bo  <- tbox( "other Ca", 45, 80, 22, 10, col.txt="gray" )
> bc  <- tbox( "Ca"      , 45, 60, 22, 10, col.txt="red" )
> bd  <- tbox( "DM"      , 45, 40, 22, 10, col.txt="blue" )
> bcd <- tbox( "Ca + DM" , 80, 60, 22, 10, col.txt="gray" )
> bdc <- tbox( "DM + Ca" , 80, 40, 22, 10, col.txt="red" )
>       boxarr( bw, bo , col=gray(0.7), lwd=3 )
> # Note the argument adj= can takes values outside (0,1)
> text( boxarr( bw, bc , col="blue", lwd=3 ),
+       expression( lambda[Well] ), col="blue", adj=c(1,-0.2), cex=0.8 )
>       boxarr( bw, bd , col=gray(0.7) , lwd=3 )
>       boxarr( bc, bcd, col=gray(0.7) , lwd=3 )
> text( boxarr( bd, bdc, col="blue", lwd=3 ),
+       expression( lambda[DM] ), col="blue", adj=c(1.1,-0.2), cex=0.8 )
> 
> # Set up a transition matrix allowing recovery
> tm <- rbind( c(NA,1,1), c(1,NA,1), c(NA,NA,NA) )
> rownames(tm) <- colnames(tm) <- c("Cancer","Recurrence","Dead")
> tm
           Cancer Recurrence Dead
Cancer         NA          1    1
Recurrence      1         NA    1
Dead           NA         NA   NA
> boxes.matrix( tm, boxpos=TRUE )
> 
> # Illustrate texting of arrows
> boxes.Lexis( tm, boxpos=TRUE, txt.arr=c("en","to","tre","fire") )
> zz <- boxes( tm, boxpos=TRUE, txt.arr=c(expression(lambda[C]),
+                                         expression(mu[C]),
+                                         "recovery",
+                                         expression(mu[R]) ) )
> 
> # Change color of a box
> zz$Boxes[3,c("col.bg","col.border")] <- "green"
> boxes( zz )
> 
> # Set up a Lexis object
> data(DMlate)
> str(DMlate)
'data.frame':	10000 obs. of  7 variables:
 $ sex  : Factor w/ 2 levels "M","F": 2 1 2 2 1 2 1 1 2 1 ...
 $ dobth: num  1940 1939 1918 1965 1933 ...
 $ dodm : num  1999 2003 2005 2009 2009 ...
 $ dodth: num  NA NA NA NA NA ...
 $ dooad: num  NA 2007 NA NA NA ...
 $ doins: num  NA NA NA NA NA NA NA NA NA NA ...
 $ dox  : num  2010 2010 2010 2010 2010 ...
> dml <- Lexis( entry=list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit=list(Per=dox),
+         exit.status=factor(!is.na(dodth),labels=c("DM","Dead")),
+                data=DMlate[1:1000,] )
NOTE: entry.status has been set to "DM" for all.
> 
> # Cut follow-up at Insulin
> dmi <- cutLexis( dml, cut=dml$doins, new.state="Ins", pre="DM" )
> summary( dmi )
     
Transitions:
     To
From   DM Ins Dead  Records:  Events: Risk time:  Persons:
  DM  616 178  195       989      373    4454.40       989
  Ins   0 142   47       189       47     854.16       189
  Sum 616 320  242      1178      420    5308.56      1000
> boxes( dmi, boxpos=TRUE )
> boxes( dmi, boxpos=TRUE, show.BE=TRUE )
> boxes( dmi, boxpos=TRUE, show.BE="nz" )
> boxes( dmi, boxpos=TRUE, show.BE="nz", BE.sep=c("In:","      Out:","") )
> 
> # Set up a bogus recovery date just to illustrate two-way transitions
> dmi$dorec <- dmi$doins + runif(nrow(dmi),0.5,10)
> dmi$dorec[dmi$dorec>dmi$dox] <- NA
> dmR <- cutLexis( dmi, cut=dmi$dorec, new.state="DM", pre="Ins" )
> summary( dmR )
     
Transitions:
     To
From   DM Ins Dead  Records:  Events: Risk time:  Persons:
  DM  683 178  203      1064      381    4772.05       992
  Ins  75  75   39       189      114     536.51       189
  Sum 758 253  242      1253      495    5308.56      1000
> boxes( dmR, boxpos=TRUE )
> boxes( dmR, boxpos=TRUE, show.D=FALSE )
> boxes( dmR, boxpos=TRUE, show.D=FALSE, show.Y=FALSE )
> boxes( dmR, boxpos=TRUE, scale.R=1000 )
> MSobj <- boxes( dmR, boxpos=TRUE, scale.R=1000, show.D=FALSE )
> MSobj <- boxes( dmR, boxpos=TRUE, scale.R=1000, DR.sep=c(" (",")") )
> class( MSobj )
[1] "MS"
> boxes( MSobj )
> MSobj$Boxes[1,c("col.txt","col.border")] <- "red"
> MSobj$Arrows[1:2,"col.arr"] <- "red"
> boxes( MSobj )
>     
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("brv")
> ### * brv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brv
> ### Title: Bereavement in an elderly cohort
> ### Aliases: brv
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(brv)
> 
> 
> 
> cleanEx()
> nameEx("cal.yr")
> ### * cal.yr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cal.yr
> ### Title: Functions to convert character, factor and various date objects
> ###   into a number, and vice versa.
> ### Aliases: cal.yr as.Date.cal.yr
> ### Keywords: manip chron
> 
> ### ** Examples
> 
>  # Character vector of dates:
>  birth <- c("14/07/1852","01/04/1954","10/06/1987","16/05/1990",
+             "12/11/1980","01/01/1997","01/01/1998","01/01/1999")
>  # Proper conversion to class "Date":
>  birth.dat <- as.Date( birth, format="%d/%m/%Y" )
>  # Converson of character to class "cal.yr"
>  bt.yr <- cal.yr( birth, format="%d/%m/%Y" )
>  # Back to class "Date":
>  bt.dat <- as.Date( bt.yr )
>  # Numerical calculation of days since 1.1.1970:
>  days <- Days <- (bt.yr-1970)*365.25
>  # Blunt assignment of class:
>  class( Days ) <- "Date"
>  # Then data.frame() to get readable output of results:
>  data.frame( birth, birth.dat, bt.yr, bt.dat, days, Days, round(Days) )
       birth  birth.dat    bt.yr     bt.dat   days       Days round.Days.
1 14/07/1852 1852-07-14 1852.535 1852-07-14 -42904 1852-07-14  1852-07-14
2 01/04/1954 1954-04-01 1954.246 1954-04-01  -5754 1954-03-31  1954-04-01
3 10/06/1987 1987-06-10 1987.437 1987-06-10   6369 1987-06-10  1987-06-10
4 16/05/1990 1990-05-16 1990.370 1990-05-16   7440 1990-05-15  1990-05-16
5 12/11/1980 1980-11-12 1980.864 1980-11-12   3968 1980-11-11  1980-11-12
6 01/01/1997 1997-01-01 1997.001 1997-01-01   9862 1997-01-01  1997-01-01
7 01/01/1998 1998-01-01 1998.000 1998-01-01  10227 1998-01-01  1998-01-01
8 01/01/1999 1999-01-01 1998.999 1999-01-01  10592 1998-12-31  1999-01-01
> 
> 
> 
> cleanEx()
> nameEx("ccwc")
> ### * ccwc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ccwc
> ### Title: Generate a nested case-control study
> ### Aliases: ccwc
> ### Keywords: datagen
> 
> ### ** Examples
> 
> #
> # For the diet and heart dataset, create a nested case-control study
> # using the age scale and matching on job
> #
> data(diet)
> dietcc <- ccwc( doe, dox, chd, origin=dob, controls=2, data=diet,
+                 include=energy, match=job)

Sampling risk sets: .............................................
Warning in ccwc(doe, dox, chd, origin = dob, controls = 2, data = diet,  :
  there were tied failure times
> 
> 
> 
> cleanEx()
> nameEx("ci.cum")
> ### * ci.cum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ci.cum
> ### Title: Compute cumulative sum of estimates.
> ### Aliases: ci.cum
> ### Keywords: models regression
> 
> ### ** Examples
> 
> # Packages required for this example
> library( splines )
> library( survival )
> data( lung )
> par( mfrow=c(1,2) )
> 
> # Plot the Kaplan-meier-estimator
> plot( survfit( Surv( time, status==2 ) ~ 1, data=lung ) )
> 
> # Declare data as Lexis
> lungL <- Lexis( exit=list("tfd"=time),
+                 exit.status=(status==2)*1, data=lung )
NOTE: entry is assumed to be 0 on the tfd timescale.
> summary( lungL )
    
Transitions:
     To
From  0   1  Records:  Events: Risk time:  Persons:
   0 63 165       228      165      69593       228
> 
> # Cut the follow-up every 10 days
> sL <- splitLexis( lungL, "tfd", breaks=seq(0,1100,10) )
> str( sL )
Classes ‘Lexis’ and 'data.frame':	7071 obs. of  15 variables:
 $ lex.id   : int  1 1 1 1 1 1 1 1 1 1 ...
 $ tfd      : num  0 10 20 30 40 50 60 70 80 90 ...
 $ lex.dur  : num  10 10 10 10 10 10 10 10 10 10 ...
 $ lex.Cst  : num  0 0 0 0 0 0 0 0 0 0 ...
 $ lex.Xst  : num  0 0 0 0 0 0 0 0 0 0 ...
 $ inst     : num  3 3 3 3 3 3 3 3 3 3 ...
 $ time     : num  306 306 306 306 306 306 306 306 306 306 ...
 $ status   : num  2 2 2 2 2 2 2 2 2 2 ...
 $ age      : num  74 74 74 74 74 74 74 74 74 74 ...
 $ sex      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ ph.ecog  : num  1 1 1 1 1 1 1 1 1 1 ...
 $ ph.karno : num  90 90 90 90 90 90 90 90 90 90 ...
 $ pat.karno: num  100 100 100 100 100 100 100 100 100 100 ...
 $ meal.cal : num  1175 1175 1175 1175 1175 ...
 $ wt.loss  : num  NA NA NA NA NA NA NA NA NA NA ...
 - attr(*, "breaks")=List of 1
  ..$ tfd: num  0 10 20 30 40 50 60 70 80 90 ...
 - attr(*, "time.scales")= chr "tfd"
 - attr(*, "time.since")= chr ""
> summary( sL )
    
Transitions:
     To
From    0   1  Records:  Events: Risk time:  Persons:
   0 6906 165      7071      165      69593       228
> 
> # Fit a Poisson model with a natural spline for the effect of time.
> # Extract the variables needed
> D <- status(sL, "exit")
> Y <- dur(sL)
> tB <- timeBand( sL, "tfd", "left" )
> MM <- ns( tB, knots=c(50,100,200,400,700), intercept=TRUE )
> mp <- glm( D ~ MM - 1 + offset(log(Y)),
+            family=poisson, eps=10^-8, maxit=25 )
> 
> # mp is now a model for the rates along the time scale tB
> 
> # Contrast matrix to extract effects, i.e. matrix to multiply with the
> # coefficients to produce the log-rates: unique rows of MM, in time order.
> T.pt <- sort( unique( tB ) )
> T.wh <- match( T.pt, tB )
> 
> # ctr.mat=MM[T.wh,] selects the rates as evaluated at times T.pt:
> Lambda <- ci.cum( mp, ctr.mat=MM[T.wh,], intl=diff(c(0,T.pt)) )
> 
> # Put the estimated survival function on top of the KM-estimator
> matlines( c(0,T.pt[-1]), exp(-Lambda[,1:3]), lwd=c(3,1,1), lty=1, col="Red" )
> 
> # Extract and plot the fitted intensity function
> lambda <- ci.lin( mp, ctr.mat=MM[T.wh,], Exp=TRUE )
> matplot( T.pt, lambda[,5:7]*10^3, type="l", lwd=c(3,1,1), col="black", lty=1,
+          log="y", ylim=c(0.2,20) )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:survival’, ‘package:splines’

> nameEx("ci.lin")
> ### * ci.lin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ci.lin
> ### Title: Compute linear functions of parameters with standard errors and
> ###   confidence limits
> ### Aliases: ci.lin ci.mat ci.exp ci.pred ci.ratio Wald
> ### Keywords: models regression
> 
> ### ** Examples
> 
> # Bogus data:
> f <- factor( sample( letters[1:5], 200, replace=TRUE ) )
> g <- factor( sample( letters[1:3], 200, replace=TRUE ) )
> x <- rnorm( 200 )
> y <- 7 + as.integer( f ) * 3 + 2 * x + 1.7 * rnorm( 200 )
> 
> # Fit a simple model:
> mm <- lm( y ~ x + f + g )
> ci.lin( mm )
             Estimate    StdErr          z             P       2.5%      97.5%
(Intercept)  9.869981 0.3766173 26.2069272 2.215698e-151  9.1318248 10.6081374
x            1.967595 0.1322452 14.8783859  4.553529e-50  1.7083990  2.2267906
fb           3.099593 0.4459483  6.9505649  3.638263e-12  2.2255500  3.9736351
fc           6.047573 0.4508893 13.4125453  5.105596e-41  5.1638466  6.9313003
fd           9.408219 0.4439493 21.1921035  1.129375e-99  8.5380947 10.2783439
fe          12.228097 0.4633821 26.3887990 1.842275e-153 11.3198849 13.1363094
gb          -0.206366 0.3162740 -0.6524914  5.140842e-01 -0.8262516  0.4135195
gc          -0.151674 0.3317805 -0.4571517  6.475620e-01 -0.8019517  0.4986038
> ci.lin( mm, subset=3:6, diff=TRUE, fnam=FALSE )
          Estimate    StdErr         z             P      2.5%     97.5%
 b vs. c -2.947981 0.3953015  -7.45755  8.814595e-14 -3.722758 -2.173204
 b vs. d -6.308627 0.3863870 -16.32723  6.319396e-60 -7.065931 -5.551322
 b vs. e -9.128505 0.4193163 -21.76998 4.468713e-105 -9.950349 -8.306660
 c vs. d -3.360646 0.3872787  -8.67759  4.042440e-18 -4.119698 -2.601594
 c vs. e -6.180524 0.4252300 -14.53454  7.320178e-48 -7.013959 -5.347088
 d vs. e -2.819878 0.4178048  -6.74927  1.485905e-11 -3.638760 -2.000995
> ci.lin( mm, subset=3:6, diff=TRUE, fnam=TRUE )
           Estimate    StdErr         z             P      2.5%     97.5%
f b vs. c -2.947981 0.3953015  -7.45755  8.814595e-14 -3.722758 -2.173204
f b vs. d -6.308627 0.3863870 -16.32723  6.319396e-60 -7.065931 -5.551322
f b vs. e -9.128505 0.4193163 -21.76998 4.468713e-105 -9.950349 -8.306660
f c vs. d -3.360646 0.3872787  -8.67759  4.042440e-18 -4.119698 -2.601594
f c vs. e -6.180524 0.4252300 -14.53454  7.320178e-48 -7.013959 -5.347088
f d vs. e -2.819878 0.4178048  -6.74927  1.485905e-11 -3.638760 -2.000995
> ci.lin( mm, subset="f", diff=TRUE, fnam="f levels:" )
                    Estimate    StdErr          z             P       2.5%
f levels: a vs. b  -3.099593 0.4459483  -6.950565  3.638263e-12  -3.973635
f levels: a vs. c  -6.047573 0.4508893 -13.412545  5.105596e-41  -6.931300
f levels: a vs. d  -9.408219 0.4439493 -21.192103  1.129375e-99 -10.278344
f levels: a vs. e -12.228097 0.4633821 -26.388799 1.842275e-153 -13.136309
f levels: b vs. c  -2.947981 0.3953015  -7.457550  8.814595e-14  -3.722758
f levels: b vs. d  -6.308627 0.3863870 -16.327225  6.319396e-60  -7.065931
f levels: b vs. e  -9.128505 0.4193163 -21.769975 4.468713e-105  -9.950349
f levels: c vs. d  -3.360646 0.3872787  -8.677590  4.042440e-18  -4.119698
f levels: c vs. e  -6.180524 0.4252300 -14.534542  7.320178e-48  -7.013959
f levels: d vs. e  -2.819878 0.4178048  -6.749270  1.485905e-11  -3.638760
                       97.5%
f levels: a vs. b  -2.225550
f levels: a vs. c  -5.163847
f levels: a vs. d  -8.538095
f levels: a vs. e -11.319885
f levels: b vs. c  -2.173204
f levels: b vs. d  -5.551322
f levels: b vs. e  -8.306660
f levels: c vs. d  -2.601594
f levels: c vs. e  -5.347088
f levels: d vs. e  -2.000995
> print( ci.lin( mm, subset="g", diff=TRUE, fnam="gee!:", vcov=TRUE ) )
$est
                     [,1]
gee!: a vs. b  0.20636603
gee!: a vs. c  0.15167399
gee!: b vs. c -0.05469205

$vcov
              gee!: a vs. b gee!: a vs. c gee!: b vs. c
gee!: a vs. b    0.10002921    0.04531688   -0.05471233
gee!: a vs. c    0.04531688    0.11007827    0.06476139
gee!: b vs. c   -0.05471233    0.06476139    0.11947372

> 
> # Use character defined subset to get ALL contrasts:
> ci.lin( mm, subset="f", diff=TRUE )
           Estimate    StdErr          z             P       2.5%      97.5%
 a vs. b  -3.099593 0.4459483  -6.950565  3.638263e-12  -3.973635  -2.225550
 a vs. c  -6.047573 0.4508893 -13.412545  5.105596e-41  -6.931300  -5.163847
 a vs. d  -9.408219 0.4439493 -21.192103  1.129375e-99 -10.278344  -8.538095
 a vs. e -12.228097 0.4633821 -26.388799 1.842275e-153 -13.136309 -11.319885
 b vs. c  -2.947981 0.3953015  -7.457550  8.814595e-14  -3.722758  -2.173204
 b vs. d  -6.308627 0.3863870 -16.327225  6.319396e-60  -7.065931  -5.551322
 b vs. e  -9.128505 0.4193163 -21.769975 4.468713e-105  -9.950349  -8.306660
 c vs. d  -3.360646 0.3872787  -8.677590  4.042440e-18  -4.119698  -2.601594
 c vs. e  -6.180524 0.4252300 -14.534542  7.320178e-48  -7.013959  -5.347088
 d vs. e  -2.819878 0.4178048  -6.749270  1.485905e-11  -3.638760  -2.000995
> 
> # A Wald test of whether the g-parameters are 0
> Wald( mm, subset="g" )
    Chisq      d.f.         P 
0.4635484 2.0000000 0.7931252 
> # Wald test of whether the three first f-parameters are equal:
> ( CM <- rbind( c(1,-1,0,0), c(1,0,-1,0)) )
     [,1] [,2] [,3] [,4]
[1,]    1   -1    0    0
[2,]    1    0   -1    0
> Wald( mm, subset="f", ctr.mat=CM )
   Chisq     d.f.        P 
267.5712   2.0000   0.0000 
> # or alternatively
> ( CM <- rbind( c(1,-1,0,0), c(0,1,-1,0)) )
     [,1] [,2] [,3] [,4]
[1,]    1   -1    0    0
[2,]    0    1   -1    0
> Wald( mm, subset="f", ctr.mat=CM )
   Chisq     d.f.        P 
267.5712   2.0000   0.0000 
> 
> # Confidnece intervas for ratio of rates
> ci.ratio( cbind(10,8,12.5), cbind(5,4,6.25) )
     Estimate     2.5%    97.5%
[1,]        2 1.458742 2.742088
> ci.ratio( cbind(8,12.5), cbind(4,6.25) )
     Estimate     2.5%    97.5%
[1,]        2 1.458742 2.742088
> 
> 
> 
> cleanEx()
> nameEx("ci.pd")
> ### * ci.pd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ci.pd
> ### Title: Compute confidence limits for a difference of two independent
> ###   proportions.
> ### Aliases: ci.pd
> ### Keywords: distribution htest
> 
> ### ** Examples
> 
> ( a <- matrix( sample( 10:40, 4 ), 2, 2 ) )
     [,1] [,2]
[1,]   18   26
[2,]   21   35
> ci.pd( a )
 n1    p1 n2    p2  diff   2.5% 97.5%
 39 0.462 61 0.426 0.035 -0.157 0.227
> twoby2( t(a) )
2 by 2 table analysis: 
------------------------------------------------------ 
Outcome   : Col 1 
Comparing : Row 1 vs. Row 2 

      Col 1 Col 2    P(Col 1) 95% conf. interval
Row 1    18    21      0.4615    0.3135   0.6167
Row 2    26    35      0.4262    0.3090   0.5524

                                   95% conf. interval
             Relative Risk: 1.0828    0.6926   1.6929
         Sample Odds Ratio: 1.1538    0.5140   2.5901
Conditional MLE Odds Ratio: 1.1522    0.4744   2.7940
    Probability difference: 0.0353   -0.1567   0.2272

             Exact P-value: 0.8369 
        Asymptotic P-value: 0.7287 
------------------------------------------------------
> prop.test( t(a) )

	2-sample test for equality of proportions with continuity correction

data:  t(a)
X-squared = 0.019721, df = 1, p-value = 0.8883
alternative hypothesis: two.sided
95 percent confidence interval:
 -0.185408  0.256026
sample estimates:
   prop 1    prop 2 
0.4615385 0.4262295 

> ( A <- array( sample( 10:40, 20 ), dim=c(2,2,5) ) )
, , 1

     [,1] [,2]
[1,]   16   37
[2,]   36   28

, , 2

     [,1] [,2]
[1,]   26   15
[2,]   11   14

, , 3

     [,1] [,2]
[1,]   25   39
[2,]   18   19

, , 4

     [,1] [,2]
[1,]   23   40
[2,]   27   22

, , 5

     [,1] [,2]
[1,]   24   31
[2,]   12   35

> ci.pd( A )
    n1    p1 n2    p2   diff   2.5%  97.5%
1:  52 0.308 65 0.569 -0.262 -0.418 -0.080
2:  37 0.703 29 0.517  0.185 -0.048  0.397
3:  43 0.581 58 0.672 -0.091 -0.274  0.095
4:  50 0.460 62 0.645 -0.185 -0.354 -0.001
5:  36 0.667 66 0.470  0.197 -0.005  0.372
> ci.pd( A, detail.labs=TRUE, digits=3 )
                             n1    p1 n2    p2   diff   2.5%  97.5%
1: : 16/(16+36) - 37/(37+28) 52 0.308 65 0.569 -0.262 -0.418 -0.080
2: : 26/(26+11) - 15/(15+14) 37 0.703 29 0.517  0.185 -0.048  0.397
3: : 25/(25+18) - 39/(39+19) 43 0.581 58 0.672 -0.091 -0.274  0.095
4: : 23/(23+27) - 40/(40+22) 50 0.460 62 0.645 -0.185 -0.354 -0.001
5: : 24/(24+12) - 31/(31+35) 36 0.667 66 0.470  0.197 -0.005  0.372
> 
> 
> 
> cleanEx()
> nameEx("clogistic")
> ### * clogistic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clogistic
> ### Title: Conditional logistic regression
> ### Aliases: clogistic
> ### Keywords: models
> 
> ### ** Examples
> 
>   data(bdendo)
>   clogistic(d ~ cest + dur, strata=set, data=bdendo)

Call: 
clogistic(formula = d ~ cest + dur, strata = set, data = bdendo)




         coef exp(coef) se(coef)      z    p
cest.L  0.240     1.271    2.276  0.105 0.92
cest.Q  0.890     2.435    1.812  0.491 0.62
cest.C  0.113     1.120    0.891  0.127 0.90
dur.L   1.965     7.134    2.222  0.884 0.38
dur.Q  -0.716     0.489    1.858 -0.385 0.70
dur.C   0.136     1.146    1.168  0.117 0.91
dur^4      NA        NA    0.000     NA   NA

Likelihood ratio test=35.3  on 6 df, p=3.8e-06, n=254
> 
> 
> 
> cleanEx()
> nameEx("contr.cum")
> ### * contr.cum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contr.cum
> ### Title: Contrast matrices
> ### Aliases: contr.cum contr.2nd contr.diff contr.orth
> ### Keywords: design models
> 
> ### ** Examples
> 
> contr.cum(6)
  2 3 4 5 6
1 0 0 0 0 0
2 1 0 0 0 0
3 1 1 0 0 0
4 1 1 1 0 0
5 1 1 1 1 0
6 1 1 1 1 1
> contr.2nd(6)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    1    0    0    0
[4,]    2    1    0    0
[5,]    3    2    1    0
[6,]    4    3    2    1
> contr.diff(6)
   1  2  3  4  5 6
1  1  0  0  0  0 0
2 -1  1  0  0  0 0
3  0 -1  1  0  0 0
4  0  0 -1  1  0 0
5  0  0  0 -1  1 0
6  0  0  0  0 -1 1
> contr.orth(6)
        [,1]       [,2]        [,3]        [,4]
1  0.2857143 -0.5714286 -0.42857143 -0.28571429
2 -0.4285714  0.6571429 -0.25714286 -0.17142857
3 -0.1428571 -0.1142857  0.91428571 -0.05714286
4  0.1428571  0.1142857  0.08571429  1.05714286
5  0.4285714  0.3428571  0.25714286  0.17142857
6 -0.2857143 -0.4285714 -0.57142857 -0.71428571
>   
> 
> 
> cleanEx()
> nameEx("crr.Lexis")
> ### * crr.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crr.Lexis
> ### Title: Fit a competing risks regression model (Fine-Gray model) using a
> ###   Lexis object)
> ### Aliases: crr.Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> # Thorotrats patients, different histological types of liver cancer
> # Load thorotrast data, and restrict to exposed
> data(thoro)
> tht <- thoro[thoro$contrast==1,]
> # Define exitdate as the date of livercancer
> tht$dox <- pmin( tht$liverdat, tht$exitdat, na.rm=TRUE )
> tht <- subset( tht, dox > injecdat )
> # Convert to calendar years in dates
> tht <- cal.yr( tht )
> 
> # Set up a Lexis object with three subtypes of liver cancer and death
> tht.L <- Lexis( entry = list( per = injecdat,
+                               tfi = 0 ),
+                  exit = list( per = dox ),
+           exit.status = factor( 1*hepcc+2*chola+3*hmang+
+                                 4*(hepcc+chola+hmang==0 & exitstat==1),
+                                 labels=c("No cancer","hepcc","chola","hmang","Dead") ),
+                  data = tht )
NOTE: entry.status has been set to "No cancer" for all.
> summary( tht.L )
           
Transitions:
     To
From        No cancer hepcc chola hmang Dead  Records:  Events: Risk time:
  No cancer        60    44    39    33  813       989      929   20075.21
           
Transitions:
     To
From         Persons:
  No cancer       989
> 
> # Show the transitions
> boxes( tht.L, boxpos=list(x=c(20,rep(80,3),30),
+                           y=c(60,90,60,30,10) ),
+               show.BE=TRUE, scale.R=1000 )
> 
> # Fit a model for the Hepatocellular Carcinoma as outcome
> # - note that you can create a variable on the fly:
> library( cmprsk )
Loading required package: survival
> hepcc <- crr.Lexis( tht.L, "hepcc" ~ volume + I(injecdat-1940) )
crr analysis of event "hepcc" 
               versus "chola" "hmang" "Dead" 
                 with "No cancer" as censoring.
> hepcc$model.Lexis
"hepcc" ~ volume + I(injecdat - 1940)
> hepcc$transitions
                   N
Event: hepcc      44
 comp: chola      39
 comp: hmang      33
 comp: Dead      813
 cens: No cancer  60
> 
> # Models for the three other outcomes:
> chola <- crr.Lexis( tht.L, "chola" ~ volume + I(injecdat-1940) )
crr analysis of event "chola" 
               versus "hepcc" "hmang" "Dead" 
                 with "No cancer" as censoring.
> hmang <- crr.Lexis( tht.L, "hmang" ~ volume + I(injecdat-1940) )
crr analysis of event "hmang" 
               versus "hepcc" "chola" "Dead" 
                 with "No cancer" as censoring.
> dead  <- crr.Lexis( tht.L, "Dead"  ~ volume + I(injecdat-1940) )
crr analysis of event "Dead" 
               versus "hepcc" "chola" "hmang" 
                 with "No cancer" as censoring.
> 
> # Compare the effects
> # NOTE: This is not necessarily a joint model for all transitions.
> zz <- rbind( ci.exp(hepcc),
+              ci.exp(chola),
+              ci.exp(hmang),
+              ci.exp(dead) )
> zz <- cbind( zz[c(1,3,5,7)  ,],
+              zz[c(1,3,5,7)+1,] )
> rownames( zz ) <- c("hepcc","chola","hmang","dead")
> colnames( zz )[c(1,4)] <- rownames( ci.exp(chola) )
> round( zz, 3 )
      volume  2.5% 97.5% I(injecdat - 1940)  2.5% 97.5%
hepcc  1.003 0.985 1.022              0.968 0.868 1.078
chola  1.010 0.985 1.035              0.969 0.865 1.085
hmang  1.060 1.035 1.085              0.877 0.777 0.989
dead   1.000 0.993 1.007              1.029 1.003 1.055
> 
> 
> 
> cleanEx()

detaching ‘package:cmprsk’, ‘package:survival’

> nameEx("cutLexis")
> ### * cutLexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cutLexis
> ### Title: Cut follow-up at a specified date for each person.
> ### Aliases: cutLexis countLexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> # A small artificial example
> xx <- Lexis( entry=list(age=c(17,24,33,29),per=c(1920,1933,1930,1929)),
+              duration=c(23,57,12,15), exit.status=c(1,2,1,2) )
> xx
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      23       0       1      1
2  24 1933      57       0       2      2
3  33 1930      12       0       1      3
4  29 1929      15       0       2      4
> cut <- c(33,47,29,50)
> cutLexis(xx, cut, new.state=3, precursor=1)
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16       0       3      1
5  33 1936       7       3       3      1
2  24 1933      23       0       3      2
6  47 1956      34       3       2      2
7  33 1930      12       3       3      3
4  29 1929      15       0       2      4
> cutLexis(xx, cut, new.state=3, precursor=2)
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16       0       3      1
5  33 1936       7       3       1      1
2  24 1933      23       0       3      2
6  47 1956      34       3       3      2
7  33 1930      12       3       1      3
4  29 1929      15       0       2      4
> cutLexis(xx, cut, new.state=3, precursor=1:2)
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16       0       3      1
5  33 1936       7       3       3      1
2  24 1933      23       0       3      2
6  47 1956      34       3       3      2
7  33 1930      12       3       3      3
4  29 1929      15       0       2      4
> # The same as the last example
> cutLexis(xx, cut, new.state=3)
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16       0       3      1
5  33 1936       7       3       1      1
2  24 1933      23       0       3      2
6  47 1956      34       3       2      2
7  33 1930      12       3       1      3
4  29 1929      15       0       2      4
> 
> # The same example with a factor status variable
> yy <- Lexis(entry = list(age=c(17,24,33,29),per=c(1920,1933,1930,1929)),
+             duration = c(23,57,12,15),
+             entry.status = factor(rep("alpha",4),
+             levels=c("alpha","beta","gamma")),
+             exit.status = factor(c("alpha","beta","alpha","beta"),
+             levels=c("alpha","beta","gamma")))
> 
> cutLexis(yy,c(33,47,29,50),precursor="alpha",new.state="gamma")
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16   alpha   gamma      1
5  33 1936       7   gamma   gamma      1
2  24 1933      23   alpha   gamma      2
6  47 1956      34   gamma    beta      2
7  33 1930      12   gamma   gamma      3
4  29 1929      15   alpha    beta      4
> cutLexis(yy,c(33,47,29,50),precursor=c("alpha","beta"),new.state="aleph")
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920      16   alpha   aleph      1
5  33 1936       7   aleph   aleph      1
2  24 1933      23   alpha   aleph      2
6  47 1956      34   aleph   aleph      2
7  33 1930      12   aleph   aleph      3
4  29 1929      15   alpha    beta      4
> 
> ## Using a dataframe as cut argument
> rl <- data.frame( lex.id=1:3, cut=c(19,53,26), timescale="age", new.state=3 )
> rl
  lex.id cut timescale new.state
1      1  19       age         3
2      2  53       age         3
3      3  26       age         3
> cutLexis( xx, rl )
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920       2       0       3      1
5  19 1922      21       3       1      1
2  24 1933      29       0       3      2
6  53 1962      28       3       2      2
7  33 1930      12       3       1      3
4  29 1929      15       0       2      4
> cutLexis( xx, rl, precursor=1 )
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920       2       0       3      1
5  19 1922      21       3       3      1
2  24 1933      29       0       3      2
6  53 1962      28       3       2      2
7  33 1930      12       3       3      3
4  29 1929      15       0       2      4
> cutLexis( xx, rl, precursor=0:2 )
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920       2       0       3      1
5  19 1922      21       3       3      1
2  24 1933      29       0       3      2
6  53 1962      28       3       3      2
7  33 1930      12       3       3      3
4  29 1929      15       0       2      4
> 
> ## It is immaterial in what order splitting and cutting is done
> xs <- splitLexis( xx, breaks=seq(0,100,10), time.scale="age" )
> xs
   lex.id age  per lex.dur lex.Cst lex.Xst
1       1  17 1920       3       0       0
2       1  20 1923      10       0       0
3       1  30 1933      10       0       1
4       2  24 1933       6       0       0
5       2  30 1939      10       0       0
6       2  40 1949      10       0       0
7       2  50 1959      10       0       0
8       2  60 1969      10       0       0
9       2  70 1979      10       0       0
10      2  80 1989       1       0       2
11      3  33 1930       7       0       0
12      3  40 1937       5       0       1
13      4  29 1929       1       0       0
14      4  30 1930      10       0       0
15      4  40 1940       4       0       2
> xsC <- cutLexis(xs, rl, precursor=0 )
> 
> xC <- cutLexis( xx, rl, pre=0 )
> xC
  age  per lex.dur lex.Cst lex.Xst lex.id
1  17 1920       2       0       3      1
5  19 1922      21       3       1      1
2  24 1933      29       0       3      2
6  53 1962      28       3       2      2
7  33 1930      12       3       1      3
4  29 1929      15       0       2      4
> xCs <- splitLexis( xC, breaks=seq(0,100,10), time.scale="age" )
> xCs
   lex.id age  per lex.dur lex.Cst lex.Xst
1       1  17 1920       2       0       3
2       1  19 1922       1       3       3
3       1  20 1923      10       3       3
4       1  30 1933      10       3       1
5       2  24 1933       6       0       0
6       2  30 1939      10       0       0
7       2  40 1949      10       0       0
8       2  50 1959       3       0       3
9       2  53 1962       7       3       3
10      2  60 1969      10       3       3
11      2  70 1979      10       3       3
12      2  80 1989       1       3       2
13      3  33 1930       7       3       3
14      3  40 1937       5       3       1
15      4  29 1929       1       0       0
16      4  30 1930      10       0       0
17      4  40 1940       4       0       2
> str(xCs)
Classes ‘Lexis’ and 'data.frame':	17 obs. of  6 variables:
 $ lex.id : int  1 1 1 1 2 2 2 2 2 2 ...
 $ age    : num  17 19 20 30 24 30 40 50 53 60 ...
 $ per    : num  1920 1922 1923 1933 1933 ...
 $ lex.dur: num  2 1 10 10 6 10 10 3 7 10 ...
 $ lex.Cst: num  0 3 3 3 0 0 0 0 3 3 ...
 $ lex.Xst: num  3 3 3 1 0 0 0 3 3 3 ...
 - attr(*, "breaks")=List of 2
  ..$ age: num  0 10 20 30 40 50 60 70 80 90 ...
  ..$ per: NULL
 - attr(*, "time.scales")= chr  "age" "per"
 - attr(*, "time.since")= chr  "" ""
> 
> 
> 
> cleanEx()
> nameEx("diet")
> ### * diet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diet
> ### Title: Diet and heart data
> ### Aliases: diet
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(diet)
> # Illustrate the follow-up in a Lexis diagram
> Lexis.diagram( age=c(30,75), date=c(1965,1990),
+                entry.date=cal.yr(doe), exit.date=cal.yr(dox), birth.date=cal.yr(dob), 
+                fail=(fail>0), pch.fail=c(NA,16), col.fail=c(NA,"red"), cex.fail=1.0,
+                data=diet )
> 
> 
> 
> 
> cleanEx()
> nameEx("effx")
> ### * effx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: effx
> ### Title: Function to calculate effects
> ### Aliases: effx
> ### Keywords: models regression
> 
> ### ** Examples
> 
> library(Epi)
> data(births)
> births$hyp <- factor(births$hyp,labels=c("normal","hyper"))
> births$sex <- factor(births$sex,labels=c("M","F"))
> 
> # bweight is the birth weight of the baby in gms, and is a metric
> # response (the default)
> 
> # effect of hypertension on birth weight
> effx(bweight,exposure=hyp,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  hyp 

hyp is a factor with levels: normal / hyper 
baseline is  normal 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of hyp on bweight 
number of observations  500 

Effect   2.5%  97.5% 
  -431   -585   -276 

Test for no effects of exposure on 1 df: p-value= 4.9e-08 
> # effect of hypertension on birth weight stratified by sex
> effx(bweight,exposure=hyp,strata=sex,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  hyp 
stratified by :  sex 

hyp is a factor with levels: normal / hyper 
baseline is  normal 
sex is a factor with levels: M/F 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of hyp on bweight 
stratified by sex 

number of observations  500 

                               Effect 2.5% 97.5%
strata M level hyper vs normal   -496 -696  -297
strata F level hyper vs normal   -380 -617  -142

Test for effect modification on 1 df: p-value= 0.462 
> # effect of hypertension on birth weight controlled for sex
> effx(bweight,exposure=hyp,control=sex,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  hyp 
control vars  :  sex 

hyp is a factor with levels: normal / hyper 
baseline is  normal 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of hyp on bweight 
controlled for sex 

number of observations  500 

Effect   2.5%  97.5% 
  -448   -601   -295 

Test for no effects of exposure on 1 df: p-value= 9.07e-09 
> # effect of gestation time on birth weight
> effx(bweight,exposure=gestwks,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  gestwks 

gestwks is numeric 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of an increase of 1 unit in gestwks on bweight 
number of observations  490 

Effect   2.5%  97.5% 
   197    180    214 

Test for no effects of exposure on 1 df: p-value= <2e-16 
> # effect of gestation time on birth weight stratified by sex
> effx(bweight,exposure=gestwks,strata=sex,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  gestwks 
stratified by :  sex 

gestwks is numeric 
sex is a factor with levels: M/F 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of an increase of 1 unit in gestwks on bweight 
stratified by sex 

number of observations  490 

         Effect 2.5% 97.5%
strata M    203  177   229
strata F    191  169   213

Test for effect modification on 1 df: p-value= 0.487 
> # effect of gestation time on birth weight controlled for sex
> effx(bweight,exposure=gestwks,control=sex,data=births)
--------------------------------------------------------------------------- 
response      :  bweight 
type          :  metric 
exposure      :  gestwks 
control vars  :  sex 

gestwks is numeric 
effects are measured as differences in means 
--------------------------------------------------------------------------- 

effect of an increase of 1 unit in gestwks on bweight 
controlled for sex 

number of observations  490 

Effect   2.5%  97.5% 
   196    179    213 

Test for no effects of exposure on 1 df: p-value= <2e-16 
> 
> # lowbw is a binary response coded 1 for low birth weight and 0 otherwise
> # effect of hypertension on low birth weight
> effx(lowbw,type="binary",exposure=hyp,data=births)
--------------------------------------------------------------------------- 
response      :  lowbw 
type          :  binary 
exposure      :  hyp 

hyp is a factor with levels: normal / hyper 
baseline is  normal 
effects are measured as odds ratios 
--------------------------------------------------------------------------- 

effect of hyp on lowbw 
number of observations  500 

Effect   2.5%  97.5% 
  3.73   2.03   6.87 

Test for no effects of exposure on 1 df: p-value= 6.06e-05 
> effx(lowbw,type="binary",exposure=hyp,eff="RR",data=births)
--------------------------------------------------------------------------- 
response      :  lowbw 
type          :  binary 
exposure      :  hyp 

hyp is a factor with levels: normal / hyper 
baseline is  normal 
effects are measured as relative risk 
--------------------------------------------------------------------------- 

effect of hyp on lowbw 
number of observations  500 

Effect   2.5%  97.5% 
  2.97   1.85   4.78 

Test for no effects of exposure on 1 df: p-value= 6.06e-05 
> 
> 
> 
> cleanEx()
> nameEx("effx.match")
> ### * effx.match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: effx.match
> ### Title: Function to calculate effects for individually matched
> ###   case-control studies
> ### Aliases: effx.match
> ### Keywords: models regression
> 
> ### ** Examples
> 
> library(Epi)
> library(survival)
> data(bdendo)
> 
> # d is the case-control variable, set is the matching variable.
> # The variable est is a factor and refers to estrogen use (no,yes)
> # The variable hyp is a factor with 2 levels and refers to hypertension (no, yes)
> # effect of est on the odds of being a case
> effx.match(d,exposure=est,match=set,data=bdendo)
--------------------------------------------------------------------------- 
response      :  d 
exposure      :  est 

est is a factor with levels: No / Yes 
baseline is  No 
effects are measured as odds ratios 
--------------------------------------------------------------------------- 

effect of est on d 
number of observations  315 

Effect   2.5%  97.5% 
  7.95   3.49  18.10 

Test for no effects of exposure:   
chisq= 35.35  df= 1  p-value= <2e-16 
> # effect of est on the odds of being a case, stratified by hyp
> effx.match(d,exposure=est,match=set,strata=hyp,data=bdendo)
--------------------------------------------------------------------------- 
response      :  d 
exposure      :  est 
stratified by :  hyp 

est is a factor with levels: No / Yes 
baseline is  No 
hyp is a factor with levels: No/Yes 
effects are measured as odds ratios 
--------------------------------------------------------------------------- 

effect of est on d 
stratified by hyp 

number of observations  315 

                           Effect 2.5% 97.5%
strata No level Yes vs No    9.50 3.53  25.5
strata Yes level Yes vs No   4.77 1.07  21.2
Warning in is.na(pv) :
  is.na() applied to non-(list or vector) of type 'NULL'

Test for effect modification on 1 df: p-value=  
Warning in is.na(pv) :
  is.na() applied to non-(list or vector) of type 'NULL'
> # effect of est on the odds of being a case, controlled for hyp
> effx.match(d,exposure=est,match=set,control=hyp,data=bdendo)
--------------------------------------------------------------------------- 
response      :  d 
exposure      :  est 
control vars  :  hyp 

est is a factor with levels: No / Yes 
baseline is  No 
effects are measured as odds ratios 
--------------------------------------------------------------------------- 

effect of est on d 
controlled for hyp 

number of observations  315 

Effect   2.5%  97.5% 
  7.96   3.45  18.40 
Warning in is.na(pv) :
  is.na() applied to non-(list or vector) of type 'NULL'

Test for no effects of exposure on 1 df: p-value=  
Warning in is.na(pv) :
  is.na() applied to non-(list or vector) of type 'NULL'
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("erl")
> ### * erl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: erl
> ### Title: Compute survival functions from rates and expected residual
> ###   lifetime in an illness-death model as well as years of life lost to
> ###   disease.
> ### Aliases: surv1 surv2 erl1 erl yll
> ### Keywords: survival
> 
> ### ** Examples
> 
> library( Epi )
> data( DMlate )
> # Naive Lexis object
> Lx <- Lexis( entry = list( age = dodm-dobth ),
+               exit = list( age = dox -dobth ),
+        exit.status = factor( !is.na(dodth), labels=c("DM","Dead") ),
+               data = DMlate )
NOTE: entry.status has been set to "DM" for all.
Warning in Lexis(entry = list(age = dodm - dobth), exit = list(age = dox -  :
  Dropping 4 rows with duration of follow up < tol

> # Cut follow-up at insulin inception
> Lc <- cutLexis( Lx, cut = Lx$doins-Lx$dob,
+               new.state = "DM/ins",
+        precursor.states = "DM" )
> summary( Lc )
        
Transitions:
     To
From       DM DM/ins Dead  Records:  Events: Risk time:  Persons:
  DM     6157   1694 2048      9899     3742   45885.49      9899
  DM/ins    0   1340  451      1791      451    8387.77      1791
  Sum    6157   3034 2499     11690     4193   54273.27      9996
> # Split in small age intervals
> Sc <- splitLexis( Lc, breaks=seq(0,120,2) )
> summary( Sc )
        
Transitions:
     To
From        DM DM/ins Dead  Records:  Events: Risk time:  Persons:
  DM     28967   1694 2048     32709     3742   45885.49      9899
  DM/ins     0   5540  451      5991      451    8387.77      1791
  Sum    28967   7234 2499     38700     4193   54273.27      9996
> 
> # Overview of object
> boxes( Sc, boxpos=TRUE, show.BE=TRUE, scale.R=100 )
> 
> # Knots for splines
> a.kn <- 2:9*10
> 
> # Mortality among DM
> mW <- glm( lex.Xst=="Dead" ~ Ns( age, knots=a.kn ),
+            offset = log(lex.dur),
+            family = poisson,
+              data = subset(Sc,lex.Cst=="DM") )
Warning: glm.fit: fitted rates numerically 0 occurred
> 
> # Mortality among insulin treated
> mI <- update( mW, data = subset(Sc,lex.Cst=="DM/ins") )
> 
> # Total motality
> mT <- update( mW, data = Sc )
> 
> # Incidence of insulin inception
> lI <- update( mW, lex.Xst=="DM/ins" ~ . )
> 
> # From these we can now derive the fitted rates in intervals of 1 year's
> # length. In real applications you would use much smaller interval like
> # 1 month:
> # int <- 1/12 
> int <- 1
> 
> # Prediction frame to return rates in units of cases per 1 year
> # - we start at age 40 since rates of insulin inception are largely
> # indeterminate before age 40
> nd <- data.frame( age = seq( 40+int, 110, int ) - int/2,
+               lex.dur = 1 )
> muW <- predict( mW, newdata = nd, type = "response" )
> muD <- predict( mI, newdata = nd, type = "response" )
> lam <- predict( lI, newdata = nd, type = "response" )
> 
> # Compute the survival function, and the conditional from ages 50 resp. 70
> s1 <- surv1( int, muD, age.in=40, A=c(50,70) )
> round( s1, 3 )
   age   A40   A50   A70
1   40 1.000 1.000 1.000
2   41 0.995 1.000 1.000
3   42 0.989 1.000 1.000
4   43 0.982 1.000 1.000
5   44 0.974 1.000 1.000
6   45 0.964 1.000 1.000
7   46 0.954 1.000 1.000
8   47 0.941 1.000 1.000
9   48 0.928 1.000 1.000
10  49 0.912 1.000 1.000
11  50 0.894 1.000 1.000
12  51 0.874 0.978 1.000
13  52 0.853 0.954 1.000
14  53 0.829 0.928 1.000
15  54 0.804 0.899 1.000
16  55 0.777 0.869 1.000
17  56 0.749 0.837 1.000
18  57 0.719 0.804 1.000
19  58 0.688 0.770 1.000
20  59 0.657 0.734 1.000
21  60 0.624 0.698 1.000
22  61 0.592 0.662 1.000
23  62 0.560 0.626 1.000
24  63 0.528 0.590 1.000
25  64 0.496 0.555 1.000
26  65 0.465 0.520 1.000
27  66 0.434 0.485 1.000
28  67 0.404 0.452 1.000
29  68 0.375 0.419 1.000
30  69 0.347 0.388 1.000
31  70 0.319 0.357 1.000
32  71 0.293 0.327 0.916
33  72 0.267 0.298 0.835
34  73 0.242 0.270 0.757
35  74 0.217 0.243 0.681
36  75 0.194 0.217 0.608
37  76 0.172 0.192 0.539
38  77 0.151 0.169 0.473
39  78 0.131 0.147 0.411
40  79 0.113 0.126 0.353
41  80 0.096 0.107 0.299
42  81 0.080 0.089 0.251
43  82 0.066 0.074 0.207
44  83 0.054 0.060 0.168
45  84 0.043 0.048 0.135
46  85 0.034 0.038 0.106
47  86 0.026 0.029 0.081
48  87 0.020 0.022 0.062
49  88 0.014 0.016 0.045
50  89 0.010 0.012 0.033
51  90 0.007 0.008 0.023
52  91 0.005 0.006 0.016
53  92 0.003 0.004 0.010
54  93 0.002 0.002 0.007
55  94 0.001 0.001 0.004
56  95 0.001 0.001 0.002
57  96 0.000 0.000 0.001
58  97 0.000 0.000 0.001
59  98 0.000 0.000 0.000
60  99 0.000 0.000 0.000
61 100 0.000 0.000 0.000
62 101 0.000 0.000 0.000
63 102 0.000 0.000 0.000
64 103 0.000 0.000 0.000
65 104 0.000 0.000 0.000
66 105 0.000 0.000 0.000
67 106 0.000 0.000 0.000
68 107 0.000 0.000 0.000
69 108 0.000 0.000 0.000
70 109 0.000 0.000 0.000
71 110 0.000 0.000 0.000
> 
> s2 <- surv2( int, muW, muD, lam, age.in=40, A=c(50,70) )
> round( s2, 3 )
   age   A40   A50   A70
    40 1.000 1.000 1.000
1   41 0.993 1.000 1.000
2   42 0.986 1.000 1.000
3   43 0.979 1.000 1.000
4   44 0.971 1.000 1.000
5   45 0.964 1.000 1.000
6   46 0.955 1.000 1.000
7   47 0.946 1.000 1.000
8   48 0.936 1.000 1.000
9   49 0.926 1.000 1.000
10  50 0.914 1.000 1.000
11  51 0.901 0.990 1.000
12  52 0.886 0.979 1.000
13  53 0.870 0.966 1.000
14  54 0.853 0.952 1.000
15  55 0.834 0.937 1.000
16  56 0.814 0.920 1.000
17  57 0.792 0.901 1.000
18  58 0.769 0.881 1.000
19  59 0.745 0.860 1.000
20  60 0.720 0.836 1.000
21  61 0.694 0.812 1.000
22  62 0.667 0.786 1.000
23  63 0.639 0.759 1.000
24  64 0.611 0.731 1.000
25  65 0.583 0.702 1.000
26  66 0.554 0.672 1.000
27  67 0.525 0.642 1.000
28  68 0.497 0.611 1.000
29  69 0.468 0.579 1.000
30  70 0.439 0.547 1.000
31  71 0.410 0.515 0.957
32  72 0.382 0.482 0.911
33  73 0.353 0.450 0.863
34  74 0.325 0.417 0.813
35  75 0.297 0.384 0.762
36  76 0.270 0.351 0.709
37  77 0.243 0.319 0.655
38  78 0.217 0.287 0.600
39  79 0.193 0.257 0.545
40  80 0.169 0.227 0.491
41  81 0.147 0.199 0.438
42  82 0.126 0.173 0.387
43  83 0.107 0.148 0.338
44  84 0.090 0.125 0.291
45  85 0.074 0.105 0.248
46  86 0.061 0.086 0.208
47  87 0.049 0.070 0.172
48  88 0.038 0.056 0.140
49  89 0.030 0.044 0.112
50  90 0.023 0.034 0.088
51  91 0.017 0.026 0.067
52  92 0.012 0.019 0.051
53  93 0.009 0.014 0.037
54  94 0.006 0.010 0.027
55  95 0.004 0.007 0.019
56  96 0.003 0.004 0.013
57  97 0.002 0.003 0.008
58  98 0.001 0.002 0.005
59  99 0.001 0.001 0.003
60 100 0.000 0.001 0.002
61 101 0.000 0.000 0.001
62 102 0.000 0.000 0.001
63 103 0.000 0.000 0.000
64 104 0.000 0.000 0.000
65 105 0.000 0.000 0.000
66 106 0.000 0.000 0.000
67 107 0.000 0.000 0.000
68 108 0.000 0.000 0.000
69 109 0.000 0.000 0.000
70 110 0.000 0.000 0.000
> 
> # How much is YLL overrated by ignoring insulin incidence?
> round( YLL <- cbind(
+ yll( int, muW, muD, lam, A = 41:90, age.in = 40 ),
+ yll( int, muW, muD, lam, A = 41:90, age.in = 40, immune=TRUE ) ), 2 )[seq(1,51,10),]
NOTE: Calculations assume that Well persons cannot get Ill (quite silly!). 
    [,1] [,2]
A40 3.22 8.04
A50 4.85 7.87
A60 4.37 5.77
A70 2.94 3.50
A80 1.88 2.09
A90 1.05 1.11
> 
> par( mar=c(3,3,1,1), mgp=c(3,1,0)/1.6, bty="n", las=1 )
> matplot( 40:90, YLL,
+          type="l", lty=1, lwd=3,
+          ylim=c(0,10), yaxs="i", xlab="Age" )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ewrates")
> ### * ewrates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ewrates
> ### Title: Rates of lung and nasal cancer mortality, and total mortality.
> ### Aliases: ewrates
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ewrates)
> str(ewrates)
'data.frame':	150 obs. of  5 variables:
 $ year : num  1931 1931 1931 1931 1931 ...
 $ age  : num  10 15 20 25 30 35 40 45 50 55 ...
 $ lung : num  1 2 6 14 30 68 149 274 431 586 ...
 $ nasal: num  0 0 0 0 1 1 3 5 10 15 ...
 $ other: num  1269 2201 3116 3024 3188 ...
> 
> 
> 
> cleanEx()
> nameEx("fit.add")
> ### * fit.add
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit.add
> ### Title: Fit an addive excess risk model to interval censored data.
> ### Aliases: fit.add
> ### Keywords: models regression survival
> 
> ### ** Examples
> 
>   data( HIV.dk ) 
Warning in data(HIV.dk) : data set ‘HIV.dk’ not found
>   
> 
> 
> cleanEx()
> nameEx("fit.mult")
> ### * fit.mult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit.mult
> ### Title: Fits a multiplicative relative risk model to interval censored
> ###   data.
> ### Aliases: fit.mult
> ### Keywords: models regression survival
> 
> ### ** Examples
> 
>   data( HIV.dk ) 
Warning in data(HIV.dk) : data set ‘HIV.dk’ not found
>   
> 
> 
> cleanEx()
> nameEx("foreign.Lexis")
> ### * foreign.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: foreign.Lexis
> ### Title: Create a data structures suitable for use with packages mstate,
> ###   etm.
> ### Aliases: msdata msdata.Lexis etm etm.Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> data(DMlate)
> str(DMlate)
'data.frame':	10000 obs. of  7 variables:
 $ sex  : Factor w/ 2 levels "M","F": 2 1 2 2 1 2 1 1 2 1 ...
 $ dobth: num  1940 1939 1918 1965 1933 ...
 $ dodm : num  1999 2003 2005 2009 2009 ...
 $ dodth: num  NA NA NA NA NA ...
 $ dooad: num  NA 2007 NA NA NA ...
 $ doins: num  NA NA NA NA NA NA NA NA NA NA ...
 $ dox  : num  2010 2010 2010 2010 2010 ...
> dml <- Lexis( entry = list(Per=dodm,Age=dodm-dobth,DMdur=0),
+                exit = list(Per=dox),
+         exit.status = factor(!is.na(dodth),labels=c("DM","Dead")),
+                data = DMlate[1:1000,] )
NOTE: entry.status has been set to "DM" for all.
> dmi <- cutLexis( dml, cut=dml$doins, new.state="Ins", pre="DM" )
> summary( dmi )
     
Transitions:
     To
From   DM Ins Dead  Records:  Events: Risk time:  Persons:
  DM  616 178  195       989      373    4454.40       989
  Ins   0 142   47       189       47     854.16       189
  Sum 616 320  242      1178      420    5308.56      1000
> 
> # Use the interface to the mstate package
> if( require(mstate) )
+ {
+ ms.dmi <- msdata.Lexis( dmi )
+ # Check that all the transitions and person-years got across.
+ with( ms.dmi, rbind( table(status,trans),
+                      tapply(Tstop-Tstart,trans,sum) ) )
+ }
Loading required package: mstate
Loading required package: survival
         1        2        3
0  811.000  794.000 142.0000
1  178.000  195.000  47.0000
  4454.401 4454.401 854.1602
> 
> # Use the etm package directly with a Lexis object
> if( require(etm) )
+ {
+ dmi <- subset(dmi,lex.id<1000)
+ etm.D <- etm.Lexis( dmi, time.scale=3 )
+ plot( etm.D, col=rainbow(5), lwd=2, lty=1, xlab="DM duration" )
+ }
Loading required package: etm

Attaching package: ‘etm’

The following object is masked from ‘package:Epi’:

    etm

> 
> 
> 
> cleanEx()

detaching ‘package:etm’, ‘package:mstate’, ‘package:survival’

> nameEx("gen.exp")
> ### * gen.exp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gen.exp
> ### Title: Generate covariates for drug-exposure follow-up from drug
> ###   purchase records.
> ### Aliases: gen.exp
> ### Keywords: data manipulation
> 
> ### ** Examples
> 
> # Construct a simple data frame of purchases for 3 persons
> # The purchase units (in variable dose) correspond to
> n <- c( 10, 17, 8 )
> dop <- c( 1995.2+cumsum(sample(1:4/10,n[1],replace=TRUE)),
+           1997.3+cumsum(sample(1:4/10,n[2],replace=TRUE)),
+           1997.3+cumsum(sample(1:4/10,n[3],replace=TRUE)) )
> amt <- sample(   1:3/15, sum(n), replace=TRUE )
> dpt <- sample( 15:20/25, sum(n), replace=TRUE )
> dfr <- data.frame( id = rep(1:3,n),
+                   dop,
+                   amt = amt,
+                   dpt = dpt )
> round( dfr, 3 )
   id    dop   amt  dpt
1   1 1995.4 0.200 0.68
2   1 1995.6 0.200 0.80
3   1 1995.9 0.067 0.68
4   1 1996.3 0.200 0.68
5   1 1996.4 0.133 0.68
6   1 1996.8 0.200 0.80
7   1 1997.2 0.133 0.80
8   1 1997.5 0.200 0.68
9   1 1997.8 0.133 0.76
10  1 1997.9 0.133 0.80
11  2 1997.4 0.200 0.68
12  2 1997.5 0.067 0.76
13  2 1997.8 0.133 0.68
14  2 1998.0 0.200 0.64
15  2 1998.4 0.200 0.76
16  2 1998.6 0.133 0.64
17  2 1998.9 0.200 0.76
18  2 1999.3 0.133 0.60
19  2 1999.5 0.067 0.64
20  2 1999.9 0.067 0.60
21  2 2000.3 0.067 0.64
22  2 2000.4 0.067 0.60
23  2 2000.7 0.133 0.72
24  2 2000.8 0.133 0.80
25  2 2001.0 0.133 0.76
26  2 2001.2 0.200 0.76
27  2 2001.3 0.067 0.68
28  3 1997.5 0.133 0.68
29  3 1997.9 0.067 0.76
30  3 1998.1 0.133 0.72
31  3 1998.3 0.067 0.72
32  3 1998.6 0.133 0.68
33  3 1998.8 0.200 0.64
34  3 1998.9 0.067 0.80
35  3 1999.3 0.200 0.72
> # Construct a simple dataframe for follow-up periods for these 3 persons
> fu  <- data.frame( id = 1:3,
+                   doe = c(1995,1997,1996)+1:3/4,
+                   dox = c(2001,2003,2002)+1:3/5 )
> round( fu, 3 )
  id     doe    dox
1  1 1995.25 2001.2
2  2 1997.50 2003.4
3  3 1996.75 2002.6
> ( dpos <- gen.exp( dfr,
+                     fu = fu,
+                 breaks = seq(1990,2015,0.5),
+                   lags = 2:3/5 ) )
     id     dof tfi       tfc      cdos  ldos.0.4     ldos.0.6
1.1   1 1995.25 0.0 0.0000000 0.0000000 0.0000000 0.000000e+00
1.2   1 1995.50 0.1 0.0000000 0.0680000 0.0000000 0.000000e+00
1.3   1 1996.00 0.6 0.0000000 0.4380000 0.1360000 0.000000e+00
1.4   1 1996.50 1.1 0.0000000 0.6026667 0.4666667 3.647059e-01
1.5   1 1997.00 1.6 0.0000000 0.9600000 0.6706667 5.346667e-01
1.6   1 1997.50 2.1 0.0000000 1.1333333 1.0000000 8.800000e-01
1.7   1 1998.00 2.6 0.0000000 1.4863158 1.2013333 1.133333e+00
1.8   1 1998.50 3.1 0.3578947 1.6000000 1.5663158 1.409333e+00
1.9   1 1999.00 3.6 0.8578947 1.6000000 1.6000000 1.600000e+00
1.10  1 1999.50 4.1 1.3578947 1.6000000 1.6000000 1.600000e+00
1.11  1 2000.00 4.6 1.8578947 1.6000000 1.6000000 1.600000e+00
1.12  1 2000.50 5.1 2.3578947 1.6000000 1.6000000 1.600000e+00
1.13  1 2001.00 5.6 2.8578947 1.6000000 1.6000000 1.600000e+00
1.14  1 2001.20 5.8 3.0578947 1.6000000 1.6000000 1.600000e+00
2.1   2 1997.50 0.1 0.0000000 0.0680000 0.0000000 0.000000e+00
2.2   2 1998.00 0.6 0.0000000 0.4000000 0.1360000 1.546141e-13
2.3   2 1998.50 1.1 0.0000000 0.6760000 0.4640000 3.346667e-01
2.4   2 1999.00 1.6 0.0000000 1.0093333 0.7520000 6.000000e-01
2.5   2 1999.50 2.1 0.0000000 1.2533333 1.0853333 9.333333e-01
2.6   2 2000.00 2.6 0.0000000 1.3933333 1.3164444 1.193333e+00
2.7   2 2000.50 3.1 0.0000000 1.5241667 1.4000000 1.333333e+00
2.8   2 2001.00 3.6 0.0000000 1.7585185 1.5333333 1.464000e+00
2.9   2 2001.50 4.1 0.0000000 2.1398285 1.8365926 1.678519e+00
2.10  2 2002.00 4.6 0.4115124 2.2000000 2.2000000 2.064593e+00
2.11  2 2002.50 5.1 0.9115124 2.2000000 2.2000000 2.200000e+00
2.12  2 2003.00 5.6 1.4115124 2.2000000 2.2000000 2.200000e+00
2.13  2 2003.40 6.0 1.8115124 2.2000000 2.2000000 2.200000e+00
3.1   3 1996.75 0.0 0.0000000 0.0000000 0.0000000 0.000000e+00
3.2   3 1997.00 0.0 0.0000000 0.0000000 0.0000000 0.000000e+00
3.3   3 1997.50 0.0 0.0000000 0.0000000 0.0000000 0.000000e+00
3.4   3 1998.00 0.5 0.0000000 0.2000000 0.0680000 0.000000e+00
3.5   3 1998.50 1.0 0.0000000 0.4000000 0.2000000 1.333333e-01
3.6   3 1999.00 1.5 0.0000000 0.6613333 0.4000000 4.000000e-01
3.7   3 1999.50 2.0 0.0000000 0.9440000 0.7253333 5.973333e-01
3.8   3 2000.00 2.5 0.4222222 1.0000000 1.0000000 8.720000e-01
3.9   3 2000.50 3.0 0.9222222 1.0000000 1.0000000 1.000000e+00
3.10  3 2001.00 3.5 1.4222222 1.0000000 1.0000000 1.000000e+00
3.11  3 2001.50 4.0 1.9222222 1.0000000 1.0000000 1.000000e+00
3.12  3 2002.00 4.5 2.4222222 1.0000000 1.0000000 1.000000e+00
3.13  3 2002.50 5.0 2.9222222 1.0000000 1.0000000 1.000000e+00
3.14  3 2002.60 5.1 3.0222222 1.0000000 1.0000000 1.000000e+00
> ( xpos <- gen.exp( dfr,
+                     fu = fu,
+                use.dpt = FALSE,
+                 breaks = seq(1990,2015,0.5),
+                   lags = 2:3/5 ) )
     id     dof tfi       tfc      cdos   ldos.0.4     ldos.0.6
1.1   1 1995.25 0.0 0.0000000 0.0000000 0.00000000 0.000000e+00
1.2   1 1995.50 0.1 0.0000000 0.1000000 0.00000000 0.000000e+00
1.3   1 1996.00 0.6 0.0000000 0.4166667 0.20000000 0.000000e+00
1.4   1 1996.50 1.1 0.0000000 0.7000000 0.43333333 4.000000e-01
1.5   1 1997.00 1.6 0.0000000 0.9000000 0.73333333 6.666667e-01
1.6   1 1997.50 2.1 0.0000000 1.1333333 0.95000000 8.500000e-01
1.7   1 1998.00 2.6 0.0000000 1.5253333 1.20000000 1.088889e+00
1.8   1 1998.50 3.1 0.3727273 1.6000000 1.58400000 1.466667e+00
1.9   1 1999.00 3.6 0.8727273 1.6000000 1.60000000 1.600000e+00
1.10  1 1999.50 4.1 1.3727273 1.6000000 1.60000000 1.600000e+00
1.11  1 2000.00 4.6 1.8727273 1.6000000 1.60000000 1.600000e+00
1.12  1 2000.50 5.1 2.3727273 1.6000000 1.60000000 1.600000e+00
1.13  1 2001.00 5.6 2.8727273 1.6000000 1.60000000 1.600000e+00
1.14  1 2001.20 5.8 3.0727273 1.6000000 1.60000000 1.600000e+00
2.1   2 1997.50 0.1 0.0000000 0.2000000 0.00000000 0.000000e+00
2.2   2 1998.00 0.6 0.0000000 0.4000000 0.22222222 4.547474e-13
2.3   2 1998.50 1.1 0.0000000 0.7000000 0.45000000 3.333333e-01
2.4   2 1999.00 1.6 0.0000000 0.9833333 0.80000000 6.000000e-01
2.5   2 1999.50 2.1 0.0000000 1.2666667 1.03333333 9.333333e-01
2.6   2 2000.00 2.6 0.0000000 1.3500000 1.28333333 1.200000e+00
2.7   2 2000.50 3.1 0.0000000 1.4888889 1.36666667 1.333333e+00
2.8   2 2001.00 3.6 0.0000000 1.8000000 1.51111111 1.466667e+00
2.9   2 2001.50 4.1 0.0781250 2.2000000 1.86666667 1.733333e+00
2.10  2 2002.00 4.6 0.5781250 2.2000000 2.20000000 2.188034e+00
2.11  2 2002.50 5.1 1.0781250 2.2000000 2.20000000 2.200000e+00
2.12  2 2003.00 5.6 1.5781250 2.2000000 2.20000000 2.200000e+00
2.13  2 2003.40 6.0 1.9781250 2.2000000 2.20000000 2.200000e+00
3.1   3 1996.75 0.0 0.0000000 0.0000000 0.00000000 0.000000e+00
3.2   3 1997.00 0.0 0.0000000 0.0000000 0.00000000 0.000000e+00
3.3   3 1997.50 0.0 0.0000000 0.0000000 0.00000000 0.000000e+00
3.4   3 1998.00 0.5 0.0000000 0.1666667 0.03333333 0.000000e+00
3.5   3 1998.50 1.0 0.0000000 0.3777778 0.20000000 1.333333e-01
3.6   3 1999.00 1.5 0.0000000 0.7500000 0.40000000 3.555556e-01
3.7   3 1999.50 2.0 0.0000000 0.8888889 0.76666667 7.333333e-01
3.8   3 2000.00 2.5 0.2500000 1.0000000 0.93333333 8.444444e-01
3.9   3 2000.50 3.0 0.7500000 1.0000000 1.00000000 1.000000e+00
3.10  3 2001.00 3.5 1.2500000 1.0000000 1.00000000 1.000000e+00
3.11  3 2001.50 4.0 1.7500000 1.0000000 1.00000000 1.000000e+00
3.12  3 2002.00 4.5 2.2500000 1.0000000 1.00000000 1.000000e+00
3.13  3 2002.50 5.0 2.7500000 1.0000000 1.00000000 1.000000e+00
3.14  3 2002.60 5.1 2.8500000 1.0000000 1.00000000 1.000000e+00
> 
> # How many relevant columns
> nvar <- ncol(xpos)-3
> clrs <- rainbow(nvar)
> 
> # Show how the variables relate to the follow-up time
> par( mfrow=c(3,1), mar=c(3,3,1,1), mgp=c(3,1,0)/1.6, bty="n" )
> for( i in unique(xpos$id) )
+ matplot( xpos[xpos$id==i,"dof"],
+          xpos[xpos$id==i,-(1:3)],
+          xlim=range(xpos$dof), ylim=range(xpos[,-(1:3)]),
+          type="l", lwd=2, lty=1, col=clrs,
+          ylab="", xlab="Date of follow-up" )
> ytxt <- par("usr")[3:4]
> ytxt <- ytxt[1] + (nvar:1)*diff(ytxt)/(nvar+2)
> xtxt <- rep( sum(par("usr")[1:2]*c(0.98,0.02)), nvar )
> text( xtxt, ytxt, colnames(xpos)[-(1:3)], font=2,
+                   col=clrs, cex=1.5, adj=0 )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("gmortDK")
> ### * gmortDK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gmortDK
> ### Title: Population mortality rates for Denmark in 5-years age groups.
> ### Aliases: gmortDK
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(gmortDK)
> 
> 
> 
> cleanEx()
> nameEx("hivDK")
> ### * hivDK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name:  hivDK 
> ### Title: hivDK: seroconversion in a cohort of Danish men
> ### Aliases: ' hivDK '
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(hivDK)
>   str(hivDK) 
'data.frame':	297 obs. of  7 variables:
 $ id   : num  101 104 105 106 107 108 109 110 111 112 ...
 $ entry: Date, format: "1980-12-31" "1980-12-31" ...
 $ well : Date, format: "1987-03-15" "1989-05-15" ...
 $ ill  : Date, format: NA NA ...
 $ bth  : num  0 9 8 -5 -2 -9 -8 -3 -3 8 ...
 $ pyr  : num  0 20 3 8 5 25 3 6 4 7 ...
 $ us   : num  0 0 0 0 0 0 0 0 0 0 ...
>   
> 
> 
> cleanEx()
> nameEx("lep")
> ### * lep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lep
> ### Title: An unmatched case-control study of leprosy incidence
> ### Aliases: lep
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(lep)
> 
> 
> 
> cleanEx()
> nameEx("lgrep")
> ### * lgrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lgrep
> ### Title: Convenience versions of grep
> ### Aliases: fgrep ngrep lgrep
> ### Keywords: manip
> 
> ### ** Examples
> 
> ff <- factor( ll <- paste( sample( letters[1:3], 20, replace=TRUE ),
+                            sample( letters[1:3], 20, replace=TRUE ), sep="" ) )
> ff
 [1] ac ba bb ca aa cb ca bb bc ab ab ab cb ba cc bc cc ca bc cb
Levels: aa ab ac ba bb bc ca cb cc
> fgrep( "a", ff )
 [1] ac ba ca aa ca ab ab ab ba ca
Levels: aa ab ac ba bb bc ca cb cc
> fgrep( "a", ll )
 [1] "ac" "ba" "ca" "aa" "ca" "ab" "ab" "ab" "ba" "ca"
> ngrep( "a", ff )
NULL
> lgrep( "a", ff )
[1] "aa" "ab" "ac" "ba" "ca"
> lgrep( "a", ff, invert=TRUE )
[1] "bb" "bc" "cb" "cc"
> 
> 
> 
> cleanEx()
> nameEx("lls")
> ### * lls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lls
> ### Title: Functions to manage and explore the workspace
> ### Aliases: lls clear
> ### Keywords: attributes
> 
> ### ** Examples
> 
> x <- 1:10
> y <- rbinom(10, 1, 0.5)
> m1 <- glm( y ~ x, family=binomial )
> M <- matrix( 1:20, 4, 5 )
> .M <- M
> dfr <- data.frame(x,y)
> attach( dfr )
The following objects are masked _by_ .GlobalEnv:

    x, y

> lls()
  name mode    class      dim        size(Kb)
1 M    numeric matrix     4 5             0.3
2 dfr  list    data.frame 10 2            0.9
3 m1   list    glm lm     30            185.5
4 x    numeric integer    10              0.1
5 y    numeric integer    10              0.1
> search()
 [1] ".GlobalEnv"        "dfr"               "package:Epi"      
 [4] "CheckExEnv"        "package:stats"     "package:graphics" 
 [7] "package:grDevices" "package:utils"     "package:datasets" 
[10] "package:methods"   "Autoloads"         "package:base"     
> clear()
> search()
 [1] ".GlobalEnv"        "package:Epi"       "CheckExEnv"       
 [4] "package:stats"     "package:graphics"  "package:grDevices"
 [7] "package:utils"     "package:datasets"  "package:methods"  
[10] "Autoloads"         "package:base"     
> lls()
> lls(all=TRUE)
  name         mode    class   dim       size(Kb)
1 .M           numeric matrix  4 5            0.3
2 .Random.seed numeric integer 626            2.5
> 
> 
> 
> cleanEx()
> nameEx("lungDK")
> ### * lungDK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lungDK
> ### Title: Male lung cancer incidence in Denmark
> ### Aliases: lungDK
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data( lungDK )
> # Draw a Lexis diagram and show the number of cases in it.
> attach( lungDK )
> Lexis.diagram( age=c(40,90), date=c(1943,1993), coh.grid=TRUE )
> text( Px, Ax, paste( D ), cex=0.7 )
> 
> 
> 
> cleanEx()

detaching ‘lungDK’

> nameEx("mcutLexis")
> ### * mcutLexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcutLexis
> ### Title: Cut follow-up at multiple event dates and keep track of order of
> ###   events
> ### Aliases: mcutLexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> # A dataframe of times
> set.seed(563248)
> dd <- data.frame( id = 1:10,
+                  doN = round(runif(10,-30, 0),1),
+                  doE = round(runif(10,  0,20),1),
+                  doX = round(runif(10, 50,60),1),
+                  doD = round(runif(10, 50,60),1),
+                  # these are the event times
+                  doA = c(NA,20,NA,27,35,NA,52, 5,43,80),
+                  doB = c(25,NA,37,40,NA,NA,15,23,36,61) )
> 
> # set up a Lexis object with time from entry to death/exit
> Lx <- Lexis( entry = list(time=doE,
+                            age=doE-doN),
+               exit = list(time=pmin(doX,doD)),
+        exit.status = factor(doD<doX,labels=c("OK","D")),
+               data = dd )
NOTE: entry.status has been set to "OK" for all.
> summary( Lx )
    
Transitions:
     To
From OK D  Records:  Events: Risk time:  Persons:
  OK  4 6        10        6      445.6        10
> 
> # cut the follow-up at dates doA and doB
> L2 <- mcutLexis( Lx, "time", wh=c("doA","doB"),
+                  new.states = c("A","B"),
+            precursor.states = "OK",
+                  seq.states = TRUE,
+                  new.scales = c("tfA","tfB") )
> summary( L2 )
     
Transitions:
     To
From  OK B D A A-B B-A  Records:  Events: Risk time:  Persons:
  OK   1 3 1 3   0   0         8        7      221.8         8
  B    0 1 1 0   0   2         4        3       84.3         4
  A    0 0 2 0   2   0         4        4       79.7         4
  A-B  0 0 0 0   2   0         2        0       47.4         2
  B-A  0 0 2 0   0   0         2        2       12.4         2
  Sum  1 4 6 3   4   2        20       16      445.6        10
> L2
    tfA  tfB time  age lex.dur lex.Cst lex.Xst lex.id id   doN  doE  doX  doD
1    NA   NA  5.4 21.9    19.6      OK       B      1  1 -16.5  5.4 54.5 59.6
2    NA  0.0 25.0 41.5    29.5       B       B      1  1 -16.5  5.4 54.5 59.6
3    NA   NA  5.7 10.9    31.3      OK       B      3  3  -5.2  5.7 52.8 51.2
4    NA  0.0 37.0 42.2    14.2       B       D      3  3  -5.2  5.7 52.8 51.2
5    NA   NA 13.0 40.0     7.0      OK       A      2  2 -27.0 13.0 60.0 56.9
6   0.0   NA 20.0 47.0    36.9       A       D      2  2 -27.0 13.0 60.0 56.9
7    NA   NA  6.3  9.4    28.7      OK       A      5  5  -3.1  6.3 57.6 52.4
8   0.0   NA 35.0 38.1    17.4       A       D      5  5  -3.1  6.3 57.6 52.4
9    NA   NA 10.4 26.5    16.6      OK       A      4  4 -16.1 10.4 58.7 59.7
10  0.0   NA 27.0 43.1    13.0       A     A-B      4  4 -16.1 10.4 58.7 59.7
11 13.0  0.0 40.0 56.1    18.7     A-B     A-B      4  4 -16.1 10.4 58.7 59.7
12  5.6   NA 10.6 37.5    12.4       A     A-B      8  8 -26.9 10.6 51.7 54.9
13 18.0  0.0 23.0 49.9    28.7     A-B     A-B      8  8 -26.9 10.6 51.7 54.9
14   NA   NA  3.4 10.4    47.1      OK       D      6  6  -7.0  3.4 55.8 50.5
15   NA  3.4 18.4 31.3    33.6       B     B-A      7  7 -12.9 18.4 55.4 53.8
16  0.0 37.0 52.0 64.9     1.8     B-A       D      7  7 -12.9 18.4 55.4 53.8
17   NA   NA  5.8 31.0    30.2      OK       B      9  9 -25.2  5.8 58.0 53.6
18   NA  0.0 36.0 61.2     7.0       B     B-A      9  9 -25.2  5.8 58.0 53.6
19  0.0  7.0 43.0 68.2    10.6     B-A       D      9  9 -25.2  5.8 58.0 53.6
20   NA   NA  9.6 20.1    41.3      OK      OK     10 10 -10.5  9.6 50.9 55.8
   doA doB
1   NA  25
2   NA  25
3   NA  37
4   NA  37
5   20  NA
6   20  NA
7   35  NA
8   35  NA
9   27  40
10  27  40
11  27  40
12   5  23
13   5  23
14  NA  NA
15  52  15
16  52  15
17  43  36
18  43  36
19  43  36
20  80  61
> 
> # show the states
> boxes( L2, boxpos=list(x=c(10,50,50,90,50,90),
+                        y=c(50,90,50,90,10,10)),
+            show.R=FALSE, show.BE=TRUE )
> 
> 
> L3 <- mcutLexis( Lx, "time", wh=c("doA","doB"),
+                  new.states = c("A","B"),
+            precursor.states = "OK",
+                  seq.states = FALSE,
+                  new.scales = c("tfA","tfB") )
> summary( L3 )
     
Transitions:
     To
From  OK B D A A+B  Records:  Events: Risk time:  Persons:
  OK   1 3 1 3   0         8        7      221.8         8
  B    0 1 1 0   2         4        3       84.3         4
  A    0 0 2 0   2         4        4       79.7         4
  A+B  0 0 2 0   2         4        2       59.8         4
  Sum  1 4 6 3   6        20       16      445.6        10
> boxes( L3, boxpos=list(x=c(10,50,50,90,50),
+                        y=c(50,90,50,50,10)),
+            show.R=FALSE, show.BE=TRUE )
> 
> 
> 
> cleanEx()
> nameEx("mh")
> ### * mh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mh
> ### Title: Mantel-Haenszel analyses of cohort and case-control studies
> ### Aliases: mh
> ### Keywords: htest
> 
> ### ** Examples
> 
> # If d and y are 3-way tables of cases and person-years 
> # observation formed by tabulation by two confounders 
> # (named "C1" and "C2") an exposure of interest ("E"), 
> # the following command will calculate an overall 
> # Mantel-Haenszel comparison of the first two exposure 
> # groups.
> #
> # Generate some bogus data
> dnam <- list( E=c("low","medium","high"), C1=letters[1:2], C2=LETTERS[1:4] )
> d <- array( sample( 2:80, 24),
+             dimnames=dnam, dim=sapply( dnam, length ) )
> y <- array( abs( rnorm( 24, 227, 50 ) ),
+             dimnames=dnam, dim=sapply( dnam, length ) )
> mh(d, y, compare="E")
$groups
[1] "E"      "low"    "medium"

$control
[1] "C1" "C2"

$type
[1] "Rate ratio"

$q
[1] 161.213

$r
[1] 161.8798

$u
[1] -0.6667823

$v
[1] 158.5576

$ratio
[1] 0.995881

$se.log.ratio
[1] 0.0779466

$cl.lower
[1] 0.8760446

$cl.upper
[1] 1.13211

$chisq
[1] 0.00280402

$p.value
[1] 0.9577694

attr(,"class")
[1] "mh"
> #
> # Or, if exposure levels named "low" and "high" are to be 
> # compared and these are not the first two levels of E :
> #
> mh(d, y, compare="E", levels=c("low", "high"))
$groups
[1] "E" NA  NA 

$control
[1] "C1" "C2"

$type
[1] "Rate ratio"

$q
[1] 176.1455

$r
[1] 185.4986

$u
[1] -9.353107

$v
[1] 179.5288

$ratio
[1] 0.9495786

$se.log.ratio
[1] 0.07412436

$cl.lower
[1] 0.840582

$cl.upper
[1] 1.072708

$chisq
[1] 0.4872788

$p.value
[1] 0.4851437

attr(,"class")
[1] "mh"
> #
> # If we wish to carry out an analysis which controls for C1, 
> # but examines the results at each level of C2:
> #
> mh(d, y, compare="E", by="C2")
$groups
[1] "E"      "low"    "medium"

$control
[1] "C1"

$type
[1] "Rate ratio"

$q
       A        B        C        D 
43.80598 37.02829 41.11446 39.26424 

$r
       A        B        C        D 
27.92845 33.60032 34.67521 65.67578 

$u
         A          B          C          D 
 15.877534   3.427969   6.439256 -26.411541 

$v
       A        B        C        D 
34.38687 35.20816 38.27038 50.69214 

$ratio
        A         B         C         D 
1.5685075 1.1020219 1.1857020 0.5978496 

$se.log.ratio
        A         B         C         D 
0.1676510 0.1682221 0.1638417 0.1402068 

$cl.lower
        A         B         C         D 
1.1904878 0.8356427 0.9055972 0.4747173 

$cl.upper
        A         B         C         D 
2.0665611 1.4533153 1.5524444 0.7529199 

$chisq
         A          B          C          D 
 7.3311725  0.3337571  1.0834494 13.7609000 

$p.value
           A            B            C            D 
0.0067768832 0.5634551239 0.2979271878 0.0002076126 

attr(,"class")
[1] "mh"
> #
> # It is also possible to look at rate ratios for every 
> # combination of C1 and C2 :
> #
> mh(d, y, compare="E", by=c("C1", "C2"))
$groups
[1] "E"      "low"    "medium"

$control
NULL

$type
[1] "Rate ratio"

$q
   C2
C1          A         B        C        D
  a  8.192843 34.241915 22.31777 10.73253
  b 35.613139  2.786376 18.79669 28.53171

$r
   C2
C1         A         B        C        D
  a 19.45554 25.030660 14.44625 42.80240
  b  8.47291  8.569663 20.22895 22.87338

$u
   C2
C1          A         B         C          D
  a -11.26270  9.211255  7.871517 -32.069865
  b  27.14023 -5.783287 -1.432261   5.658324

$v
   C2
C1         A         B        C        D
  a 12.38709 29.736043 18.65788 24.50017
  b 21.99978  5.472112 19.61250 26.19197

$ratio
   C2
C1         A         B         C         D
  a 0.421106 1.3679989 1.5448829 0.2507461
  b 4.203177 0.3251442 0.9291975 1.2473759

$se.log.ratio
   C2
C1          A         B         C         D
  a 0.2787698 0.1862629 0.2405626 0.2309401
  b 0.2700149 0.4787136 0.2271115 0.2003342

$cl.lower
   C2
C1          A         B         C         D
  a 0.2662269 1.0069981 1.0400386 0.1714991
  b 2.6958287 0.1479472 0.6395445 0.8971984

$cl.upper
   C2
C1          A         B        C         D
  a 0.6660868 1.8584156 2.294783 0.3666118
  b 6.5533447 0.7145711 1.350036 1.7342282

$chisq
   C2
C1         A        B        C         D
  a 10.24036 2.853346 3.320891 41.978332
  b 33.48180 6.112156 0.104595  1.222383

$p.value
   C2
C1             A          B          C            D
  a 1.374007e-03 0.09118397 0.06840477 9.229040e-11
  b 7.193413e-09 0.01342552 0.74638359 2.688934e-01

attr(,"class")
[1] "mh"
> #
> # If dimensions and levels of the table are unnamed, they must 
> # be referred to by number.
> #
> 
> 
> 
> cleanEx()
> nameEx("mortDK")
> ### * mortDK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mortDK
> ### Title: Population mortality rates for Denmark in 1-year age-classes.
> ### Aliases: mortDK
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mortDK)
> 
> 
> 
> cleanEx()
> nameEx("ncut")
> ### * ncut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ncut
> ### Title: Function to group a variable in intervals.
> ### Aliases: ncut
> ### Keywords: manip
> 
> ### ** Examples
> 
> br <- c(-2,0,1,2.5)
> x <- c( rnorm( 10 ), br, -3, 3 )
> cbind( x, l=ncut( x, breaks=br, type="l" ),
+           m=ncut( x, breaks=br, type="m" ),
+           r=ncut( x, breaks=br, type="r" ) )[order(x),]
               x    l     m    r
 [1,] -3.0000000   NA    NA -2.0
 [2,] -2.0000000 -2.0 -2.00 -2.0
 [3,] -0.8356286 -2.0 -1.00  0.0
 [4,] -0.8204684 -2.0 -1.00  0.0
 [5,] -0.6264538 -2.0 -1.00  0.0
 [6,] -0.3053884 -2.0 -1.00  0.0
 [7,]  0.0000000  0.0  0.00  0.0
 [8,]  0.1836433  0.0  0.50  1.0
 [9,]  0.3295078  0.0  0.50  1.0
[10,]  0.4874291  0.0  0.50  1.0
[11,]  0.5757814  0.0  0.50  1.0
[12,]  0.7383247  0.0  0.50  1.0
[13,]  1.0000000  1.0  1.00  1.0
[14,]  1.5952808  1.0  1.75  2.5
[15,]  2.5000000  2.5  2.50  2.5
[16,]  3.0000000  2.5    NA   NA
> x <- rnorm( 200 )
> plot( x, ncut( x, breaks=br, type="l" ), pch=16, col="blue", ylim=range(x) )
> abline( 0, 1 )
> abline( v=br )
> points( x, ncut( x, breaks=br, type="r" ), pch=16, col="red" )
> points( x, ncut( x, breaks=br, type="m" ), pch=16, col="green" )
> 
> 
> 
> cleanEx()
> nameEx("nice")
> ### * nice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nice
> ### Title: Nice breakpoints
> ### Aliases: nice
> ### Keywords: manip
> 
> ### ** Examples
> 
> nice( exp( rnorm( 100 ) ), log=TRUE )
[1]  0.1  0.2  0.5  1.0  2.0  5.0 10.0 20.0
> 
> 
> 
> cleanEx()
> nameEx("nickel")
> ### * nickel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nickel
> ### Title: A Cohort of Nickel Smelters in South Wales
> ### Aliases: nickel
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(nickel)
> str(nickel)
'data.frame':	679 obs. of  7 variables:
 $ id      : num  3 4 6 8 9 10 15 16 17 18 ...
 $ icd     : num  0 162 163 527 150 163 334 160 420 12 ...
 $ exposure: num  5 5 10 9 0 2 0 0.5 0 0 ...
 $ dob     : num  1889 1886 1881 1886 1880 ...
 $ age1st  : num  17.5 23.2 25.2 24.7 30 ...
 $ agein   : num  45.2 48.3 53 47.9 54.7 ...
 $ ageout  : num  93 63.3 54.2 69.7 76.8 ...
> 
> 
> 
> cleanEx()
> nameEx("occup")
> ### * occup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: occup
> ### Title: A small occupational cohort
> ### Aliases: occup
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(occup)
> lx <- Lexis( entry = list( per=DoE, age=AoE ),
+               exit = list( per=DoX ),
+       entry.status = "W",
+        exit.status = Xst,
+               data = occup )
Incompatible factor levels in entry.status and exit.status:
 both lex.Cst and lex.Xst now have levels:
 W D X 
> plot( lx )
> # Split follow-up in 5-year classes
> sx <- splitLexis( lx, seq(1940,1960,5), "per" )
> sx <- splitLexis( sx, seq(  40,  60,5), "age" )
> plot( sx )
> 
> # Plot with a bit more paraphernalia and a device to get
> # the years on the same physical scale on both axes
> ypi <- 2.5 # Years per inch
> dev.new( height=15/ypi+1, width=20/ypi+1 ) # add an inch in each direction for
> par( mai=c(3,3,1,1)/4, mgp=c(3,1,0)/1.6 )  # the margins set in inches by mai=
> plot(sx,las=1,col="black",lty.grid=1,lwd=2,type="l",
+      xlim=c(1940,1960),ylim=c(40,55),xaxs="i",yaxs="i",yaxt="n",
+      xlab="Calendar year", ylab="Age (years)")
> axis( side=2, at=seq(40,55,5), las=1 )
> points(sx,pch=c(NA,16)[(sx$lex.Xst=="D")+1] )
> box()
> # Annotation with the person-years
> PY.ann.Lexis( sx, cex=0.8 )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("pctab")
> ### * pctab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pctab
> ### Title: Create percentages in a table
> ### Aliases: pctab
> ### Keywords: manip methods array
> 
> ### ** Examples
> 
> Aye <- sample( c("Yes","Si","Oui"), 177, replace=TRUE )
> Bee <- sample( c("Hum","Buzz"), 177, replace=TRUE )
> Sea <- sample( c("White","Black","Red","Dead"), 177, replace=TRUE )
> A <- table( Aye, Bee, Sea )
> A
, , Sea = Black

     Bee
Aye   Buzz Hum
  Oui    2  11
  Si     8  13
  Yes    7   6

, , Sea = Dead

     Bee
Aye   Buzz Hum
  Oui    5  10
  Si    10  10
  Yes    7   6

, , Sea = Red

     Bee
Aye   Buzz Hum
  Oui    5   6
  Si    11   5
  Yes    7   7

, , Sea = White

     Bee
Aye   Buzz Hum
  Oui    7   9
  Si     4  12
  Yes    3   6

> ftable( pctab( A ) )
, , Sea = Black

     Bee
Aye    Buzz   Hum
  Oui  10.5  30.6
  Si   24.2  32.5
  Yes  29.2  24.0

, , Sea = Dead

     Bee
Aye    Buzz   Hum
  Oui  26.3  27.8
  Si   30.3  25.0
  Yes  29.2  24.0

, , Sea = Red

     Bee
Aye    Buzz   Hum
  Oui  26.3  16.7
  Si   33.3  12.5
  Yes  29.2  28.0

, , Sea = White

     Bee
Aye    Buzz   Hum
  Oui  36.8  25.0
  Si   12.1  30.0
  Yes  12.5  24.0

, , Sea = All

     Bee
Aye    Buzz   Hum
  Oui 100.0 100.0
  Si  100.0 100.0
  Yes 100.0 100.0

, , Sea = N

     Bee
Aye    Buzz   Hum
  Oui  19.0  36.0
  Si   33.0  40.0
  Yes  24.0  25.0

         Sea     Black      Dead       Red     White       All         N
Aye Bee                                                                 
Oui Buzz      10.52632  26.31579  26.31579  36.84211 100.00000  19.00000
    Hum       30.55556  27.77778  16.66667  25.00000 100.00000  36.00000
Si  Buzz      24.24242  30.30303  33.33333  12.12121 100.00000  33.00000
    Hum       32.50000  25.00000  12.50000  30.00000 100.00000  40.00000
Yes Buzz      29.16667  29.16667  29.16667  12.50000 100.00000  24.00000
    Hum       24.00000  24.00000  28.00000  24.00000 100.00000  25.00000
> ftable( pctab( addmargins( A, 1 ), 3 ) )
, , Sea = Black

     Bee
Aye    Buzz   Hum
  Oui  10.5  30.6
  Si   24.2  32.5
  Yes  29.2  24.0
  Sum  22.4  29.7

, , Sea = Dead

     Bee
Aye    Buzz   Hum
  Oui  26.3  27.8
  Si   30.3  25.0
  Yes  29.2  24.0
  Sum  28.9  25.7

, , Sea = Red

     Bee
Aye    Buzz   Hum
  Oui  26.3  16.7
  Si   33.3  12.5
  Yes  29.2  28.0
  Sum  30.3  17.8

, , Sea = White

     Bee
Aye    Buzz   Hum
  Oui  36.8  25.0
  Si   12.1  30.0
  Yes  12.5  24.0
  Sum  18.4  26.7

, , Sea = All

     Bee
Aye    Buzz   Hum
  Oui 100.0 100.0
  Si  100.0 100.0
  Yes 100.0 100.0
  Sum 100.0 100.0

, , Sea = N

     Bee
Aye    Buzz   Hum
  Oui  19.0  36.0
  Si   33.0  40.0
  Yes  24.0  25.0
  Sum  76.0 101.0

         Sea     Black      Dead       Red     White       All         N
Aye Bee                                                                 
Oui Buzz      10.52632  26.31579  26.31579  36.84211 100.00000  19.00000
    Hum       30.55556  27.77778  16.66667  25.00000 100.00000  36.00000
Si  Buzz      24.24242  30.30303  33.33333  12.12121 100.00000  33.00000
    Hum       32.50000  25.00000  12.50000  30.00000 100.00000  40.00000
Yes Buzz      29.16667  29.16667  29.16667  12.50000 100.00000  24.00000
    Hum       24.00000  24.00000  28.00000  24.00000 100.00000  25.00000
Sum Buzz      22.36842  28.94737  30.26316  18.42105 100.00000  76.00000
    Hum       29.70297  25.74257  17.82178  26.73267 100.00000 101.00000
> round( ftable( pctab( addmargins( A, 1 ), 3 ), row.vars=3 ), 1)
, , Sea = Black

     Bee
Aye    Buzz   Hum
  Oui  10.5  30.6
  Si   24.2  32.5
  Yes  29.2  24.0
  Sum  22.4  29.7

, , Sea = Dead

     Bee
Aye    Buzz   Hum
  Oui  26.3  27.8
  Si   30.3  25.0
  Yes  29.2  24.0
  Sum  28.9  25.7

, , Sea = Red

     Bee
Aye    Buzz   Hum
  Oui  26.3  16.7
  Si   33.3  12.5
  Yes  29.2  28.0
  Sum  30.3  17.8

, , Sea = White

     Bee
Aye    Buzz   Hum
  Oui  36.8  25.0
  Si   12.1  30.0
  Yes  12.5  24.0
  Sum  18.4  26.7

, , Sea = All

     Bee
Aye    Buzz   Hum
  Oui 100.0 100.0
  Si  100.0 100.0
  Yes 100.0 100.0
  Sum 100.0 100.0

, , Sea = N

     Bee
Aye    Buzz   Hum
  Oui  19.0  36.0
  Si   33.0  40.0
  Yes  24.0  25.0
  Sum  76.0 101.0

      Aye   Oui          Si         Yes         Sum      
      Bee  Buzz   Hum  Buzz   Hum  Buzz   Hum  Buzz   Hum
Sea                                                      
Black      10.5  30.6  24.2  32.5  29.2  24.0  22.4  29.7
Dead       26.3  27.8  30.3  25.0  29.2  24.0  28.9  25.7
Red        26.3  16.7  33.3  12.5  29.2  28.0  30.3  17.8
White      36.8  25.0  12.1  30.0  12.5  24.0  18.4  26.7
All       100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0
N          19.0  36.0  33.0  40.0  24.0  25.0  76.0 101.0
> 
> 
> 
> cleanEx()
> nameEx("plot.Lexis")
> ### * plot.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.Lexis
> ### Title: Lexis diagrams
> ### Aliases: plot.Lexis points.Lexis lines.Lexis PY.ann PY.ann.Lexis
> ### Keywords: hplot aplot
> 
> ### ** Examples
> 
> # A small bogus cohort
> xcoh <- structure( list( id = c("A", "B", "C"),
+                       birth = c("14/07/1952", "01/04/1957", "10/06/1987"),
+                       entry = c("04/08/1965", "08/09/1972", "23/12/1991"),
+                        exit = c("27/06/1997", "23/05/1995", "24/07/1998"),
+                        fail = c(1, 0, 1) ),
+                      .Names = c("id", "birth", "entry", "exit", "fail"),
+                   row.names = c("1", "2", "3"),
+                       class = "data.frame" )
> 
> # Convert the character dates into numerical variables (fractional years)
> xcoh$bt <- cal.yr( xcoh$birth, format="%d/%m/%Y" )
> xcoh$en <- cal.yr( xcoh$entry, format="%d/%m/%Y" )
> xcoh$ex <- cal.yr( xcoh$exit , format="%d/%m/%Y" )
> 
> # See how it looks
> xcoh
  id      birth      entry       exit fail       bt       en       ex
1  A 14/07/1952 04/08/1965 27/06/1997    1 1952.533 1965.589 1997.485
2  B 01/04/1957 08/09/1972 23/05/1995    0 1957.247 1972.686 1995.388
3  C 10/06/1987 23/12/1991 24/07/1998    1 1987.437 1991.974 1998.559
> 
> # Define as Lexis object with timescales calendar time and age
> Lcoh <- Lexis( entry = list( per=en ),
+                 exit = list( per=ex, age=ex-bt ),
+          exit.status = fail,
+                 data = xcoh )
> 
> # Default plot of follow-up
> plot( Lcoh )
> # Show follow-up time
> PY.ann( Lcoh )
> 
> # Show exit status
> plot( Lcoh, type="b" )
> # Same but failures only
> plot( Lcoh, type="b", pch=c(NA,16)[Lcoh$fail+1] )
> 
> # With a grid and deaths as endpoints
> plot( Lcoh, grid=0:10*10, col="black" )
> points( Lcoh, pch=c(NA,16)[Lcoh$lex.Xst+1] )
> # With a lot of bells and whistles:
> plot( Lcoh, grid=0:20*5, col="black", xaxs="i", yaxs="i",
+       xlim=c(1960,2010), ylim=c(0,50), lwd=3, las=1 )
> points( Lcoh, pch=c(NA,16)[Lcoh$lex.Xst+1], col="red", cex=1.5 )
> 
> 
> 
> cleanEx()
> nameEx("plot.apc")
> ### * plot.apc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.apc
> ### Title: Plot the estimates from a fitted Age-Period-Cohort model
> ### Aliases: plot.apc apc.plot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> data( lungDK )
> attach( lungDK )
> apc1 <- apc.fit( A=Ax, P=Px, D=D, Y=Y/10^5 )
[1] "ML of APC-model Poisson with log(Y) offset : ( ACP ):\n"

Analysis of deviance for Age-Period-Cohort model

                  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
Age                     215    15568.2                          
Age-drift               214     6965.1  1   8603.2 < 2.2e-16 ***
Age-Cohort              211     1152.5  3   5812.5 < 2.2e-16 ***
Age-Period-Cohort       208      549.4  3    603.2 < 2.2e-16 ***
Age-Period              211     3211.4 -3  -2662.1 < 2.2e-16 ***
Age-drift               214     6965.1 -3  -3753.6 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
No reference period given:
 Reference period for age-effects is chosen as
 the median date of birth for persons  with event:  1911.333 .
> fp <- apc.plot( apc1 )
> apc.lines( apc1, frame.par=fp, drift=1.01, col="red" )
> for( i in 1:11 )
+   apc.lines( apc1, frame.par=fp, drift=1+(i-6)/100, col=rainbow(12)[i] )
> 
> 
> 
> cleanEx()

detaching ‘lungDK’

> nameEx("plotCIF")
> ### * plotCIF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCIF
> ### Title: Plotting Aalen-Johansen curves for competing events
> ### Aliases: plotCIF stackedCIF
> 
> ### ** Examples
> 
> library(survival)   #  requires version 2.39-4 or later
> head(mgus1)
  id age    sex dxyr pcdx alb creat  hgb mspike stop status event start enum
1  1  78 female   68 <NA> 2.8   1.2 11.5    2.0  748      1 death     0    1
2  2  73 female   66   LP  NA    NA   NA    1.3 1310      1   pcm     0    1
3  2  73 female   66   LP  NA    NA   NA    1.3 6751      1 death  1310    2
4  3  87   male   68 <NA> 2.2   1.1 11.2    1.3  277      1 death     0    1
5  4  86   male   69 <NA> 2.8   1.3 15.3    1.8 1815      1 death     0    1
6  5  74 female   68 <NA> 3.0   0.8  9.8    1.4 2587      1 death     0    1
> #  Aalen-Johansen estimates of CIF are plotted by sex for two 
> #  competing events: (1) progression (pcm), and (2) death, in 
> #  a cohort of patients with monoclonal gammopathy.
> 
> #  The data are actually covering transitions from pcm to death, too,
> #  for those entering the state of pcm. Such patients have two rows
> #  in the data frame, and in their 2nd row the 'start' time is 
> #  the time to pcm (in days). 
> 
> #  In our analysis we shall only include those time intervals with value 0
> #  for variable 'start'. Thus, the relevant follow-up time is represented 
> #  by variable 'stop' (days). For convenience, days are converted to years.
> 
> fitCI <- survfit(Surv(stop/365.25, event, type="mstate") ~ sex,
+               data= subset(mgus1, start==0) )
> par(mfrow=c(1,2))
> plotCIF(fitCI, event = 1, col = c("red", "blue"),
+   main = "Progression", xlab="Time (years)" )
> text( 38, 0.15, "Men", pos = 2)
> text( 38, 0.4, "Women", pos = 2)
> plotCIF(fitCI, event = 2, col = c("red", "blue"), 
+   main = "Death", xlab="Time (years)" )
> text( 38, 0.8, "Men", pos = 2)
> text( 38, 0.5, "Women", pos = 2)
> 
> par(mfrow=c(1,2))
> stackedCIF(fitCI, group = 1, colour = c("gray80", "gray90"),
+   main = "Women", xlab="Time (years)" )	
> text( 36, 0.15, "PCM", pos = 2)
> text( 36, 0.6, "Death", pos = 2)
> stackedCIF(fitCI, group = 2, colour = c("gray80", "gray90"), 
+   main = "Men", xlab="Time (years)" )
> text( 39, 0.10, "PCM", pos = 2)
> text( 39, 0.6, "Death", pos = 2)	
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:survival’

> nameEx("plotEst")
> ### * plotEst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotEst
> ### Title: Plot estimates with confidence limits (forest plot)
> ### Aliases: plotEst pointsEst linesEst
> ### Keywords: hplot models
> 
> ### ** Examples
> 
> # Bogus data and a linear model
> f <- factor( sample( letters[1:5], 100, replace=TRUE ) )
> x <- rnorm( 100 )
> y <- 5 + 2 * as.integer( f ) + 0.8 * x + rnorm(100) * 2
> m1 <- lm( y ~ f )
> 
> # Produce some confidence intervals for contrast to first level
> ( cf <- ci.lin( m1, subset=-1 )[,-(2:4)] )
   Estimate      2.5%    97.5%
fb 1.751096 0.2119421 3.290251
fc 3.997887 2.3777244 5.618049
fd 5.426593 3.8975978 6.955587
fe 8.287793 6.6293651 9.946221
> 
> # Plots with increasing amounts of bells and whistles
> par( mfcol=c(3,2), mar=c(3,3,2,1) )
> plotEst( cf )
> plotEst( cf, grid=TRUE, cex=2, lwd=3 )
> plotEst( cf, grid=TRUE, cex=2, col.points="red", col.lines="green" )
> plotEst( cf, grid=TRUE, cex=2, col.points="red", col.lines="green",
+              xlog=TRUE, xtic=c(1:8), xlim=c(0.8,6) )
> rownames( cf )[1] <- "Contrast to fa:\n fb"
> plotEst( cf, grid=TRUE, cex=2, col.points=rainbow(4),
+                                 col.lines=rainbow(4), vref=1 )
> #
> etxt <- expression("Plain text, qouted",
+                    "combined with maths:"*sqrt(a)*phi[c],
+                    f^d*"  Hb"*A[1][c],
+                    eff^e*"  kg/"*m^2)
> plotEst( cf, txt=etxt, grid=TRUE, cex=2, col.points=rainbow(4),
+                                          col.lines =rainbow(4), vref=1 )
>   
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("rateplot")
> ### * rateplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rateplot
> ### Title: Functions to plot rates from a table classified by age and
> ###   calendar time (period)
> ### Aliases: rateplot Aplot Pplot Cplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> data( blcaIT )
> attach(blcaIT)
> 
> # Table of rates:
> bl.rate <- tapply( D, list(age,period), sum ) /
+            tapply( Y, list(age,period), sum )
> bl.rate
           1955         1960         1965         1970      1975
25 3.000000e-07 0.0000003000 0.0000001000 0.0000004000 0.0000012
30 1.700000e-06 0.0000018000 0.0000012000 0.0000008000 0.0000009
35 3.200000e-06 0.0000031000 0.0000035000 0.0000042000 0.0000032
40 1.040000e-05 0.0000105000 0.0000091000 0.0000104000 0.0000127
45 2.860000e-05 0.0000252000 0.0000261000 0.0000304000 0.0000316
50 6.639999e-05 0.0000703000 0.0000643000 0.0000646000 0.0000847
55 1.271000e-04 0.0001339000 0.0001459000 0.0001464000 0.0001638
60 2.011000e-04 0.0002398000 0.0002669000 0.0002755000 0.0002853
65 2.440000e-04 0.0003316000 0.0004211999 0.0004777000 0.0005037
70 3.281000e-04 0.0004231000 0.0005287000 0.0006601000 0.0007464
75 4.554001e-04 0.0004793999 0.0006204999 0.0008464998 0.0010421
> 
> # The four classical plots:
> par( mfrow=c(2,2) )
> rateplot( bl.rate*10^6 )
> 
> # The labels on the vertical axis could be nicer:
> rateplot( bl.rate*10^6, at=10^(-1:3), labels=c(0.1,1,10,100,1000) ) 
> 
> # More bells an whistles
> par( mfrow=c(1,3), mar=c(3,3,1,1), oma=c(0,3,0,0), mgp=c(3,1,0)/1.6 )
> rateplot( bl.rate*10^6, ylab="", ann=TRUE, which=c("AC","PA","CA"),
+                       at=10^(-1:3), labels=c(0.1,1,10,100,1000),
+                       col=topo.colors(11), cex.ann=1.2 ) 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘blcaIT’

> nameEx("rbind.Lexis")
> ### * rbind.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cbind.Lexis
> ### Title: Combining a Lexis objects with data frames or other Lexis
> ###   objects
> ### Aliases: cbind.Lexis rbind.Lexis
> ### Keywords: survival,manip
> 
> ### ** Examples
> 
> # A small bogus cohort
> xcoh <- structure( list( id = c("A", "B", "C"),
+                       birth = c("14/07/1952", "01/04/1954", "10/06/1987"),
+                       entry = c("04/08/1965", "08/09/1972", "23/12/1991"),
+                        exit = c("27/06/1997", "23/05/1995", "24/07/1998"),
+                        fail = c(1, 0, 1) ),
+                      .Names = c("id", "birth", "entry", "exit", "fail"),
+                   row.names = c("1", "2", "3"),
+                       class = "data.frame" )
> 
> # Convert the character dates into numerical variables (fractional years)
> xcoh <- cal.yr( xcoh, format="%d/%m/%Y", wh=2:4 )
> # See how it looks
> xcoh
  id    birth    entry     exit fail
1  A 1952.533 1965.589 1997.485    1
2  B 1954.246 1972.686 1995.388    0
3  C 1987.437 1991.974 1998.559    1
> str( xcoh )
'data.frame':	3 obs. of  5 variables:
 $ id   : chr  "A" "B" "C"
 $ birth:Classes 'cal.yr', 'numeric'  num [1:3] 1953 1954 1987
 $ entry:Classes 'cal.yr', 'numeric'  num [1:3] 1966 1973 1992
 $ exit :Classes 'cal.yr', 'numeric'  num [1:3] 1997 1995 1999
 $ fail : num  1 0 1
> 
> # Define as Lexis object with timescales calendar time and age
> Lcoh <- Lexis( entry = list( per=entry ),
+                 exit = list( per=exit, age=exit-birth ),
+          exit.status = fail,
+                 data = xcoh )
> Lcoh
       per       age   lex.dur lex.Cst lex.Xst lex.id id    birth    entry
1 1965.589 13.056810 31.895962       0       1      1  A 1952.533 1965.589
2 1972.686 18.439425 22.702259       0       0      2  B 1954.246 1972.686
3 1991.974  4.536619  6.584531       0       1      3  C 1987.437 1991.974
      exit fail
1 1997.485    1
2 1995.388    0
3 1998.559    1
> cbind( Lcoh, zz=3:5 )
       per       age   lex.dur lex.Cst lex.Xst lex.id id    birth    entry
1 1965.589 13.056810 31.895962       0       1      1  A 1952.533 1965.589
2 1972.686 18.439425 22.702259       0       0      2  B 1954.246 1972.686
3 1991.974  4.536619  6.584531       0       1      3  C 1987.437 1991.974
      exit fail zz
1 1997.485    1  3
2 1995.388    0  4
3 1998.559    1  5
> 
> # Lexis object wit time since entry time scale
> Dcoh <- Lexis( entry = list( per=entry, tfe=0 ),
+                 exit = list( per=exit ),
+          exit.status = fail,
+                 data = xcoh )
> # A bit meningless to combie these two, really...
> rbind( Dcoh, Lcoh )
       per tfe   lex.dur lex.Cst lex.Xst lex.id id    birth    entry     exit
1 1965.589   0 31.895962       0       1      1  A 1952.533 1965.589 1997.485
2 1972.686   0 22.702259       0       0      2  B 1954.246 1972.686 1995.388
3 1991.974   0  6.584531       0       1      3  C 1987.437 1991.974 1998.559
4 1965.589  NA 31.895962       0       1      1  A 1952.533 1965.589 1997.485
5 1972.686  NA 22.702259       0       0      2  B 1954.246 1972.686 1995.388
6 1991.974  NA  6.584531       0       1      3  C 1987.437 1991.974 1998.559
  fail       age
1    1        NA
2    0        NA
3    1        NA
4    1 13.056810
5    0 18.439425
6    1  4.536619
> 
> # Split different places
> sL <- splitLexis( Lcoh, time.scale="age", breaks=0:20*5 )
> sD <- splitLexis( Dcoh, time.scale="tfe", breaks=0:50*2 )
> sDL <- rbind( sD, sL )
> 
> 
> 
> cleanEx()
> nameEx("rm.tr")
> ### * rm.tr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rm.tr
> ### Title: Remove transitions from a Lexis object.
> ### Aliases: rm.tr
> ### Keywords: manip
> 
> ### ** Examples
> 
> data(DMlate)
> dml <- Lexis( entry = list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit = list(Per=dox),
+         exit.status = factor(!is.na(dodth),labels=c("DM","Dead")),
+                data = DMlate )
NOTE: entry.status has been set to "DM" for all.
Warning in Lexis(entry = list(Per = dodm, Age = dodm - dobth, DMdur = 0),  :
  Dropping 4 rows with duration of follow up < tol

> 
> # A small subset for illustration
> dml <- subset( dml, lex.id %in% c(13,15,20,28,40) )
> 
> # Cut the follow-up at start of insulin therapy
> dmi <- cutLexis( dml, cut = dml$doins,
+                       pre = "DM",
+                 new.state = "Ins" )[,1:10]
> 
> # How does it look?
> dmi
        Per      Age      DMdur    lex.dur lex.Cst lex.Xst lex.id sex    dobth
1  1997.461 59.35387 0.00000000 0.88980151      DM    Dead     13   M 1938.107
2  2002.550 58.13005 0.00000000 2.80355921      DM     Ins     15   M 1944.420
7  2005.354 60.93361 2.80355921 4.64339493     Ins     Ins     15   M 1944.420
3  2009.247 53.21834 0.00000000 0.03559206      DM     Ins     20   F 1956.029
8  2009.283 53.25394 0.03559206 0.71457906     Ins     Ins     20   F 1956.029
4  1998.520 73.72485 0.00000000 8.70088980      DM     Ins     28   F 1924.795
9  2007.221 82.42574 8.70088980 0.97741273     Ins    Dead     28   F 1924.795
10 2007.503 42.29706 0.00000000 2.49418207     Ins     Ins     40   F 1965.206
       dodm
1  1997.461
2  2002.550
7  2002.550
3  2009.247
8  2009.247
4  1998.520
9  1998.520
10 2007.503
> 
> # Remove all transitions DM -> Ins
> rm.tr( dmi, "DM", "Ins" )
        Per      Age      DMdur    lex.dur lex.Cst lex.Xst lex.id sex    dobth
1  1997.461 59.35387 0.00000000 0.88980151      DM    Dead     13   M 1938.107
2  2002.550 58.13005 0.00000000 2.80355921      DM      DM     15   M 1944.420
7  2005.354 60.93361 2.80355921 4.64339493      DM      DM     15   M 1944.420
3  2009.247 53.21834 0.00000000 0.03559206      DM      DM     20   F 1956.029
8  2009.283 53.25394 0.03559206 0.71457906      DM      DM     20   F 1956.029
4  1998.520 73.72485 0.00000000 8.70088980      DM      DM     28   F 1924.795
9  2007.221 82.42574 8.70088980 0.97741273      DM    Dead     28   F 1924.795
10 2007.503 42.29706 0.00000000 2.49418207     Ins     Ins     40   F 1965.206
       dodm
1  1997.461
2  2002.550
7  2002.550
3  2009.247
8  2009.247
4  1998.520
9  1998.520
10 2007.503
> 
> 
> 
> cleanEx()
> nameEx("simLexis")
> ### * simLexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simLexis
> ### Title: Simulate a Lexis object representing follow-up in a multistate
> ###   model.
> ### Aliases: simLexis nState pState plot.pState lines.pState
> ### Keywords: survival
> 
> ### ** Examples
> 
> data(DMlate)
> dml <- Lexis( entry = list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit = list(Per=dox),
+         exit.status = factor(!is.na(dodth),labels=c("DM","Dead")),
+                data = DMlate[runif(nrow(DMlate))<0.1,] )
NOTE: entry.status has been set to "DM" for all.
Warning in Lexis(entry = list(Per = dodm, Age = dodm - dobth, DMdur = 0),  :
  Dropping 1 rows with duration of follow up < tol

> # Split follow-up at insulin, introduce a new timescale,
> # and split non-precursor states
> dmi <- cutLexis( dml, cut = dml$doins,
+                       pre = "DM",
+                 new.state = "Ins",
+                 new.scale = "t.Ins",
+              split.states = TRUE )
> # Split the follow in 1-year intervals for modelling
> Si <- splitLexis( dmi, 0:30/2, "DMdur" )
> # Define knots
> nk <- 4
> ( ai.kn <- with( subset(Si,lex.Xst=="Ins"),
+                  quantile( Age+lex.dur, probs=(1:nk-0.5)/nk ) ) )
   12.5%    37.5%    62.5%    87.5% 
31.03046 51.55677 62.61931 75.34796 
> ( ad.kn <- with( subset(Si,lex.Xst=="Dead"),
+                  quantile( Age+lex.dur, probs=(1:nk-0.5)/nk ) ) )
   12.5%    37.5%    62.5%    87.5% 
65.49350 75.84736 81.43018 88.42266 
> ( di.kn <- with( subset(Si,lex.Xst=="Ins"),
+                  quantile( DMdur+lex.dur, probs=(1:nk-0.5)/nk ) ) )
    12.5%     37.5%     62.5%     87.5% 
 1.421629  4.000000  7.000000 10.500000 
> ( dd.kn <- with( subset(Si,lex.Xst=="Dead"),
+                  quantile( DMdur+lex.dur, probs=(1:nk-0.5)/nk ) ) )
   12.5%    37.5%    62.5%    87.5% 
0.325462 2.014716 4.240931 8.312799 
> ( td.kn <- with( subset(Si,lex.Xst=="Dead(Ins)"),
+                  quantile( t.Ins+lex.dur, probs=(1:nk-0.5)/nk ) ) )
    12.5%     37.5%     62.5%     87.5% 
0.1861739 0.8966461 2.7412731 5.0746064 
> 
> # Fit Poisson models to transition rates
> library( splines )
> DM.Ins <- glm( (lex.Xst=="Ins") ~ Ns( Age  , knots=ai.kn ) +
+                                   Ns( DMdur, knots=di.kn ) +
+                                   I(Per-2000) + sex,
+                family=poisson, offset=log(lex.dur),
+                data = subset(Si,lex.Cst=="DM") )
> DM.Dead <- glm( (lex.Xst=="Dead") ~ Ns( Age  , knots=ad.kn ) +
+                                     Ns( DMdur, knots=dd.kn ) +
+                                     I(Per-2000) + sex,
+                family=poisson, offset=log(lex.dur),
+                data = subset(Si,lex.Cst=="DM") )
> Ins.Dead <- glm( (lex.Xst=="Dead(Ins)") ~ Ns( Age  , knots=ad.kn ) +
+                                           Ns( DMdur, knots=dd.kn ) +
+                                           Ns( t.Ins, knots=td.kn ) +
+                                           I(Per-2000) + sex,
+                family=poisson, offset=log(lex.dur),
+                data = subset(Si,lex.Cst=="Ins") )
> 
> # Stuff the models into an object representing the transitions
> Tr <- list( "DM" = list( "Ins"       = DM.Ins,
+                          "Dead"      = DM.Dead  ),
+            "Ins" = list( "Dead(Ins)" = Ins.Dead ) )
> lapply( Tr, names )
$DM
[1] "Ins"  "Dead"

$Ins
[1] "Dead(Ins)"

> 
> # Define an initial object - note the combination of "select=" and NULL
> # which ensures that the relevant attributes from the Lexis object 'Si'
> # are carried over to 'ini' ( Si[NULL,1:9] will lose essential
> # attributes ):
> ini <- subset(Si,select=1:9)[NULL,]
> ini[1:2,"lex.Cst"] <- "DM"
> ini[1:2,"Per"] <- 1995
> ini[1:2,"Age"] <- 60
> ini[1:2,"DMdur"] <- 5
> ini[1:2,"sex"] <- c("M","F")
> str(ini)
Classes ‘Lexis’ and 'data.frame':	2 obs. of  9 variables:
 $ lex.id : int  NA NA
 $ Per    : num  1995 1995
 $ Age    : num  60 60
 $ DMdur  : num  5 5
 $ t.Ins  : num  NA NA
 $ lex.dur: num  NA NA
 $ lex.Cst: Factor w/ 4 levels "DM","Ins","Dead",..: 1 1
 $ lex.Xst: Factor w/ 4 levels "DM","Ins","Dead",..: NA NA
 $ sex    : Factor w/ 2 levels "M","F": 1 2
 - attr(*, "time.scales")= chr  "Per" "Age" "DMdur" "t.Ins"
 - attr(*, "time.since")= chr  "" "" "" "Ins"
 - attr(*, "breaks")=List of 4
  ..$ Per  : NULL
  ..$ Age  : NULL
  ..$ DMdur: num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ...
  ..$ t.Ins: NULL
> 
> # Simulate 200 of each sex using the estimated models in Tr
> simL <- simLexis( Tr, ini, time.pts=seq(0,11,0.5), N=200 )
> summary( simL )
     
Transitions:
     To
From   DM Ins Dead Dead(Ins)  Records:  Events: Risk time:  Persons:
  DM  186 108  106         0       400      214    3079.41       400
  Ins   0  78    0        30       108       30     660.40       108
  Sum 186 186  106        30       508      244    3739.80       400
> 
> # Find the number of persons in each state at a set of times.
> # Note that the times are shirter than the time-span simulated.
> nSt <- nState( subset(simL,sex=="M"),
+                at=seq(0,10,0.1), from=1995, time.scale="Per" )
> nSt
        State
when      DM Ins Dead Dead(Ins)
  1995   200   0    0         0
  1995.1 200   0    0         0
  1995.2 200   0    0         0
  1995.3 200   0    0         0
  1995.4 200   0    0         0
  1995.5 199   1    0         0
  1995.6 198   1    1         0
  1995.7 197   1    2         0
  1995.8 196   2    2         0
  1995.9 194   4    2         0
  1996   193   5    2         0
  1996.1 190   6    4         0
  1996.2 188   7    5         0
  1996.3 188   7    5         0
  1996.4 187   8    5         0
  1996.5 186   9    5         0
  1996.6 183  10    7         0
  1996.7 181  10    8         1
  1996.8 181  10    8         1
  1996.9 180  11    8         1
  1997   179  12    8         1
  1997.1 174  16    9         1
  1997.2 171  19    9         1
  1997.3 170  20    9         1
  1997.4 169  21    9         1
  1997.5 167  22   10         1
  1997.6 166  23   10         1
  1997.7 162  27   10         1
  1997.8 162  27   10         1
  1997.9 158  29   12         1
  1998   156  30   13         1
  1998.1 154  32   13         1
  1998.2 151  33   15         1
  1998.3 151  33   15         1
  1998.4 150  34   15         1
  1998.5 148  36   15         1
  1998.6 147  37   15         1
  1998.7 143  39   17         1
  1998.8 141  40   18         1
  1998.9 141  40   18         1
  1999   136  43   20         1
  1999.1 136  42   20         2
  1999.2 136  42   20         2
  1999.3 135  42   20         3
  1999.4 135  42   20         3
  1999.5 134  43   20         3
  1999.6 133  44   20         3
  1999.7 132  44   21         3
  1999.8 129  45   23         3
  1999.9 125  47   25         3
  2000   124  48   25         3
  2000.1 124  48   25         3
  2000.2 123  48   25         4
  2000.3 123  48   25         4
  2000.4 123  48   25         4
  2000.5 123  48   25         4
  2000.6 123  46   25         6
  2000.7 121  48   25         6
  2000.8 121  46   25         8
  2000.9 120  45   26         9
  2001   120  44   26        10
  2001.1 119  43   27        11
  2001.2 118  44   27        11
  2001.3 117  43   28        12
  2001.4 115  43   30        12
  2001.5 115  42   30        13
  2001.6 114  42   31        13
  2001.7 112  42   32        14
  2001.8 111  42   33        14
  2001.9 106  44   36        14
  2002   105  44   37        14
  2002.1 104  43   38        15
  2002.2 104  43   38        15
  2002.3 103  43   39        15
  2002.4 101  43   41        15
  2002.5 101  43   41        15
  2002.6 101  43   41        15
  2002.7 101  43   41        15
  2002.8 101  42   41        16
  2002.9 100  43   41        16
  2003   100  43   41        16
  2003.1 100  43   41        16
  2003.2 100  43   41        16
  2003.3  99  43   42        16
  2003.4  98  44   42        16
  2003.5  97  44   43        16
  2003.6  97  44   43        16
  2003.7  96  45   43        16
  2003.8  95  45   44        16
  2003.9  95  45   44        16
  2004    94  45   45        16
  2004.1  92  45   47        16
  2004.2  88  46   50        16
  2004.3  88  46   50        16
  2004.4  87  46   51        16
  2004.5  87  46   51        16
  2004.6  86  46   52        16
  2004.7  85  46   53        16
  2004.8  85  45   53        17
  2004.9  85  45   53        17
  2005    84  45   54        17
> 
> # Show the cumulative prevalences in a different order than that of the
> # state-level ordering and plot them using all defaults
> pp <- pState( nSt, perm=c(1,2,4,3) )
> head( pp )
        State
when        DM Ins Dead(Ins) Dead
  1995   1.000   1         1    1
  1995.1 1.000   1         1    1
  1995.2 1.000   1         1    1
  1995.3 1.000   1         1    1
  1995.4 1.000   1         1    1
  1995.5 0.995   1         1    1
> plot( pp )
> 
> # A more useful set-up of the graph
> clr <- c("orange2","forestgreen")
> par( las=1 )
> plot( pp, col=clr[c(2,1,1,2)] )
> lines( as.numeric(rownames(pp)), pp[,2], lwd=2 )
> mtext( "60 year old male, diagnosed 1995", side=3, line=2.5, adj=0 )
> mtext( "Survival curve", side=3, line=1.5, adj=0 )
> mtext( "DM, no insulin   DM, Insulin", side=3, line=0.5, adj=0, col=clr[1] )
> mtext( "DM, no insulin", side=3, line=0.5, adj=0, col=clr[2] )
> axis( side=4 )
> 
> # Using a Cox-model for the mortality rates assuming the two mortality
> # rates to be proportional:
> # When we fit a Cox-model, lex.dur must be used in the Surv() function,
> # and the I() constrction must be used when specifying intermediate
> # states as covariates, since factors with levels not present in the
> # data will create NAs in the parameter vector returned by coxph, which
> # in return will crash the simulation machinery.
> library( survival )
> Cox.Dead <- coxph( Surv( DMdur, DMdur+lex.dur,
+                          lex.Xst %in% c("Dead(Ins)","Dead")) ~
+                    Ns( Age-DMdur, knots=ad.kn ) +
+                    I(lex.Cst=="Ins") +
+                    I(Per-2000) + sex,
+                data = Si )
Warning in coxph(Surv(DMdur, DMdur + lex.dur, lex.Xst %in% c("Dead(Ins)",  :
  a variable appears on both the left and right sides of the formula
> Cr <- list( "DM" = list( "Ins"       = DM.Ins,
+                          "Dead"      = Cox.Dead  ),
+            "Ins" = list( "Dead(Ins)" = Cox.Dead ) )
> simL <- simLexis( Cr, ini, time.pts=seq(0,11,0.2), N=200 )
> summary( simL )
     
Transitions:
     To
From   DM Ins Dead Dead(Ins)  Records:  Events: Risk time:  Persons:
  DM  236 107   57         0       400      164    3218.85       400
  Ins   0  88    0        19       107       19     687.11       107
  Sum 236 195   57        19       507      183    3905.96       400
> nSt <- nState( subset(simL,sex=="M"),
+                at=seq(0,10,0.2), from=1995, time.scale="Per" )
> pp <- pState( nSt, perm=c(1,2,4,3) )
> plot( pp )
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:survival’, ‘package:splines’

> nameEx("splitLexis")
> ### * splitLexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splitLexis
> ### Title: Split follow-up time in a Lexis object
> ### Aliases: splitLexis
> ### Keywords: manip
> 
> ### ** Examples
> 
> # A small bogus cohort
> xcoh <- structure( list( id = c("A", "B", "C"),
+                       birth = c("14/07/1952", "01/04/1954", "10/06/1987"),
+                       entry = c("04/08/1965", "08/09/1972", "23/12/1991"),
+                        exit = c("27/06/1997", "23/05/1995", "24/07/1998"),
+                        fail = c(1, 0, 1) ),
+                      .Names = c("id", "birth", "entry", "exit", "fail"),
+                   row.names = c("1", "2", "3"),
+                       class = "data.frame" )
> 
> # Convert the character dates into numerical variables (fractional years)
> xcoh$bt <- cal.yr( xcoh$birth, format="%d/%m/%Y" )
> xcoh$en <- cal.yr( xcoh$entry, format="%d/%m/%Y" )
> xcoh$ex <- cal.yr( xcoh$exit , format="%d/%m/%Y" )
> 
> # See how it looks
> xcoh
  id      birth      entry       exit fail       bt       en       ex
1  A 14/07/1952 04/08/1965 27/06/1997    1 1952.533 1965.589 1997.485
2  B 01/04/1954 08/09/1972 23/05/1995    0 1954.246 1972.686 1995.388
3  C 10/06/1987 23/12/1991 24/07/1998    1 1987.437 1991.974 1998.559
> 
> # Define as Lexis object with timescales calendar time and age
> Lcoh <- Lexis( entry = list( per=en ),
+                 exit = list( per=ex, age=ex-bt ),
+          exit.status = fail,
+                 data = xcoh )
> 
> # Default plot of follow-up
> plot( Lcoh )
> 
> # With a grid and deaths as endpoints
> plot( Lcoh, grid=0:10*10, col="black" )
> points( Lcoh, pch=c(NA,16)[Lcoh$lex.Xst+1] )
> 
> # With a lot of bells and whistles:
> plot( Lcoh, grid=0:20*5, col="black", xaxs="i", yaxs="i",
+       xlim=c(1960,2010), ylim=c(0,50), lwd=3, las=1 )
> points( Lcoh, pch=c(NA,16)[Lcoh$lex.Xst+1], col="red", cex=1.5 )
> 
> # Split time along two time-axes
> ( x2 <- splitLexis( Lcoh, breaks = seq(1900,2000,5), time.scale="per") )
   lex.id      per       age   lex.dur lex.Cst lex.Xst id      birth      entry
1       1 1965.589 13.056810 4.4106776       0       0  A 14/07/1952 04/08/1965
2       1 1970.000 17.467488 5.0000000       0       0  A 14/07/1952 04/08/1965
3       1 1975.000 22.467488 5.0000000       0       0  A 14/07/1952 04/08/1965
4       1 1980.000 27.467488 5.0000000       0       0  A 14/07/1952 04/08/1965
5       1 1985.000 32.467488 5.0000000       0       0  A 14/07/1952 04/08/1965
6       1 1990.000 37.467488 5.0000000       0       0  A 14/07/1952 04/08/1965
7       1 1995.000 42.467488 2.4852841       0       1  A 14/07/1952 04/08/1965
8       2 1972.686 18.439425 2.3141684       0       0  B 01/04/1954 08/09/1972
9       2 1975.000 20.753593 5.0000000       0       0  B 01/04/1954 08/09/1972
10      2 1980.000 25.753593 5.0000000       0       0  B 01/04/1954 08/09/1972
11      2 1985.000 30.753593 5.0000000       0       0  B 01/04/1954 08/09/1972
12      2 1990.000 35.753593 5.0000000       0       0  B 01/04/1954 08/09/1972
13      2 1995.000 40.753593 0.3880903       0       0  B 01/04/1954 08/09/1972
14      3 1991.974  4.536619 3.0260096       0       0  C 10/06/1987 23/12/1991
15      3 1995.000  7.562628 3.5585216       0       1  C 10/06/1987 23/12/1991
         exit fail       bt       en       ex
1  27/06/1997    1 1952.533 1965.589 1997.485
2  27/06/1997    1 1952.533 1965.589 1997.485
3  27/06/1997    1 1952.533 1965.589 1997.485
4  27/06/1997    1 1952.533 1965.589 1997.485
5  27/06/1997    1 1952.533 1965.589 1997.485
6  27/06/1997    1 1952.533 1965.589 1997.485
7  27/06/1997    1 1952.533 1965.589 1997.485
8  23/05/1995    0 1954.246 1972.686 1995.388
9  23/05/1995    0 1954.246 1972.686 1995.388
10 23/05/1995    0 1954.246 1972.686 1995.388
11 23/05/1995    0 1954.246 1972.686 1995.388
12 23/05/1995    0 1954.246 1972.686 1995.388
13 23/05/1995    0 1954.246 1972.686 1995.388
14 24/07/1998    1 1987.437 1991.974 1998.559
15 24/07/1998    1 1987.437 1991.974 1998.559
> ( x2 <- splitLexis( x2, breaks = seq(0,80,5), time.scale="age" ) )
   lex.id      per       age   lex.dur lex.Cst lex.Xst id      birth      entry
1       1 1965.589 13.056810 1.9431896       0       0  A 14/07/1952 04/08/1965
2       1 1967.533 15.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
3       1 1970.000 17.467488 2.5325120       0       0  A 14/07/1952 04/08/1965
4       1 1972.533 20.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
5       1 1975.000 22.467488 2.5325120       0       0  A 14/07/1952 04/08/1965
6       1 1977.533 25.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
7       1 1980.000 27.467488 2.5325120       0       0  A 14/07/1952 04/08/1965
8       1 1982.533 30.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
9       1 1985.000 32.467488 2.5325120       0       0  A 14/07/1952 04/08/1965
10      1 1987.533 35.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
11      1 1990.000 37.467488 2.5325120       0       0  A 14/07/1952 04/08/1965
12      1 1992.533 40.000000 2.4674880       0       0  A 14/07/1952 04/08/1965
13      1 1995.000 42.467488 2.4852841       0       1  A 14/07/1952 04/08/1965
14      2 1972.686 18.439425 1.5605749       0       0  B 01/04/1954 08/09/1972
15      2 1974.246 20.000000 0.7535934       0       0  B 01/04/1954 08/09/1972
16      2 1975.000 20.753593 4.2464066       0       0  B 01/04/1954 08/09/1972
17      2 1979.246 25.000000 0.7535934       0       0  B 01/04/1954 08/09/1972
18      2 1980.000 25.753593 4.2464066       0       0  B 01/04/1954 08/09/1972
19      2 1984.246 30.000000 0.7535934       0       0  B 01/04/1954 08/09/1972
20      2 1985.000 30.753593 4.2464066       0       0  B 01/04/1954 08/09/1972
21      2 1989.246 35.000000 0.7535934       0       0  B 01/04/1954 08/09/1972
22      2 1990.000 35.753593 4.2464066       0       0  B 01/04/1954 08/09/1972
23      2 1994.246 40.000000 0.7535934       0       0  B 01/04/1954 08/09/1972
24      2 1995.000 40.753593 0.3880903       0       0  B 01/04/1954 08/09/1972
25      3 1991.974  4.536619 0.4633812       0       0  C 10/06/1987 23/12/1991
26      3 1992.437  5.000000 2.5626283       0       0  C 10/06/1987 23/12/1991
27      3 1995.000  7.562628 2.4373717       0       0  C 10/06/1987 23/12/1991
28      3 1997.437 10.000000 1.1211499       0       1  C 10/06/1987 23/12/1991
         exit fail       bt       en       ex
1  27/06/1997    1 1952.533 1965.589 1997.485
2  27/06/1997    1 1952.533 1965.589 1997.485
3  27/06/1997    1 1952.533 1965.589 1997.485
4  27/06/1997    1 1952.533 1965.589 1997.485
5  27/06/1997    1 1952.533 1965.589 1997.485
6  27/06/1997    1 1952.533 1965.589 1997.485
7  27/06/1997    1 1952.533 1965.589 1997.485
8  27/06/1997    1 1952.533 1965.589 1997.485
9  27/06/1997    1 1952.533 1965.589 1997.485
10 27/06/1997    1 1952.533 1965.589 1997.485
11 27/06/1997    1 1952.533 1965.589 1997.485
12 27/06/1997    1 1952.533 1965.589 1997.485
13 27/06/1997    1 1952.533 1965.589 1997.485
14 23/05/1995    0 1954.246 1972.686 1995.388
15 23/05/1995    0 1954.246 1972.686 1995.388
16 23/05/1995    0 1954.246 1972.686 1995.388
17 23/05/1995    0 1954.246 1972.686 1995.388
18 23/05/1995    0 1954.246 1972.686 1995.388
19 23/05/1995    0 1954.246 1972.686 1995.388
20 23/05/1995    0 1954.246 1972.686 1995.388
21 23/05/1995    0 1954.246 1972.686 1995.388
22 23/05/1995    0 1954.246 1972.686 1995.388
23 23/05/1995    0 1954.246 1972.686 1995.388
24 23/05/1995    0 1954.246 1972.686 1995.388
25 24/07/1998    1 1987.437 1991.974 1998.559
26 24/07/1998    1 1987.437 1991.974 1998.559
27 24/07/1998    1 1987.437 1991.974 1998.559
28 24/07/1998    1 1987.437 1991.974 1998.559
> str( x2 )
Classes ‘Lexis’ and 'data.frame':	28 obs. of  14 variables:
 $ lex.id : int  1 1 1 1 1 1 1 1 1 1 ...
 $ per    : num  1966 1968 1970 1973 1975 ...
 $ age    : num  13.1 15 17.5 20 22.5 ...
 $ lex.dur: num  1.94 2.47 2.53 2.47 2.53 ...
 $ lex.Cst: num  0 0 0 0 0 0 0 0 0 0 ...
 $ lex.Xst: num  0 0 0 0 0 0 0 0 0 0 ...
 $ id     : chr  "A" "A" "A" "A" ...
 $ birth  : chr  "14/07/1952" "14/07/1952" "14/07/1952" "14/07/1952" ...
 $ entry  : chr  "04/08/1965" "04/08/1965" "04/08/1965" "04/08/1965" ...
 $ exit   : chr  "27/06/1997" "27/06/1997" "27/06/1997" "27/06/1997" ...
 $ fail   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ bt     : num  1953 1953 1953 1953 1953 ...
 $ en     : num  1966 1966 1966 1966 1966 ...
 $ ex     : num  1997 1997 1997 1997 1997 ...
 - attr(*, "breaks")=List of 2
  ..$ per: num  1900 1905 1910 1915 1920 ...
  ..$ age: num  0 5 10 15 20 25 30 35 40 45 ...
 - attr(*, "time.scales")= chr  "per" "age"
 - attr(*, "time.since")= chr  "" ""
> 
> # Tabulate the cases and the person-years
> summary( x2 )
    
Transitions:
     To
From  0 1  Records:  Events: Risk time:  Persons:
   0 26 2        28        2      61.18         3
> tapply( status(x2,"exit")==1, list( timeBand(x2,"age","left"),
+                                     timeBand(x2,"per","left") ), sum )
   1965 1970 1975 1980 1985 1990 1995
0    NA   NA   NA   NA   NA    0   NA
5    NA   NA   NA   NA   NA    0    0
10    0   NA   NA   NA   NA   NA    1
15    0    0   NA   NA   NA   NA   NA
20   NA    0    0   NA   NA   NA   NA
25   NA   NA    0    0   NA   NA   NA
30   NA   NA   NA    0    0   NA   NA
35   NA   NA   NA   NA    0    0   NA
40   NA   NA   NA   NA   NA    0    1
> tapply( dur(x2),  list( timeBand(x2,"age","left"),
+                         timeBand(x2,"per","left") ), sum )
       1965     1970     1975     1980     1985      1990     1995
0        NA       NA       NA       NA       NA 0.4633812       NA
5        NA       NA       NA       NA       NA 2.5626283 2.437372
10 1.943190       NA       NA       NA       NA        NA 1.121150
15 2.467488 4.093087       NA       NA       NA        NA       NA
20       NA 3.221081 6.778919       NA       NA        NA       NA
25       NA       NA 3.221081 6.778919       NA        NA       NA
30       NA       NA       NA 3.221081 6.778919        NA       NA
35       NA       NA       NA       NA 3.221081 6.7789185       NA
40       NA       NA       NA       NA       NA 3.2210815 2.873374
> 
> 
> 
> cleanEx()
> nameEx("stack.Lexis")
> ### * stack.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stack.Lexis
> ### Title: Functions to facilitate analysis of multistate models.
> ### Aliases: stack.Lexis tmat tmat.Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> data(DMlate)
> str(DMlate)
'data.frame':	10000 obs. of  7 variables:
 $ sex  : Factor w/ 2 levels "M","F": 2 1 2 2 1 2 1 1 2 1 ...
 $ dobth: num  1940 1939 1918 1965 1933 ...
 $ dodm : num  1999 2003 2005 2009 2009 ...
 $ dodth: num  NA NA NA NA NA ...
 $ dooad: num  NA 2007 NA NA NA ...
 $ doins: num  NA NA NA NA NA NA NA NA NA NA ...
 $ dox  : num  2010 2010 2010 2010 2010 ...
> dml <- Lexis( entry=list(Per=dodm, Age=dodm-dobth, DMdur=0 ),
+                exit=list(Per=dox),
+         exit.status=factor(!is.na(dodth),labels=c("DM","Dead")),
+                data=DMlate )
NOTE: entry.status has been set to "DM" for all.
Warning in Lexis(entry = list(Per = dodm, Age = dodm - dobth, DMdur = 0),  :
  Dropping 4 rows with duration of follow up < tol

> dmi <- cutLexis( dml, cut=dml$doins, new.state="Ins", pre="DM" )
> summary( dmi )
     
Transitions:
     To
From    DM  Ins Dead  Records:  Events: Risk time:  Persons:
  DM  6157 1694 2048      9899     3742   45885.49      9899
  Ins    0 1340  451      1791      451    8387.77      1791
  Sum 6157 3034 2499     11690     4193   54273.27      9996
> ls.dmi <- stack( dmi )
> str( ls.dmi )
Classes ‘stacked.Lexis’ and 'data.frame':	21589 obs. of  16 variables:
 $ Per     : num  1999 2003 2005 2009 2009 ...
 $ Age     : num  58.7 64.1 86.3 44 75.8 ...
 $ DMdur   : num  0 0 0 0 0 0 0 0 0 0 ...
 $ lex.dur : num  11.08 6.689 5.446 0.736 1.344 ...
 $ lex.Cst : Factor w/ 3 levels "DM","Ins","Dead": 1 1 1 1 1 1 1 1 1 1 ...
 $ lex.Xst : Factor w/ 3 levels "DM","Ins","Dead": 1 1 1 1 1 3 1 1 3 1 ...
 $ lex.Tr  : Factor w/ 3 levels "DM->Ins","DM->Dead",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ lex.Fail: logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ lex.id  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ sex     : Factor w/ 2 levels "M","F": 2 1 2 2 1 2 1 1 2 1 ...
 $ dobth   : num  1940 1939 1918 1965 1933 ...
 $ dodm    : num  1999 2003 2005 2009 2009 ...
 $ dodth   : num  NA NA NA NA NA ...
 $ dooad   : num  NA 2007 NA NA NA ...
 $ doins   : num  NA NA NA NA NA NA NA NA NA NA ...
 $ dox     : num  2010 2010 2010 2010 2010 ...
 - attr(*, "breaks")=List of 3
  ..$ Per  : NULL
  ..$ Age  : NULL
  ..$ DMdur: NULL
 - attr(*, "time.scales")= chr  "Per" "Age" "DMdur"
> # Check that all the transitions and person-years got across.
> with( ls.dmi, rbind( table(lex.Fail,lex.Tr),
+                      tapply(lex.dur,lex.Tr,sum) ) )
       DM->Ins DM->Dead Ins->Dead
FALSE  8205.00  7851.00  1340.000
TRUE   1694.00  2048.00   451.000
      45885.49 45885.49  8387.773
> 
> 
> 
> cleanEx()
> nameEx("stattable")
> ### * stattable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat.table
> ### Title: Tables of summary statistics
> ### Aliases: stat.table print.stat.table
> ### Keywords: iteration category
> 
> ### ** Examples
> 
> data(warpbreaks)
> # A one-way table
> stat.table(tension,list(count(),mean(breaks)),data=warpbreaks)
 ------------------------------- 
 tension   count() mean(breaks)  
 ------------------------------- 
 L              18        36.39  
 M              18        26.39  
 H              18        21.67  
 ------------------------------- 
> # The same table with informative labels
> stat.table(index=list("Tension level"=tension),list(N=count(),
+            "mean number of breaks"=mean(breaks)),data=warpbreaks)
 -------------------------- 
 Tension         N    mean  
 level              number  
                        of  
                    breaks  
 -------------------------- 
 L              18   36.39  
 M              18   26.39  
 H              18   21.67  
 -------------------------- 
> 
> # A two-way table
> stat.table(index=list(tension,wool),mean(breaks),data=warpbreaks)  
 -------------------------- 
          ------wool------- 
 tension         A       B  
 -------------------------- 
 L           44.56   28.22  
 M           24.00   28.78  
 H           24.56   18.78  
 -------------------------- 
> # The same table with margins over tension, but not wool
> stat.table(index=list(tension,wool),mean(breaks),data=warpbreaks,
+            margins=c(TRUE, FALSE))
 -------------------------- 
          ------wool------- 
 tension         A       B  
 -------------------------- 
 L           44.56   28.22  
 M           24.00   28.78  
 H           24.56   18.78  
                            
 Total       31.04   25.26  
 -------------------------- 
> 
> # A table of column percentages
> stat.table(list(tension,wool), percent(tension), data=warpbreaks)
 -------------------------- 
          ------wool------- 
 tension         A       B  
 -------------------------- 
 L            33.3    33.3  
 M            33.3    33.3  
 H            33.3    33.3  
 -------------------------- 
> # Cell percentages, with margins
> stat.table(list(tension,wool),percent(tension,wool), margin=TRUE,
+            data=warpbreaks)
 ---------------------------------- 
          ----------wool----------- 
 tension         A       B   Total  
 ---------------------------------- 
 L            16.7    16.7    33.3  
 M            16.7    16.7    33.3  
 H            16.7    16.7    33.3  
                                    
 Total        50.0    50.0   100.0  
 ---------------------------------- 
> 
> # A table with multiple statistics
> # Note how each statistic has its own default precision
> a <- stat.table(index=list(wool,tension),
+                 contents=list(count(),mean(breaks),percent (wool)),
+                 data=warpbreaks)
> print(a)
 ------------------------------- 
       ---------tension--------- 
 wool         L       M       H  
 ------------------------------- 
 A            9       9       9  
          44.56   24.00   24.56  
           50.0    50.0    50.0  
                                 
 B            9       9       9  
          28.22   28.78   18.78  
           50.0    50.0    50.0  
 ------------------------------- 
> # Print the percentages rounded to the nearest integer
> print(a, digits=c(percent=0))
 ------------------------------- 
       ---------tension--------- 
 wool         L       M       H  
 ------------------------------- 
 A            9       9       9  
          44.56   24.00   24.56  
             50      50      50  
                                 
 B            9       9       9  
          28.22   28.78   18.78  
             50      50      50  
 ------------------------------- 
> 
> 
> 
> 
> cleanEx()
> nameEx("summary.Lexis")
> ### * summary.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.Lexis
> ### Title: Summarize transitions and risk time from a Lexis object
> ### Aliases: summary.Lexis print.summary.Lexis
> ### Keywords: survival
> 
> ### ** Examples
> 
> data( nickel )
> # Lung cancer deaths and other deaths are coded 1 and 2
> nic <- Lexis( data=nickel,
+              entry=list(age=agein),
+               exit=list(age=ageout,cal=ageout+dob,tfh=ageout-age1st),
+        exit.status=factor( (icd > 0) + (icd %in% c(162,163)),
+                            labels=c("Alive","Other","Lung") ) )
NOTE: entry.status has been set to "Alive" for all.
> str( nic )
Classes ‘Lexis’ and 'data.frame':	679 obs. of  14 variables:
 $ age     : num  45.2 48.3 53 47.9 54.7 ...
 $ cal     : num  1934 1934 1934 1934 1934 ...
 $ tfh     : num  27.7 25.1 27.7 23.2 24.8 ...
 $ lex.dur : num  47.75 15 1.17 21.77 22.1 ...
 $ lex.Cst : Factor w/ 3 levels "Alive","Other",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ lex.Xst : Factor w/ 3 levels "Alive","Other",..: 1 3 3 2 2 3 2 2 2 2 ...
 $ lex.id  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ id      : num  3 4 6 8 9 10 15 16 17 18 ...
 $ icd     : num  0 162 163 527 150 163 334 160 420 12 ...
 $ exposure: num  5 5 10 9 0 2 0 0.5 0 0 ...
 $ dob     : num  1889 1886 1881 1886 1880 ...
 $ age1st  : num  17.5 23.2 25.2 24.7 30 ...
 $ agein   : num  45.2 48.3 53 47.9 54.7 ...
 $ ageout  : num  93 63.3 54.2 69.7 76.8 ...
 - attr(*, "time.scales")= chr  "age" "cal" "tfh"
 - attr(*, "time.since")= chr  "" "" ""
 - attr(*, "breaks")=List of 3
  ..$ age: NULL
  ..$ cal: NULL
  ..$ tfh: NULL
> head( nic )
      age      cal     tfh lex.dur lex.Cst lex.Xst lex.id id icd exposure
1 45.2273 1934.246 27.7465 47.7535   Alive   Alive      1  3   0        5
2 48.2684 1934.246 25.0820 15.0028   Alive    Lung      2  4 162        5
3 52.9917 1934.246 27.7465  1.1727   Alive    Lung      3  6 163       10
4 47.9067 1934.246 23.1861 21.7727   Alive   Other      4  8 527        9
5 54.7465 1934.246 24.7890 22.0977   Alive   Other      5  9 150        0
6 44.3314 1934.246 23.0437 18.2099   Alive    Lung      6 10 163        2
       dob  age1st   agein  ageout
1 1889.019 17.4808 45.2273 92.9808
2 1885.978 23.1864 48.2684 63.2712
3 1881.255 25.2452 52.9917 54.1644
4 1886.340 24.7206 47.9067 69.6794
5 1879.500 29.9575 54.7465 76.8442
6 1889.915 21.2877 44.3314 62.5413
> summary( nic )
       
Transitions:
     To
From    Alive Other Lung  Records:  Events: Risk time:  Persons:
  Alive    47   495  137       679      632   15348.06       679
> # More detailed summary, by exposure level
> summary( nic, by=nic$exposure>5, Rates=TRUE, scale=100 )
$`FALSE`
       
Transitions:
     To
From    Alive Other Lung  Records:  Events: Risk time:  Persons:
  Alive    46   397  103       546      500     133.38       546
       
Rates (per 100):
     To
From    Alive Other Lung Total
  Alive  0.00  2.98 0.77  3.75

$`TRUE`
       
Transitions:
     To
From    Alive Other Lung  Records:  Events: Risk time:  Persons:
  Alive     1    98   34       133      132       20.1       133
       
Rates (per 100):
     To
From    Alive Other Lung Total
  Alive  0.00  4.88 1.69  6.57

> 
> 
> 
> cleanEx()
> nameEx("testisDK")
> ### * testisDK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: testisDK
> ### Title: Testis cancer incidence in Denmark, 1943-1996
> ### Aliases: testisDK
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(testisDK)
> head(testisDK)
  A    P D        Y
1 0 1943 1 39649.50
2 1 1943 1 36942.83
3 2 1943 0 34588.33
4 3 1943 1 33267.00
5 4 1943 0 32614.00
6 5 1943 0 32020.33
> 
> 
> 
> cleanEx()
> nameEx("thoro")
> ### * thoro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thoro
> ### Title: Thorotrast Study
> ### Aliases: thoro
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(thoro)
> str(thoro)
'data.frame':	2470 obs. of  14 variables:
 $ id      : num  1 2 3 4 5 6 7 8 9 10 ...
 $ sex     : num  2 2 1 1 1 2 1 2 1 1 ...
 $ birthdat: Date, format: "1916-08-11" "1927-11-05" ...
 $ contrast: num  1 1 1 1 1 1 1 1 1 1 ...
 $ injecdat: Date, format: "1938-10-17" "1943-11-28" ...
 $ volume  : num  22 80 10 10 10 20 10 40 34 10 ...
 $ exitdat : Date, format: "1976-10-15" "1966-01-12" ...
 $ exitstat: num  1 1 1 1 1 1 1 3 1 1 ...
 $ cause   : num  2 8 2 2 14 14 3 NA 2 2 ...
 $ liverdat: Date, format: "1966-01-12" "1966-01-12" ...
 $ liver   : num  1 1 0 1 0 0 0 0 1 0 ...
 $ hepcc   : num  0 0 0 0 0 0 0 0 0 0 ...
 $ chola   : num  0 0 0 0 0 0 0 0 0 0 ...
 $ hmang   : num  1 1 0 1 0 0 0 0 1 0 ...
> 
> 
> 
> cleanEx()
> nameEx("time.band")
> ### * time.band
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timeBand
> ### Title: Extract time band data from a split Lexis object
> ### Aliases: timeBand breaks
> ### Keywords: attribute
> 
> ### ** Examples
> 
> data(diet)
> diet <- cal.yr(diet)
> diet.lex <- Lexis(entry=list(period=doe),
+                    exit=list(period=dox, age=dox-dob),
+             exit.status=chd,
+                    data=diet)
> diet.split <- splitLexis(diet.lex, breaks=seq(40,70,5), "age" )
> age.left <- timeBand(diet.split, "age", "left")
> table(age.left)
age.left
-Inf   40   45   50   55   60   65 
  26   78  195  238  272  237  149 
> age.fact <- timeBand(diet.split, "age", "factor")
> table(age.fact)
age.fact
(-Inf,40]   (40,45]   (45,50]   (50,55]   (55,60]   (60,65]   (65,70]  (70,Inf] 
       26        78       195       238       272       237       149         0 
> age.mid <- timeBand(diet.split, "age", "mid")
> table(age.mid)
age.mid
-Inf 42.5 47.5 52.5 57.5 62.5 67.5 
  26   78  195  238  272  237  149 
> 
> 
> 
> cleanEx()
> nameEx("transform.Lexis")
> ### * transform.Lexis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform.Lexis
> ### Title: Transform a Lexis (or stacked.Lexis) objects
> ### Aliases: transform.Lexis Relevel.Lexis transform.stacked.Lexis
> ###   factorize factorize.Lexis levels.Lexis order.Lexis sort.Lexis
> ### Keywords: manip
> 
> ### ** Examples
> 
> data( nickel )
> nic <- Lexis( data = nickel,
+                 id = id,
+              entry = list(age=agein),
+               exit = list(age=ageout,cal=ageout+dob,tfh=ageout-age1st),
+     ## Lung cancer deaths are coded 2 and other deaths are coded 1
+        exit.status = ( (icd > 0) + (icd %in% c(162,163)) ) )
> str( nic )
Classes ‘Lexis’ and 'data.frame':	679 obs. of  14 variables:
 $ age     : num  45.2 48.3 53 47.9 54.7 ...
 $ cal     : num  1934 1934 1934 1934 1934 ...
 $ tfh     : num  27.7 25.1 27.7 23.2 24.8 ...
 $ lex.dur : num  47.75 15 1.17 21.77 22.1 ...
 $ lex.Cst : num  0 0 0 0 0 0 0 0 0 0 ...
 $ lex.Xst : int  0 2 2 1 1 2 1 1 1 1 ...
 $ lex.id  : num  3 4 6 8 9 10 15 16 17 18 ...
 $ id      : num  3 4 6 8 9 10 15 16 17 18 ...
 $ icd     : num  0 162 163 527 150 163 334 160 420 12 ...
 $ exposure: num  5 5 10 9 0 2 0 0.5 0 0 ...
 $ dob     : num  1889 1886 1881 1886 1880 ...
 $ age1st  : num  17.5 23.2 25.2 24.7 30 ...
 $ agein   : num  45.2 48.3 53 47.9 54.7 ...
 $ ageout  : num  93 63.3 54.2 69.7 76.8 ...
 - attr(*, "time.scales")= chr  "age" "cal" "tfh"
 - attr(*, "time.since")= chr  "" "" ""
 - attr(*, "breaks")=List of 3
  ..$ age: NULL
  ..$ cal: NULL
  ..$ tfh: NULL
> levels( nic )
NULL
> nit <- transform( nic, cumex = exposure*(agein-age1st) )
> str( nit )
Classes ‘Lexis’ and 'data.frame':	679 obs. of  15 variables:
 $ age     : num  45.2 48.3 53 47.9 54.7 ...
 $ cal     : num  1934 1934 1934 1934 1934 ...
 $ tfh     : num  27.7 25.1 27.7 23.2 24.8 ...
 $ lex.dur : num  47.75 15 1.17 21.77 22.1 ...
 $ lex.Cst : num  0 0 0 0 0 0 0 0 0 0 ...
 $ lex.Xst : int  0 2 2 1 1 2 1 1 1 1 ...
 $ lex.id  : num  3 4 6 8 9 10 15 16 17 18 ...
 $ id      : num  3 4 6 8 9 10 15 16 17 18 ...
 $ icd     : num  0 162 163 527 150 163 334 160 420 12 ...
 $ exposure: num  5 5 10 9 0 2 0 0.5 0 0 ...
 $ dob     : num  1889 1886 1881 1886 1880 ...
 $ age1st  : num  17.5 23.2 25.2 24.7 30 ...
 $ agein   : num  45.2 48.3 53 47.9 54.7 ...
 $ ageout  : num  93 63.3 54.2 69.7 76.8 ...
 $ cumex   : num  139 125 277 209 0 ...
 - attr(*, "time.scales")= chr  "age" "cal" "tfh"
 - attr(*, "time.since")= chr  "" "" ""
 - attr(*, "breaks")=List of 3
  ..$ age: NULL
  ..$ cal: NULL
  ..$ tfh: NULL
> ## It is still a Lexis object!
> summary( nic )
    
Transitions:
     To
From  0   1   2  Records:  Events: Risk time:  Persons:
   0 47 495 137       679      632   15348.06       676
> nix <- factorize.Lexis( nic, c("Alive","Lung","Dead"))
New levels for lex.Xst and lex.Cst generated:
  old   new
1   0 Alive
2   1  Lung
3   2  Dead
> niw <- factorize.Lexis( nix, c("Alive","Pulm","Mort"))
New levels for lex.Xst and lex.Cst generated:
    old   new
1 Alive Alive
2  Lung  Pulm
3  Dead  Mort
> niz <- factorize.Lexis( niw, states=list("Alive",c("Pulm","Mort")), coll=" \n& ")
     type   old           new
1 lex.Cst Alive         Alive
2 lex.Cst  Pulm              
3 lex.Cst  Mort              
4 lex.Xst Alive         Alive
5 lex.Xst  Pulm Pulm \n& Mort
6 lex.Xst  Mort Pulm \n& Mort
> boxes( niw, boxpos=TRUE )
> par( new=TRUE )
> boxes( niz, boxpos=TRUE )
> siw <- stack( niw )
> str( siw )
Classes ‘stacked.Lexis’ and 'data.frame':	1358 obs. of  16 variables:
 $ age     : num  45.2 48.3 53 47.9 54.7 ...
 $ cal     : num  1934 1934 1934 1934 1934 ...
 $ tfh     : num  27.7 25.1 27.7 23.2 24.8 ...
 $ lex.dur : num  47.75 15 1.17 21.77 22.1 ...
 $ lex.Cst : Factor w/ 3 levels "Alive","Pulm",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ lex.Xst : Factor w/ 3 levels "Alive","Pulm",..: 1 3 3 2 2 3 2 2 2 2 ...
 $ lex.Tr  : Factor w/ 2 levels "Alive->Pulm",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ lex.Fail: logi  FALSE FALSE FALSE TRUE TRUE FALSE ...
 $ lex.id  : num  3 4 6 8 9 10 15 16 17 18 ...
 $ id      : num  3 4 6 8 9 10 15 16 17 18 ...
 $ icd     : num  0 162 163 527 150 163 334 160 420 12 ...
 $ exposure: num  5 5 10 9 0 2 0 0.5 0 0 ...
 $ dob     : num  1889 1886 1881 1886 1880 ...
 $ age1st  : num  17.5 23.2 25.2 24.7 30 ...
 $ agein   : num  45.2 48.3 53 47.9 54.7 ...
 $ ageout  : num  93 63.3 54.2 69.7 76.8 ...
 - attr(*, "breaks")=List of 3
  ..$ age: NULL
  ..$ cal: NULL
  ..$ tfh: NULL
 - attr(*, "time.scales")= chr  "age" "cal" "tfh"
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("twoby2")
> ### * twoby2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twoby2
> ### Title: Analysis of a two by two table
> ### Aliases: twoby2
> ### Keywords: univar htest
> 
> ### ** Examples
> 
> Treat <- sample(c("A","B"), 50, rep=TRUE )
> Resp <- c("Yes","No")[1+rbinom(50,1,0.3+0.2*(Treat=="A"))]
> twoby2( Treat, Resp )                 
2 by 2 table analysis: 
------------------------------------------------------ 
Outcome   : No 
Comparing : A vs. B 

  No Yes    P(No) 95% conf. interval
A  6  17   0.2609    0.1222   0.4723
B 10  17   0.3704    0.2122   0.5623

                                    95% conf. interval
             Relative Risk:  0.7043    0.3024   1.6407
         Sample Odds Ratio:  0.6000    0.1780   2.0223
Conditional MLE Odds Ratio:  0.6062    0.1454   2.3472
    Probability difference: -0.1095   -0.3406   0.1466

             Exact P-value: 0.5456 
        Asymptotic P-value: 0.4099 
------------------------------------------------------
> twoby2( table( Treat, Resp )[,2:1] ) # Comparison the other way round
2 by 2 table analysis: 
------------------------------------------------------ 
Outcome   : Yes 
Comparing : A vs. B 

  Yes No    P(Yes) 95% conf. interval
A  17  6    0.7391    0.5277   0.8778
B  17 10    0.6296    0.4377   0.7878

                                   95% conf. interval
             Relative Risk: 1.1739    0.8047   1.7126
         Sample Odds Ratio: 1.6667    0.4945   5.6174
Conditional MLE Odds Ratio: 1.6497    0.4260   6.8765
    Probability difference: 0.1095   -0.1466   0.3406

             Exact P-value: 0.5456 
        Asymptotic P-value: 0.4099 
------------------------------------------------------
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  80.824 1.012 81.941 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
