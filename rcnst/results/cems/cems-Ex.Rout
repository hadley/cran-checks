
R Under development (unstable) (2017-08-15 r73096) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cems"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cems')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cem")
> ### * cem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cem
> ### Title: Conditional Expectation Manifolds
> ### Aliases: cem cems cem.geodesic cems-package cem.optimize predict.cem
> ### Keywords: nonparametric,models,nonlinear
> 
> ### ** Examples
> 
> 
> ##Noisy half circle example
> phi <- runif(100)*pi
> arc <- cbind(cos(phi), sin(phi)) * (1+rnorm(100) * 0.1)
> 
> pc <-  cem(y=arc, x=phi, knnX=10, iter=10, optimalSigmaX=TRUE, verbose=2)
sigmaX: 0.053912 
grad sigmaX: 0.027284 / -0.041095 
sigmaX: 0.059304 
sigmaX: 0.059304 
grad sigmaX: 0.016042 / -0.027284 
sigmaX: 0.065234 
sigmaX: 0.065234 
grad sigmaX: 0.009913 / -0.016042 
sigmaX: 0.071757 
sigmaX: 0.071757 
grad sigmaX: 0.007280 / -0.009913 
sigmaX: 0.078933 
sigmaX: 0.078933 
grad sigmaX: 0.005995 / -0.007280 
sigmaX: 0.086827 
sigmaX: 0.086827 
grad sigmaX: 0.004986 / -0.005995 
sigmaX: 0.095509 
sigmaX: 0.095509 
grad sigmaX: 0.003942 / -0.004986 
sigmaX: 0.105060 
sigmaX: 0.105060 
grad sigmaX: 0.002919 / -0.003942 
sigmaX: 0.115566 
sigmaX: 0.115566 
grad sigmaX: 0.002044 / -0.002919 
sigmaX: 0.127123 
sigmaX: 0.127123 
grad sigmaX: 0.001387 / -0.002044 
sigmaX: 0.139835 
sigmaX: 0.139835 
grad sigmaX: 0.000952 / -0.001387 
sigmaX: 0.153819 
sigmaX: 0.153819 
grad sigmaX: 0.000682 / -0.000952 
sigmaX: 0.169200 
sigmaX: 0.169200 
grad sigmaX: 0.000491 / -0.000682 
sigmaX: 0.186120 
sigmaX: 0.186120 
grad sigmaX: 0.000324 / -0.000491 
sigmaX: 0.204732 
sigmaX: 0.204732 
grad sigmaX: 0.000155 / -0.000324 
sigmaX: 0.225206 
sigmaX: 0.225206 
grad sigmaX: -0.000033 / -0.000155 
sigmaX: 0.225206 
Mse after g: 0.008539 
Ortho after g: 0.000064  
Penalty after g: 0.000000 
Total after g: 0.000064 
 
 
 ---- 
 
Mse start: 0.008539 
Ortho start: 0.000064  
Penalty start: 0.000000 
Total start: 0.000064 
 
Mse after ortho: 0.008499 
Ortho after ortho: 0.000052  
Penalty after ortho: 0.000000 
Total after g: 0.000052 
 
sigmaX: 0.225206 
grad sigmaX: -0.000120 / -0.000032 
sigmaX: 0.225206 
Mse after g: 0.008499 
Ortho after g: 0.000052  
Penalty after g: 0.000000 
Total after g: 0.000052 
 
 
 ---- 
 
Mse start: 0.008499 
Ortho start: 0.000052  
Penalty start: 0.000000 
Total start: 0.000052 
 
Mse after ortho: 0.008496 
Ortho after ortho: 0.000052  
Penalty after ortho: 0.000000 
Total after g: 0.000052 
 
sigmaX: 0.225206 
grad sigmaX: -0.000141 / -0.000009 
sigmaX: 0.225206 
Mse after g: 0.008496 
Ortho after g: 0.000052  
Penalty after g: 0.000000 
Total after g: 0.000052 
 
 
 ---- 
 
> 
> #predict original data
> y <- predict(pc, pc$x);
> 
> #predict new data
> xt <- seq(min(pc$x), max(pc$x), length.out=100)
> yt <- predict(pc, xt)
> 
> #plot things
> arc0 <- cbind(cos(phi), sin(phi))
> o0 <- order(phi) 
> 
> par(mar=c(5,5,4,2))
> plot(arc, xlab=expression(y[1]), ylab=expression(y[2]), col = "#00000020",
+      pch=19, asp=1, cex.lab=1.5, cex.axis=1.5, cex=2, bty="n")
> 
> lines(arc0[o0,], lwd=4, col="black", lty=6)
> lines(yt$y, col="dodgerblue", lwd=4, lty=1)
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("frey_faces")
> ### * frey_faces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: frey_faces
> ### Title: Frey faces
> ### Aliases: frey_faces faces
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("frey_faces")
> im <- matrix(faces[1, 560:1], 20, 28)
> image(1:nrow(im), 1:ncol(im), im, xlab="", ylab="")
> 
> 
> 
> 
> cleanEx()
> nameEx("swissroll")
> ### * swissroll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: swissroll
> ### Title: Fourpeaks Function
> ### Aliases: swissroll
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(rgl)
> data(swissroll)
Warning in data(swissroll) : data set ‘swissroll’ not found
> #create 1000 samples with standard parameters
> d <- swissroll()
> 
> #X contains orginal data
> plot3d(d$X)
Warning in rgl.open(useNULL) : RGL: no suitable visual available

 *** caught segfault ***
address (nil), cause 'memory not mapped'

Traceback:
 1: rgl.open(useNULL)
 2: open3d()
 3: .check3d()
 4: next3d()
 5: plot3d.default(d$X)
 6: plot3d(d$X)
An irrecoverable exception occurred. R is aborting now ...
Segmentation fault (core dumped)
