
R Under development (unstable) (2021-02-26 r80036) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ICBioMark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ICBioMark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fit_gen_model")
> ### * fit_gen_model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_gen_model
> ### Title: Fit Generative Model
> ### Aliases: fit_gen_model
> 
> ### ** Examples
> 
> example_gen_model <- fit_gen_model(example_maf_data$gene_lengths, table = example_tables$train)
Loading required package: Matrix
> print(names(example_gen_model))
[1] "fit"   "dev"   "s_min" "names"
> 
> 
> 
> cleanEx()

detaching ‘package:Matrix’

> nameEx("fit_gen_model_uninteract")
> ### * fit_gen_model_uninteract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_gen_model_uninteract
> ### Title: Fit Generative Model Without Gene/Variant Type-Specific
> ###   Interactions
> ### Aliases: fit_gen_model_uninteract
> 
> ### ** Examples
> 
> example_gen_model_unisamp <- fit_gen_model_unisamp(example_maf_data$gene_lengths,
+                                                    table = example_tables$train)
> print(names(example_gen_model))
[1] "fit"   "dev"   "s_min" "names"
> 
> 
> 
> cleanEx()
> nameEx("fit_gen_model_unisamp")
> ### * fit_gen_model_unisamp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_gen_model_unisamp
> ### Title: Fit Generative Model Without Sample-Specific Effects
> ### Aliases: fit_gen_model_unisamp
> 
> ### ** Examples
> 
> example_gen_model_unisamp <- fit_gen_model_unisamp(example_maf_data$gene_lengths,
+                                                    table = example_tables$train)
> print(names(example_gen_model))
[1] "fit"   "dev"   "s_min" "names"
> 
> 
> 
> cleanEx()
> nameEx("generate_maf_data")
> ### * generate_maf_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_maf_data
> ### Title: Generate mutation data.
> ### Aliases: generate_maf_data
> 
> ### ** Examples
> 
> # Generate some random data
> data <- generate_maf_data(n_samples = 10, n_genes = 20)
Generating data
Assembling maf
  |                                                                                                            |                                                                                                    |   0%  |                                                                                                            |=====                                                                                               |   5%  |                                                                                                            |==========                                                                                          |  10%  |                                                                                                            |===============                                                                                     |  15%  |                                                                                                            |====================                                                                                |  20%  |                                                                                                            |=========================                                                                           |  25%  |                                                                                                            |==============================                                                                      |  30%  |                                                                                                            |===================================                                                                 |  35%  |                                                                                                            |========================================                                                            |  40%  |                                                                                                            |=============================================                                                       |  45%  |                                                                                                            |==================================================                                                  |  50%  |                                                                                                            |=======================================================                                             |  55%  |                                                                                                            |============================================================                                        |  60%  |                                                                                                            |=================================================================                                   |  65%  |                                                                                                            |======================================================================                              |  70%  |                                                                                                            |===========================================================================                         |  75%  |                                                                                                            |================================================================================                    |  80%  |                                                                                                            |=====================================================================================               |  85%  |                                                                                                            |==========================================================================================          |  90%  |                                                                                                            |===============================================================================================     |  95%  |                                                                                                            |====================================================================================================| 100%> # See the first rows of the maf table.
> print(head(data$maf))
   Tumor_Sample_Barcode Hugo_Symbol Variant_Classification
48            SAMPLE_10     GENE_11      Missense_Mutation
19             SAMPLE_9      GENE_4                 Silent
30             SAMPLE_2      GENE_7      Missense_Mutation
7              SAMPLE_9      GENE_1      Missense_Mutation
51             SAMPLE_5     GENE_11            Splice_Site
17             SAMPLE_6      GENE_4      Missense_Mutation
> # See the first rows of the gene_lengths table.
> print(head(data$gene_lengths))
       Hugo_Symbol max_cds
GENE_1      GENE_1     961
GENE_2      GENE_2    1009
GENE_3      GENE_3    1011
GENE_4      GENE_4     976
GENE_5      GENE_5    1016
GENE_6      GENE_6     981
> 
> 
> 
> cleanEx()
> nameEx("get_K")
> ### * get_K
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_K
> ### Title: Construct Bias Penalisation
> ### Aliases: get_K
> 
> ### ** Examples
> 
> K <- get_K(example_gen_model, 1, example_tables$train$matrix)
> print(K)
[1] 16.08682
> 
> 
> 
> cleanEx()
> nameEx("get_auprc")
> ### * get_auprc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_auprc
> ### Title: AUPRC Metrics for Predictions
> ### Aliases: get_auprc
> 
> ### ** Examples
> 
> example_auprc <- get_auprc(predictions = get_predictions(example_refit_panel,
+ new_data = example_tables$val), biomarker_values = example_tmb_tables$val,
+ model = "Refitted T", threshold = 10)
> 
> 
> 
> cleanEx()
> nameEx("get_biomarker_from_maf")
> ### * get_biomarker_from_maf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_biomarker_from_maf
> ### Title: Produce a Table of Biomarker Values from a MAF
> ### Aliases: get_biomarker_from_maf
> 
> ### ** Examples
> 
> print(head(get_biomarker_from_maf(example_maf_data$maf, sample_list = paste0("SAMPLE_", 1:100))))
         Tumor_Sample_Barcode TIB
SAMPLE_1             SAMPLE_1   0
SAMPLE_2             SAMPLE_2   0
SAMPLE_3             SAMPLE_3   0
SAMPLE_4             SAMPLE_4   0
SAMPLE_5             SAMPLE_5   1
SAMPLE_6             SAMPLE_6   0
> 
> 
> 
> cleanEx()
> nameEx("get_biomarker_tables")
> ### * get_biomarker_tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_biomarker_tables
> ### Title: Get True Biomarker Values on Training, Validation and Test Sets
> ### Aliases: get_biomarker_tables
> 
> ### ** Examples
> 
> print(head(get_biomarker_tables(example_maf_data$maf, sample_list = paste0("SAMPLE_", 1:100))))
$train
          Tumor_Sample_Barcode TIB
SAMPLE_28            SAMPLE_28   0
SAMPLE_80            SAMPLE_80   0
SAMPLE_22            SAMPLE_22   1
SAMPLE_9              SAMPLE_9   2
SAMPLE_5              SAMPLE_5   1
SAMPLE_38            SAMPLE_38   2
SAMPLE_16            SAMPLE_16   2
SAMPLE_4              SAMPLE_4   0
SAMPLE_86            SAMPLE_86   0
SAMPLE_90            SAMPLE_90   0
SAMPLE_70            SAMPLE_70   0
SAMPLE_79            SAMPLE_79   1
SAMPLE_78            SAMPLE_78   1
SAMPLE_14            SAMPLE_14   0
SAMPLE_56            SAMPLE_56   0
SAMPLE_62            SAMPLE_62   0
SAMPLE_93            SAMPLE_93   2
SAMPLE_84            SAMPLE_84   1
SAMPLE_21            SAMPLE_21   0
SAMPLE_40            SAMPLE_40   0
SAMPLE_92            SAMPLE_92   1
SAMPLE_67            SAMPLE_67   0
SAMPLE_96            SAMPLE_96   0
SAMPLE_66            SAMPLE_66   0
SAMPLE_47            SAMPLE_47   3
SAMPLE_81            SAMPLE_81   2
SAMPLE_48            SAMPLE_48   0
SAMPLE_3              SAMPLE_3   0
SAMPLE_41            SAMPLE_41   1
SAMPLE_32            SAMPLE_32   0
SAMPLE_42            SAMPLE_42   0
SAMPLE_43            SAMPLE_43   0
SAMPLE_2              SAMPLE_2   0
SAMPLE_54            SAMPLE_54   2
SAMPLE_49            SAMPLE_49   2
SAMPLE_99            SAMPLE_99   0
SAMPLE_51            SAMPLE_51   0
SAMPLE_6              SAMPLE_6   0
SAMPLE_77            SAMPLE_77   0
SAMPLE_29            SAMPLE_29   0
SAMPLE_71            SAMPLE_71   0
SAMPLE_85            SAMPLE_85   0
SAMPLE_57            SAMPLE_57   0
SAMPLE_8              SAMPLE_8   0
SAMPLE_26            SAMPLE_26   2
SAMPLE_17            SAMPLE_17   1
SAMPLE_58            SAMPLE_58   0
SAMPLE_91            SAMPLE_91   0
SAMPLE_60            SAMPLE_60   0
SAMPLE_76            SAMPLE_76   0
SAMPLE_98            SAMPLE_98   0
SAMPLE_35            SAMPLE_35   0
SAMPLE_72            SAMPLE_72   0
SAMPLE_94            SAMPLE_94   0
SAMPLE_73            SAMPLE_73   2
SAMPLE_50            SAMPLE_50   1
SAMPLE_10            SAMPLE_10   0
SAMPLE_45            SAMPLE_45   1
SAMPLE_25            SAMPLE_25   0
SAMPLE_46            SAMPLE_46   0
SAMPLE_19            SAMPLE_19   1
SAMPLE_65            SAMPLE_65   0
SAMPLE_23            SAMPLE_23   0
SAMPLE_63            SAMPLE_63   0
SAMPLE_20            SAMPLE_20   0
SAMPLE_7              SAMPLE_7   0
SAMPLE_52            SAMPLE_52   0
SAMPLE_37            SAMPLE_37   0
SAMPLE_31            SAMPLE_31   0
SAMPLE_88            SAMPLE_88   0

$val
          Tumor_Sample_Barcode TIB
SAMPLE_89            SAMPLE_89   1
SAMPLE_36            SAMPLE_36   0
SAMPLE_27            SAMPLE_27   1
SAMPLE_55            SAMPLE_55   2
SAMPLE_1              SAMPLE_1   0
SAMPLE_13            SAMPLE_13   1
SAMPLE_75            SAMPLE_75   0
SAMPLE_64            SAMPLE_64   0
SAMPLE_30            SAMPLE_30   0
SAMPLE_68            SAMPLE_68   1
SAMPLE_59            SAMPLE_59   0
SAMPLE_18            SAMPLE_18   1
SAMPLE_82            SAMPLE_82   0
SAMPLE_39            SAMPLE_39   1
SAMPLE_87            SAMPLE_87   1

$test
           Tumor_Sample_Barcode TIB
SAMPLE_11             SAMPLE_11   0
SAMPLE_12             SAMPLE_12   1
SAMPLE_15             SAMPLE_15   0
SAMPLE_24             SAMPLE_24   1
SAMPLE_33             SAMPLE_33   0
SAMPLE_34             SAMPLE_34   0
SAMPLE_44             SAMPLE_44   0
SAMPLE_53             SAMPLE_53   1
SAMPLE_61             SAMPLE_61   0
SAMPLE_69             SAMPLE_69   0
SAMPLE_74             SAMPLE_74   0
SAMPLE_83             SAMPLE_83   1
SAMPLE_95             SAMPLE_95   1
SAMPLE_97             SAMPLE_97   0
SAMPLE_100           SAMPLE_100   0

> 
> 
> 
> cleanEx()
> nameEx("get_gen_estimates")
> ### * get_gen_estimates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_gen_estimates
> ### Title: Investigate Generative Model Comparisons
> ### Aliases: get_gen_estimates
> 
> ### ** Examples
> 
> sat_dev <- get_gen_estimates(training_data = example_tables$train,
+                                        gen_model = example_gen_model,
+                                        alt_model_type = "S",
+                                        gene_lengths = example_maf_data$gene_lengths,
+                                        calculate_deviance = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("get_mutation_dictionary")
> ### * get_mutation_dictionary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_mutation_dictionary
> ### Title: Group and Filter Mutation Types
> ### Aliases: get_mutation_dictionary
> 
> ### ** Examples
> 
> # To understand the dictionary format, note that the following code
> dictionary <- get_mutation_dictionary(for_biomarker = "TMB")
> # is equivalent to
> dictionary <- c(rep("NS",9), rep("S", 8))
> names(dictionary) <- c('Missense_Mutation', 'Nonsense_Mutation',
+ 'Splice_Site', 'Translation_Start_Site',
+ 'Nonstop_Mutation', 'In_Frame_Ins',
+ 'In_Frame_Del', 'Frame_Shift_Del',
+ 'Frame_Shift_Ins', 'Silent',
+ 'Splice_Region', '3\'Flank', '5\'Flank',
+ 'Intron', 'RNA', '3\'UTR', '5\'UTR')
> # where the grouping levels are chosen to be "NS" and "S" for
> # nonsynonymous and synonymous mutations respectively.
> # the code
> dictionary <- get_mutation_dictionary(for_biomarker = "TIB", include_synonymous = FALSE)
> # is equivalent to
> dictionary <- dictionary <- c(rep("NS",7), rep("I", 2))
> names(dictionary) <- c('Missense_Mutation', 'Nonsense_Mutation',
+                        'Splice_Site', 'Translation_Start_Site',
+                       'Nonstop_Mutation', 'In_Frame_Ins',
+                       'In_Frame_Del', 'Frame_Shift_Del',
+                       'Frame_Shift_Ins')
> # where now "I" is used as a label to refer to indel mutations,
> # and synonymous mutations are filtered out.
> 
> 
> 
> cleanEx()
> nameEx("get_mutation_tables")
> ### * get_mutation_tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_mutation_tables
> ### Title: Produce Training, Validation and Test Matrices
> ### Aliases: get_mutation_tables
> 
> ### ** Examples
> 
> tables <- get_mutation_tables(example_maf_data$maf, sample_list = paste0("SAMPLE_", 1:100))
> 
> print(names(tables))
[1] "train" "val"   "test" 
> print(names(tables$train))
[1] "matrix"         "sample_list"    "gene_list"      "mut_types_list"
[5] "col_names"     
> 
> 
> 
> cleanEx()
> nameEx("get_p")
> ### * get_p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_p
> ### Title: Construct Optimisation Parameters.
> ### Aliases: get_p
> 
> ### ** Examples
> 
> p <- get_p(example_gen_model, example_tables$train$matrix,
+            marker_mut_types = c("I"), gene_lengths = example_maf_data$gene_lengths)
> print(p$p[1:5])
 GENE_1_NS   GENE_1_I   GENE_1_S  GENE_2_NS   GENE_2_I 
0.94457793 0.04484643 0.40081497 0.93779934 0.12075883 
> print(p$p_norm)
[1] 0.4855124
> print(p$bc[1:5])
[1]  2  5  8 11 14
> 
> 
> 
> cleanEx()
> nameEx("get_panels_from_fit")
> ### * get_panels_from_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_panels_from_fit
> ### Title: Extract Panel Details from Group Lasso Fit
> ### Aliases: get_panels_from_fit
> 
> ### ** Examples
> 
> panels <- get_panels_from_fit(example_maf_data$gene_lengths, example_first_pred_tmb$fit,
+ example_gen_model$names$gene_list, mut_types_list = example_gen_model$names$mut_types_list)
> 
> print(panels$fit)
NULL
> 
> 
> 
> cleanEx()
> nameEx("get_predictions")
> ### * get_predictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_predictions
> ### Title: Produce Predictions on an Unseen Dataset
> ### Aliases: get_predictions
> 
> ### ** Examples
> 
> example_predictions <- get_predictions(example_refit_range, new_data =
+ example_tables$val)
> 
> 
> 
> cleanEx()
> nameEx("get_r_squared")
> ### * get_r_squared
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_r_squared
> ### Title: R Squared Metrics for Predictions
> ### Aliases: get_r_squared
> 
> ### ** Examples
> 
> example_r <- get_r_squared(predictions = get_predictions(example_refit_panel, new_data =
+   example_tables$val), biomarker_values = example_tmb_tables$val, model = "Refitted T")
> 
> 
> 
> cleanEx()
> nameEx("get_stats")
> ### * get_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_stats
> ### Title: Metrics for Predictive Performance
> ### Aliases: get_stats
> 
> ### ** Examples
> 
> example_stat <- get_stats(predictions = get_predictions(example_refit_panel,
+ new_data = example_tables$val), biomarker_values = example_tmb_tables$val,
+ model = "Refitted T", threshold = 10)
> 
> 
> 
> cleanEx()
> nameEx("get_table_from_maf")
> ### * get_table_from_maf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_table_from_maf
> ### Title: Produce a Mutation Matrix from a MAF
> ### Aliases: get_table_from_maf
> 
> ### ** Examples
> 
> # We use the preloaded maf file example_maf_data
> # Now we make a mutation matrix
> table <- get_table_from_maf(example_maf_data$maf, sample_list = paste0("SAMPLE_", 1:100))
> 
> print(names(table))
[1] "matrix"         "sample_list"    "gene_list"      "mut_types_list"
[5] "col_names"     
> print(table$matrix[1:10,1:10])
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 20
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Error: promise already under evaluation: recursive default argument reference or earlier problems?
Execution halted
