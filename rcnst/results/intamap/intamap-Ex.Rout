
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "intamap"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('intamap')
Loading required package: sp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bayesCopula")
> ### * bayesCopula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesCopula
> ### Title: Performs spatial interpolation using copulas
> ### Aliases: bayesCopula
> ### Keywords: spatial
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(intamapExampleObject)
> ##D ## estimate parameters for the copula model
> ##D copula <- list(method="norm")
> ##D anisotropy <- list(lower = c(0,1), upper = c(pi, Inf), params = c(pi/3, 2))
> ##D correlation <- list(model = "Ste", lower=c(0.01, 0.01, 0.01), upper = c(0.99, Inf, 20),
> ##D                     params = c(0.05, 4, 3))
> ##D margin <- list(name = "gev", lower = c(0.01, -Inf), upper = c(Inf, Inf), params = c(30, 0.5))
> ##D trend <- list(F = as.matrix(rep(1, 196)), lower = -Inf, upper = Inf, params = 40)
> ##D estimates <- copulaEstimation(intamapExampleObject, margin, trend, correlation, anisotropy, copula)
> ##D ## make predictions at unobserved locations
> ##D predictions<-bayesCopula(intamapExampleObject, estimates, search = 25,
> ##D     calc = list(mean = TRUE, variance = TRUE, excprob = 40, quantile = 0.95))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("blockPredict")
> ### * blockPredict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blockPredict
> ### Title: Spatial block prediction
> ### Aliases: blockPredict spatialPredict.block
> ### Keywords: spatial
> 
> ### ** Examples
> 
> # This example skips some steps that might be necessary for more complicated
> # tasks, such as estimateParameters and pre- and postProcessing of the data
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = log(meuse$zinc)
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> proj4string(meuse) = CRS("+init=epsg:28992")
> proj4string(meuse.grid) = CRS("+init=epsg:28992")
> 
> # set up intamap object:
> obj = createIntamapObject(
+ 	observations = meuse,
+ 	predictionLocations = meuse.grid[sample(1:length(meuse.grid),10),],
+ # Prediction for a different projection possible if rgdal is available
+ 	targetCRS = ifelse(require(rgdal), "+init=epsg:3035", "+init=epsg:28992"),
+ 	class = "automap"
+ )
[1] "createIntamapObject: formulaString is missing, using:  value~1"
Loading required package: rgdal
rgdal: version: 1.2-8, (SVN revision 663)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 2.1.2, released 2016/10/24
 Path to GDAL shared files: /usr/share/gdal/2.1
 Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493]
 Path to PROJ.4 shared files: (autodetected)
 Linking to sp version: 1.2-5 
> 
> # do interpolation step:
> obj = conformProjections(obj)
> obj = estimateParameters(obj) 
> obj = blockPredict(obj,block=c(100,100))  # blockPredict
[using ordinary kriging]
[1] "performed ordinary block kriging"
> 
> 
> # intamap object for which simulation is needed:
> meuse$value = meuse$zinc
> obj = createIntamapObject(
+ 	observations = meuse,
+ 	predictionLocations = meuse.grid[sample(1:length(meuse.grid),5),],
+ 	params = list(ngrid = 16),
+   class = "transGaussian"  # trans-Gaussian kriging method
+ )
[1] "createIntamapObject: formulaString is missing, using:  value~1"
> obj = estimateParameters(obj, lambda = 0)  # lambda is optional, lambda = 0 gives lognormal kriging
> obj = blockPredict(obj,block=c(100,100))  # blockPredict
> 
> 
> 
> cleanEx()

detaching ‘package:rgdal’

> nameEx("coarsenGrid")
> ### * coarsenGrid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coarsenGrid
> ### Title: Coarsening of a spatial grid
> ### Aliases: coarsenGrid
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> newMeuseGrid = coarsenGrid(meuse.grid,coarse=2,offset=c(1,1))
> 
> 
> 
> 
> cleanEx()
> nameEx("conformProjections")
> ### * conformProjections
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conformProjections
> ### Title: Getting conformed projections
> ### Aliases: conformProjections
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse)
> coordinates(meuse) = ~x+y
> proj4string(meuse) <- CRS("+proj=stere +lat_0=52.15616055555555 
+     +lon_0=5.38763888888889 +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel +units=m")
> 
> predictionLocations = spsample(meuse, 50, "regular")
> 
> krigingObject = createIntamapObject(
+ 	observations = meuse,
+ 	predictionLocations = predictionLocations,
+   formulaString = as.formula("log(zinc)~1"),
+   intCRS = "+init=epsg:3035"
+ 	)
> 
> krigingObject = conformProjections(krigingObject)
> proj4string(meuse)
[1] "+proj=stere +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel +units=m"
> proj4string(krigingObject$observations)
[1] "+init=epsg:3035 +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
> 
> 
> 
> cleanEx()
> nameEx("copulaEstimation")
> ### * copulaEstimation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copulaEstimation
> ### Title: ML-estimation of the spatial copula model parameters
> ### Aliases: copulaEstimation
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(intamapExampleObject)
> ## estimate parameters for the copula model
> 
> ## Not run: 
> ##D copula<-list(method="norm")
> ##D anisotropy <- list(lower = c(0, 1), upper = c(pi, Inf), params = c(pi/3, 2))
> ##D correlation <- list(model = "Ste", lower = c(0.01, 0.01, 0.01), upper = c(0.99, Inf, 20), 
> ##D                     params = c(0.05, 4, 3))
> ##D margin <- list(name = "gev", lower = c(0.01, -Inf), upper = c(Inf, Inf), params = c(30, 0.5))
> ##D trend <- list(F = as.matrix(rep(1, 196)), lower = -Inf, upper = Inf, params = 40)
> ##D estimates <- copulaEstimation(intamapExampleObject, margin, trend, correlation, anisotropy, copula)
> ##D ## make predictions at unobserved locations
> ##D predictions <- bayescopula(intamapExampleObject, estimates, search = 25,
> ##D                calc = list(mean = TRUE, variance = TRUE, excprob = 40, quantile = 0.95))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createIntamapObject")
> ### * createIntamapObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createIntamapObject
> ### Title: Create an object for interpolation within the intamap package
> ### Aliases: createIntamapObject
> ### Keywords: spatial
> 
> ### ** Examples
> 
> # set up data:
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = log(meuse$zinc)
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> proj4string(meuse) = CRS("+init=epsg:28992")
> proj4string(meuse.grid) = CRS("+init=epsg:28992")
> 
> # set up intamap object:
> idwObject = createIntamapObject(
+ 	observations = meuse,
+ 	predictionLocations = meuse.grid,
+ 	targetCRS = "+init=epsg:3035",
+ 	class = "idw"
+ )
[1] "createIntamapObject: formulaString is missing, using:  value~1"
> 
> 
> 
> cleanEx()
> nameEx("estimateAnisotropy")
> ### * estimateAnisotropy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimateAnisotropy
> ### Title: estimateAnisotropy
> ### Aliases: estimateAnisotropy
> ### Keywords: spatial nonparametric htest
> 
> ### ** Examples
> 
>     library(gstat)
>     data(sic2004)
>     coordinates(sic.val)=~x+y
>     sic.val$value=sic.val$dayx
> 
>     params=NULL
>     
>     estimateAnisotropy(sic.val,depVar = "joker")
$ratio
[1] 1.350924

$direction
[1] 25.93149

$Q
              Q11         Q22           Q12
[1,] 9.948346e-06 1.43261e-05 -2.787868e-06

$doRotation
[1] TRUE

> 
> 
> 
> 
> cleanEx()

detaching ‘package:gstat’

> nameEx("estimateParameters")
> ### * estimateParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimateParameters
> ### Title: Automatic estimation of correlation structure parameters
> ### Aliases: estimateParameters estimateParameters.automap
> ###   estimateParameters.copula estimateParameters.default
> ###   estimateParameters.idw estimateParameters.linearVariogram
> ###   estimateParameters.transGaussian estimateParameters.yamamoto
> ### Keywords: spatial
> 
> ### ** Examples
> 
> set.seed(13131)
> 
> # set up data:
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = log(meuse$zinc)
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> proj4string(meuse) = CRS("+init=epsg:28992")
> proj4string(meuse.grid) = CRS("+init=epsg:28992")
> 
> # set up intamap object:
> idwObject = createIntamapObject(
+ 	observations = meuse,
+ 	formulaString=as.formula(zinc~1),
+   predictionLocations = meuse.grid,
+ 	class = "idw"
+ )
> 
> # run test:
> checkSetup(idwObject)
Checking object ... OK
> 
> # do interpolation steps:
> idwObject = estimateParameters(idwObject, idpRange = seq(0.25,2.75,.25),
+                                nfold=3) # faster
[1] "best idp value found is 2.5 rmse 265.924618013951"
> idwObject$inverseDistancePower
[1] 2.5
> 
> 
> 
> cleanEx()
> nameEx("generateTimeModels")
> ### * generateTimeModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateTimeModels
> ### Title: Generate time models
> ### Aliases: generateTimeModels
> ### Keywords: spatial
> 
> ### ** Examples
> 
> ## Not run: 
> ##D timeModels=generateTimeModels()
> ##D q("yes")
> ##D ## restart R in the same directory
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getIntamapParams")
> ### * getIntamapParams
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getIntamapParams
> ### Title: Setting parameters for the intamap package
> ### Aliases: getIntamapParams
> ### Keywords: spatial
> 
> ### ** Examples
> 
> # Create a new set of intamapParameters, with default parameters:
> params = getIntamapParams()
> # Make modifications to the default list of parameters
> params = getIntamapParams(newPar=list(removeBias = "local",
+               secondParameter = "second"))
> # Make modifications to an existing list of parameters
> params = getIntamapParams(oldPar = params,newPar = list(predictType = list(exc=TRUE)))
> 
> 
> 
> 
> cleanEx()
> nameEx("getInterpolationMethodNames")
> ### * getInterpolationMethodNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getInterpolationMethodNames
> ### Title: get interpolation method names
> ### Aliases: getInterpolationMethodNames
> ### Keywords: spatial
> 
> ### ** Examples
> 
> getInterpolationMethodNames()
[1] "interpolate"      "interpolateBlock" "test"            
> 
> 
> 
> cleanEx()
> nameEx("intamapExampleObject")
> ### * intamapExampleObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intamapExampleObject
> ### Title: Simulated Intamap Object
> ### Aliases: intamapExampleObject
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(intamapExampleObject)
> ##D ## estimate parameters for the copula model
> ##D intamapExampleObject<-estimateParameters(intamapExampleObject)
> ##D ## make predictions at unobserved locations
> ##D intamapExampleObject<-spatialCopula(intamapExampleObject)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("interpolate")
> ### * interpolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolate
> ### Title: spatial interpolation
> ### Aliases: interpolate interpolateBlock
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = meuse$zinc
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> x = interpolate(meuse, meuse.grid, list(mean=TRUE, variance=TRUE))
R 2017-08-15 14:00:02 interpolating 155 observations, 3103 prediction locations
Warning in predictTime(nObs = dim(observations)[1], nPred = nPred, formulaString = formulaString,  :
  
 using standard model for estimating time. For better 
 platform spesific predictions, please run 
 timeModels <- generateTimeModels()
  and save the workspace
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 2.4565 0.37136 0
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 3.5938
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  0
[1] "estimated time for  copula 130.462323594719"
Checking object ... OK
> summary(t(x$outputTable))
       x                y               mean           variance     
 Min.   :178460   Min.   :329620   Min.   : 129.4   Min.   :  3562  
 1st Qu.:179420   1st Qu.:330460   1st Qu.: 215.1   1st Qu.: 11294  
 Median :179980   Median :331220   Median : 283.2   Median : 16730  
 Mean   :179985   Mean   :331348   Mean   : 385.8   Mean   : 19829  
 3rd Qu.:180580   3rd Qu.:332140   3rd Qu.: 506.1   3rd Qu.: 23481  
 Max.   :181540   Max.   :333740   Max.   :1854.2   Max.   :110882  
> 
> 
> 
> cleanEx()
> nameEx("methodParameters")
> ### * methodParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methodParameters
> ### Title: generate string for generation of method parameters
> ### Aliases: methodParameters methodParameters.default
> ###   methodParameters.copula methodParameters.idw
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = log(meuse$zinc)
> # set up intamap object:
> krigingObject = createIntamapObject(
+ 		observations = meuse,
+ 		formulaString = as.formula('value~1'),class = "automap")
Warning in createIntamapObject(observations = meuse, formulaString = as.formula("value~1"),  :
  createIntamapObject: No prediction locations submitted - sampling from bbox of observations
> # do estimation steps:
> krigingObject = estimateParameters(krigingObject)
> krigingObject = methodParameters(krigingObject)
> 
> # Create a new object
> krigingObject2 = createIntamapObject(observations = meuse,
+ 		formulaString = as.formula('value~1'),
+     params = list(methodParameters = krigingObject$methodParameters))
Warning in createIntamapObject(observations = meuse, formulaString = as.formula("value~1"),  :
  createIntamapObject: No prediction locations submitted - sampling from bbox of observations
> 
> krigingObject$variogramModel
  model      psill    range     ang1     anis1
1   Nug 0.04244268    0.000  0.00000 1.0000000
2   Sph 0.60542461 1245.604 34.19693 0.6681465
> krigingObject2$variogramModel
  model      psill    range     ang1     anis1
1   Nug 0.04244268    0.000  0.00000 1.0000000
2   Sph 0.60542461 1245.604 34.19693 0.6681465
> 
> 
> 
> 
> cleanEx()
> nameEx("plotIntamap")
> ### * plotIntamap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotIntamap
> ### Title: plot intamap objects
> ### Aliases: plotIntamap plot.default plot.copula plot.idw plot.automap
> ###   plot.linearVariogram plot.transGaussian plot.yamamoto
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse)
> meuse$value = log(meuse$zinc)
> data(meuse.grid)
> coordinates(meuse) = ~x+y
> coordinates(meuse.grid) = ~x+y
> object = interpolate(meuse, meuse.grid, 
+                      outputWhat = list(mean = TRUE, variance = TRUE, 
+                      excprob = 7, excprob = 8, quantile = 0.9, quantile = 0.95),
+                      methodName = "automap")
R 2017-08-15 14:00:05 interpolating 155 observations, 3103 prediction locations
Warning in predictTime(nObs = dim(observations)[1], nPred = dim(coordinates(predictionLocations))[1],  :
  
 using standard model for estimating time. For better 
 platform spesific predictions, please run 
 timeModels <- generateTimeModels()
  and save the workspace
Checking object ... OK
> plot(object)
> 
> 
> 
> cleanEx()
> nameEx("rotateAnisotropicData")
> ### * rotateAnisotropicData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rotateAnisotropicData
> ### Title: rotateAnisotropicData
> ### Aliases: rotateAnisotropicData
> ### Keywords: spatial
> 
> ### ** Examples
> 
> 
>     library(gstat)
>     data(sic2004)
>     coordinates(sic.val)=~x+y
>     sic.val$value=sic.val$dayx
> 
>     anisPar <- estimateAnisotropy(sic.val)
>     print(anisPar)  
$ratio
[1] 1.152605

$direction
[1] -46.95403

$Q
              Q11         Q22          Q12
[1,] 1.322347e-07 1.29716e-07 1.843472e-08

$doRotation
[1] TRUE

> 
>     rotatedObs <- rotateAnisotropicData(sic.val,anisPar)
> 
>     newAnisPar <- estimateAnisotropy(rotatedObs)
>     print(newAnisPar)  
$ratio
[1] 1.057964

$direction
[1] -76.50547

$Q
              Q11          Q22          Q12
[1,] 5.968051e-08 5.397968e-08 1.451674e-09

$doRotation
[1] FALSE

> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:gstat’

> nameEx("spatialPredict")
> ### * spatialPredict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spatialPredict
> ### Title: Spatial prediction
> ### Aliases: spatialPredict spatialPredict.automap spatialPredict.copula
> ###   spatialPredict.default spatialPredict.idw
> ###   spatialPredict.linearVariogram spatialPredict.transGaussian
> ###   spatialPredict.yamamoto
> ### Keywords: spatial
> 
> ### ** Examples
> 
> # This example skips some steps that might be necessary for more complicated
> # tasks, such as estimateParameters and pre- and postProcessing of the data
> data(meuse)
> coordinates(meuse) = ~x+y
> meuse$value = log(meuse$zinc)
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> proj4string(meuse) = CRS("+init=epsg:28992")
> proj4string(meuse.grid) = CRS("+init=epsg:28992")
> 
> # set up intamap object:
> obj = createIntamapObject(
+ 	observations = meuse,
+ 	predictionLocations = meuse.grid,
+ 	targetCRS = "+init=epsg:3035",
+ 	params = getIntamapParams(),
+ 	class = "linearVariogram"
+ )
[1] "createIntamapObject: formulaString is missing, using:  value~1"
> 
> # do interpolation step:
> obj = spatialPredict(obj)  # spatialPredict.linearVariogram
> 
> 
> 
> cleanEx()
> nameEx("unbiasedKrige")
> ### * unbiasedKrige
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unbiasedKrige
> ### Title: Unbiased kriging
> ### Aliases: unbiasedKrige
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library(automap)
> library(gstat)
> data(meuse)
> data(meuse.grid)
> coordinates(meuse) = ~x+y
> gridded(meuse.grid) = ~x+y
> 
> predictionLocations = meuse.grid[sample(1:length(meuse.grid),50),]
> vmod = autofitVariogram(log(zinc)~1,meuse)$var_model
> prediction = krige(log(zinc)~1,meuse,predictionLocations,vmod)
[using ordinary kriging]
> summary(prediction)
Object of class SpatialPixelsDataFrame
Coordinates:
     min    max
x 178540 181340
y 329700 333500
Is projected: NA 
proj4string : [NA]
Number of points: 50
Grid attributes:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
Data attributes:
   var1.pred        var1.var     
 Min.   :4.923   Min.   :0.1043  
 1st Qu.:5.370   1st Qu.:0.1347  
 Median :5.784   Median :0.1518  
 Mean   :5.771   Mean   :0.1722  
 3rd Qu.:6.096   3rd Qu.:0.1957  
 Max.   :6.867   Max.   :0.4317  
> 
> prediction <- unbiasedKrige(prediction,log(zinc)~1,
+   meuse,  model = vmod, outputWhat = list(MOK = 6.0, MOK = 7.0, IWQSEL=7.0), 
+   iwqmaxit = 100, iwqCpAddLim = 0.01)
drawing 100 GLS realisations of beta...
[using conditional Gaussian simulation]
[1] "Finished simulations"
111111111111111> summary(prediction)
Object of class SpatialPixelsDataFrame
Coordinates:
     min    max
x 178540 181340
y 329700 333500
Is projected: NA 
proj4string : [NA]
Number of points: 50
Grid attributes:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
Data attributes:
   var1.pred        var1.var         IWQSEL7           MOK6      
 Min.   :4.923   Min.   :0.1043   Min.   :5.664   Min.   :4.999  
 1st Qu.:5.370   1st Qu.:0.1347   1st Qu.:6.120   1st Qu.:5.446  
 Median :5.784   Median :0.1518   Median :6.433   Median :5.860  
 Mean   :5.771   Mean   :0.1722   Mean   :6.401   Mean   :5.847  
 3rd Qu.:6.096   3rd Qu.:0.1957   3rd Qu.:6.602   3rd Qu.:6.172  
 Max.   :6.867   Max.   :0.4317   Max.   :7.058   Max.   :6.942  
      MOK7      
 Min.   :5.305  
 1st Qu.:5.752  
 Median :6.166  
 Mean   :6.153  
 3rd Qu.:6.478  
 Max.   :7.249  
> 
> 
> 
> cleanEx()

detaching ‘package:gstat’, ‘package:automap’

> nameEx("yamamotoKrige")
> ### * yamamotoKrige
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: yamamotoKrige
> ### Title: kriging and simulation with alternative kriging variance
> ### Aliases: yamamotoKrige
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library(gstat)
> library(automap)
> data(sic2004)
> coordinates(sic.val) = ~x+y
> coordinates(sic.test) = ~x+y
> variogramModel = autofitVariogram(joker~1,sic.val)$var_model
> newData = yamamotoKrige(joker~1,sic.val,sic.test,variogramModel,nmax = 20)
> summary(newData)
Object of class SpatialPointsDataFrame
Coordinates:
     min    max
x -81420 274843
y -54166 648972
Is projected: NA 
proj4string : [NA]
Number of points: 808
Data attributes:
   var1.pred         var1.ok         var1.var       
 Min.   : 68.03   Min.   : 6590   Min.   :     7.0  
 1st Qu.: 86.79   1st Qu.:18880   1st Qu.:    86.8  
 Median :101.54   Median :20603   Median :   153.5  
 Mean   :113.08   Mean   :19683   Mean   : 16765.6  
 3rd Qu.:113.23   3rd Qu.:21405   3rd Qu.:   267.2  
 Max.   :606.71   Max.   :21755   Max.   :434389.0  
> plot(sqrt(var1.ok)~var1.pred,newData) 
> # Kriging variance the same in regions with extreme values
> plot(sqrt(var1.var)~var1.pred,newData) 
> # Kriging standard deviation higher for high predictions (close to extreme values)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  23.14 2.212 23.559 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
