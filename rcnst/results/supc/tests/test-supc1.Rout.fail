
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(supc)
> set.seed(1)
> mu <- list(
+   x = c(0, 2, 1, 6, 8, 7, 3, 5, 4),
+   y = c(0, 0, 1, 0, 0, 1, 3, 3, 4)
+ )
> X <- lapply(1:3, function(i) {
+   cbind(rnorm(9, mu$x, 1/5), rnorm(9, mu$y, 1/5))
+ })
> X <- do.call(rbind, X)
> # parameters <- list(tau = 0.9, t = function() {0.75})
> dist.mode("stats")
> X.supc <- supc1(X, r = 0.9, t = 0.75)
> 
> X.supc.ref <- structure(list(cluster = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 
+ 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 
+ 8L, 9L), centers = structure(c(-0.0180254152322607, 2.046727139439, 
+ 1.08716939783766, 6.20911417627993, 8.0147761104807, 6.79821207689788, 
+ 3.1200608974441, 5.08556992438004, 3.97988236811187, -0.162390279741713, 
+ 0.0922984238508252, 1.10583358958467, 0.0381059301321746, -0.0860889759850034, 
+ 1.12872658834518, 2.95353852156743, 2.93593224005029, 3.95578772830951
+ ), .Dim = c(9L, 2L), .Dimnames = list(c("1", "2", "3", "4", "5", 
+ "6", "7", "8", "9"), NULL)), size = structure(c(3L, 3L, 3L, 3L, 
+ 3L, 3L, 3L, 3L, 3L), .Dim = 9L, .Dimnames = structure(list(cl = c("1", 
+ "2", "3", "4", "5", "6", "7", "8", "9")), .Names = "cl"), class = "table")), .Names = c("cluster", 
+ "centers", "size"))
> 
> ref.check.name <- c("cluster", "centers", "size")
> stopifnot(isTRUE(all.equal(X.supc[ref.check.name], X.supc.ref)))
> X.supc <- supc1(X, r = 0.9, t = 0.75, implementation = "cpp")
> print(X.supc)
$x
             [,1]        [,2]
 [1,] -0.12529076 -0.06107768
 [2,]  2.03672866  0.30235623
 [3,]  0.83287428  1.07796865
 [4,]  6.31905616 -0.12424812
 [5,]  8.06590155 -0.44293998
 [6,]  6.83590632  1.22498618
 [7,]  3.09748581  2.99101328
 [8,]  5.14766494  2.99676195
 [9,]  4.11515627  4.18876724
[10,]  0.16424424 -0.29415048
[11,]  2.11878026 -0.09563001
[12,]  1.18379547  1.08358831
[13,]  6.15642726  0.27173591
[14,]  8.01491300 -0.02055755
[15,]  6.60212966  1.07753432
[16,]  3.12396515  2.98923899
[17,]  4.98877425  2.72458809
[18,]  3.96884090  3.91700109
[19,] -0.07885799 -0.14149903
[20,]  1.98813732  0.07291639
[21,]  1.22000507  1.15370658
[22,]  6.15263515 -0.02246924
[23,]  7.96709528  0.17622155
[24,]  6.94932766  1.07962118
[25,]  3.13939268  2.87759472
[26,]  5.11133264  3.06822394
[27,]  3.86224886  3.77412738

$d0
            1          2          3          4          5          6          7
2  2.19235312                                                                  
3  1.48845785 1.43207542                                                       
4  6.44465653 4.30352414 5.61636153                                            
5  8.20008844 6.07506314 7.39120062 1.77567827                                 
6  7.07899888 4.88705967 6.00483205 1.44484161 2.07240584                      
7  4.43864259 2.89034296 2.96449071 4.48144721 6.03963492 4.13456644           
8  6.09544461 4.11554938 4.72220141 3.33359584 4.51083742 2.44731451 2.05018719
9  6.00354669 4.40727261 4.52221660 4.84347770 6.08778285 4.02324235 1.57170854
10 0.37168999 1.96520182 1.52636071 6.15715654 7.90305806 6.84243021 4.40411251
11 2.24433701 0.40635639 1.74094458 4.20037339 5.95725405 4.89850032 3.23809069
12 1.73895572 1.15664108 0.35096619 5.27539299 7.04937392 5.65387924 2.70194017
13 6.29052829 4.11981239 5.38425738 0.42807886 2.03883636 1.17063140 4.09287090
14 8.14030461 5.98689913 7.26556536 1.69902388 0.42544888 1.71506149 5.76633757
15 6.82309481 4.63074371 5.76925540 1.23467066 2.11056160 0.27639388 3.99298513
16 4.45669112 2.89852068 2.98363063 4.46121156 6.01685864 4.10987777 0.02653872
17 5.82353799 3.81860974 4.47021925 3.14412431 4.41610082 2.37922314 1.90996187
18 5.70850460 4.09862356 4.23017634 4.67495528 5.98289162 3.93281177 1.27150034
19 0.09286332 2.16164622 1.52261523 6.39793741 8.15033586 7.04849256 4.46114260
20 2.11767152 0.23452880 1.53126181 4.33540446 6.09961686 4.98278327 3.12184937
21 1.81260081 1.17976050 0.39446988 5.25675662 7.02962153 5.61635359 2.62690498
22 6.27804463 4.12870413 5.43238615 0.19507663 1.95892419 1.42232364 4.29127188
23 8.09586455 5.93170786 7.19098444 1.67520595 0.62699575 1.54256142 5.62460211
24 7.16599049 4.97370784 6.11645361 1.35887580 1.88810215 0.18437838 4.30001226
25 4.39248829 2.80137844 2.92552237 4.37279319 5.94108075 4.04911449 0.12091300
26 6.10038960 4.13560319 4.71872039 3.41327906 4.58887236 2.52421865 2.01532641
27 5.53256451 3.92246337 4.05541395 4.60795330 5.95435581 3.91672817 1.09459135
            8          9         10         11         12         13         14
2                                                                              
3                                                                              
4                                                                              
5                                                                              
6                                                                              
7                                                                              
8                                                                              
9  1.57700690                                                                  
10 5.97198346 5.97547129                                                       
11 4.32862916 4.72668774 1.96459193                                            
12 4.40141960 4.27024734 1.71395709 1.50490944                                 
13 2.90574746 4.41700370 6.01884414 4.05432497 5.03846913                      
14 4.16237052 5.73816327 7.85543462 5.89661064 6.91977635 1.88133057           
15 2.40809101 3.98306502 6.58239226 4.63429999 5.41833757 0.92084836 1.78934695
16 2.02371377 1.55606165 4.42047444 3.24450511 2.71951519 4.07193436 5.74284303
17 0.31515847 1.70500116 5.69112224 4.02374150 4.14375962 2.71659665 4.08574843
18 1.49548193 0.30865034 5.67527561 4.41858944 3.97299710 4.25129302 5.64580087
19 6.09632873 6.02834651 0.28705602 2.19811689 1.75929894 6.24896354 8.09467452
20 4.30482144 4.63297289 1.86046340 0.21324978 1.29167470 4.17302890 6.02750051
21 4.33859022 4.19445987 1.79190430 1.53903826 0.07891582 5.01459233 6.89562687
22 3.18209398 4.67822968 5.99455056 4.03451828 5.09045489 0.29422959 1.86227883
23 3.98806163 5.56218996 7.81701568 5.85462995 6.84371761 1.81318550 0.20250567
24 2.63085866 4.20705559 6.92275997 4.97145889 5.76553355 1.13197599 1.53162179
25 2.01180474 1.63440753 4.34873267 3.14351952 2.65383108 3.98660229 5.67185904
26 0.08016765 1.49932807 5.98157549 4.35492153 4.40049165 2.98539245 4.23926290
27 1.50219557 0.48568341 5.49782893 4.24437334 3.79646059 4.18688435 5.62532249
           15         16         17         18         19         20         21
2                                                                              
3                                                                              
4                                                                              
5                                                                              
6                                                                              
7                                                                              
8                                                                              
9                                                                              
10                                                                             
11                                                                             
12                                                                             
13                                                                             
14                                                                             
15                                                                             
16 3.96890956                                                                  
17 2.30558057 1.88349491                                                       
18 3.87256778 1.25481375 1.56911211                                            
19 6.79129136 4.47879411 5.82197148 5.73195338                                 
20 4.72209514 3.12970324 4.00439568 4.32436976 2.07808652                      
21 5.38266359 2.64466315 4.08304908 3.89767814 1.83428538 1.32594668           
22 1.18829843 4.27120925 2.98343697 4.50426285 6.23262985 4.16559006 5.07091994
23 1.63569431 5.60080143 3.91976634 5.47535110 8.05222394 5.97985035 6.81752912
24 0.34720427 4.27551618 2.55923540 4.11509734 7.13347939 5.06229831 5.72980157
25 3.90266126 0.11270515 1.85570020 1.32979320 4.41271622 3.03176672 2.57989129
26 2.48703054 1.98893644 0.36483716 1.42327440 6.10249132 4.32737984 4.33679685
27 3.84428939 1.07754936 1.53967275 0.17825476 5.55557859 4.14864518 3.72129781
           22         23         24         25         26
2                                                        
3                                                        
4                                                        
5                                                        
6                                                        
7                                                        
8                                                        
9                                                        
10                                                       
11                                                       
12                                                       
13                                                       
14                                                       
15                                                       
16                                                       
17                                                       
18                                                       
19                                                       
20                                                       
21                                                       
22                                                       
23 1.82530644                                            
24 1.35989788 1.36087539                                 
25 4.18210488 5.53209992 4.21287473                      
26 3.26139468 4.06436442 2.70790817 1.98113269           
27 4.43396158 5.45845129 4.09761140 1.15164746 1.43475083

$r
[1] 0.9

$t
function (t) 
{
    .t
}
<bytecode: 0x55948efe8af8>
<environment: 0x55948f1d97a8>

$cluster
 [1] 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9

$centers
         [,1]        [,2]
1 -0.01802542 -0.16239028
2  2.04672714  0.09229842
3  1.08716940  1.10583359
4  6.20911418  0.03810593
5  8.01477611 -0.08608898
6  6.79821208  1.12872659
7  3.12006090  2.95353852
8  5.08556992  2.93593224
9  3.97988237  3.95578773

$size
cl
1 2 3 4 5 6 7 8 9 
3 3 3 3 3 3 3 3 3 

attr(,"class")
[1] "supc"
attr(,"iteration")
[1] 4
> stopifnot(isTRUE(all.equal(X.supc[ref.check.name], X.supc.ref)))
> 
> X.supc <- supc1(X, r = c(0.9, 0.9), t = c(0.75, 0.75))
> stopifnot(isTRUE(all.equal(lapply(X.supc, function(.) .[ref.check.name]), rep(list(X.supc.ref), 2))))
> stopifnot(isTRUE(all.equal(
+   supc1(X, r = quantile(dist(X), 0.85), t = 0.75),
+   supc1(X, rp = 0.85, t = 0.75)
+ )))
> 
> list.check.names <- c("x", "d0", "r", "cluster", "centers", "size")
> stopifnot(isTRUE(all.equal(
+   lapply(supc1(X, r =quantile(dist(X), seq(0.1, 0.5, by = 0.1)), t = quantile(dist(X), seq(0.1, 0.5, by = 0.1)) / 5), function(obj) {
+     obj[list.check.names]
+   }),
+   lapply(supc1(X, rp = seq(0.1, 0.5, by = 0.1), t = "static"), function(obj) {
+     obj[list.check.names]
+   })
+ )))
> 
> stopifnot(isTRUE(all.equal(
+   lapply(supc1(X, r =quantile(dist(X), seq(0.1, 0.5, by = 0.1)), t = lapply(quantile(dist(X), seq(0.1, 0.5, by = 0.1)), function(.r) {
+     force(.r)
+     function(t) .r / 20 + (.r / 50) * t
+   })), function(obj) obj[list.check.names]),
+   lapply(supc1(X, rp = seq(0.1, 0.5, by = 0.1), t = "dynamic"), "[", list.check.names)
+ )))
> 
> stopifnot(!isTRUE(all.equal(
+   supc1(X, r = 0.9, t = "dynamic"),
+   supc1(X, r = 0.9, t = "static")
+ )))
> 
> dist.mode("amap")
> X.supc <- supc1(X, r = 0.9, t = 0.75)
> stopifnot(isTRUE(all.equal(X.supc[ref.check.name], X.supc.ref)))
> 
> if (require(gputools)) {
+   dist.mode("gputools")
+   X.supc <- supc1(X, r = 0.9, t = 0.75)
+   stopifnot(isTRUE(all.equal(X.supc[ref.check.name], X.supc.ref)))
+ }
Loading required package: gputools
Error in gputools::gpuDist(x, method = "euclidean", p = 2) : 
  unknown error
Calls: supc1 -> .get.parameters -> .dist -> <Anonymous>
In addition: Warning message:
In gputools::gpuDist(x, method = "euclidean", p = 2) :
  distance function : malloc and memcpy
Execution halted
