
R Under development (unstable) (2019-06-25 r76738) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RxODE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RxODE')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RxODE")
> ### * RxODE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RxODE
> ### Title: Create an ODE-based model specification
> ### Aliases: RxODE
> ### Keywords: models nonlinear
> 
> ### ** Examples
> 
> # Step 1 - Create a model specification
> ode <- "
+    # A 4-compartment model, 3 PK and a PD (effect) compartment
+    # (notice state variable names 'depot', 'centr', 'peri', 'eff')
+ 
+    C2 = centr/V2;
+    C3 = peri/V3;
+    d/dt(depot) =-KA*depot;
+    d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+    d/dt(peri)  =                    Q*C2 - Q*C3;
+    d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ "
> 
> m1 <- RxODE(model = ode)
> print(m1)
RxODE 0.9.0-8 model named rx_2febf9950a244e4ed2b1b859acfd9ae6 model (✔ ready). 
m1$state: depot, centr, peri, eff
m1$params: V2, V3, KA, CL, Q, Kin, Kout, EC50
m1$lhs: C2, C3
> 
> # Step 2 - Create the model input as an EventTable,
> # including dosing and observation (sampling) events
> 
> # QD (once daily) dosing for 5 days.
> 
> qd <- eventTable(amount.units = "ug", time.units = "hours")
> qd$add.dosing(dose = 10000, nbr.doses = 5, dosing.interval = 24)
> 
> # Sample the system hourly during the first day, every 8 hours
> # then after
> 
> qd$add.sampling(0:24)
> qd$add.sampling(seq(from = 24+8, to = 5*24, by = 8))
> 
> # Step 3 - set starting parameter estimates and initial
> # values of the state
> 
> theta <-
+     c(KA = .291, CL = 18.6,
+       V2 = 40.2, Q = 10.5, V3 = 297.0,
+       Kin = 1.0, Kout = 1.0, EC50 = 200.0)
> 
> # init state variable
> inits <- c(0, 0, 0, 1);
> 
> # Step 4 - Fit the model to the data
> 
> qd.cp <- m1$solve(theta, events = qd, inits)
Warning in rxSolve_(object, .ctl, .nms, .xtra, params, events, inits, setupOnly = .setupOnly) :
  Assumed order of inputs: depot, centr, peri, eff
> 
> head(qd.cp)
     time       C2        C3     depot    centr      peri      eff
[1,]    0  0.00000 0.0000000 10000.000    0.000    0.0000 1.000000
[2,]    1 43.99334 0.9113641  7475.157 1768.532  270.6751 1.083968
[3,]    2 54.50866 2.6510696  5587.797 2191.248  787.3677 1.179529
[4,]    3 51.65163 4.4243597  4176.966 2076.396 1314.0348 1.227523
[5,]    4 44.37513 5.9432612  3122.347 1783.880 1765.1486 1.233503
[6,]    5 36.46382 7.1389804  2334.004 1465.845 2120.2772 1.214084
> 
> # This returns a matrix.  Note that you can also
> # solve using name initial values. For example:
> 
> inits <- c(eff = 1);
> 
> qd.cp <- solve(m1, theta, events = qd, inits);
> 
> print(qd.cp)
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ Solved RxODE object ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ 
── Parameters (qd.cp$params): ────────────────────────────────────────────────── 
     V2      V3      KA      CL       Q     Kin    Kout    EC50 
 40.200 297.000   0.291  18.600  10.500   1.000   1.000 200.000 
── Initial Conditions (qd.cp$inits): ─────────────────────────────────────────── 
depot centr  peri   eff 
    0     0     0     1 
── First part of data (object): ──────────────────────────────────────────────── 
# A tibble: 37 x 7
   time    C2    C3  depot centr  peri   eff
    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>
1     0   0   0     10000     0     0   1   
2     1  44.0 0.911  7475. 1769.  271.  1.08
3     2  54.5 2.65   5588. 2191.  787.  1.18
4     3  51.7 4.42   4177. 2076. 1314.  1.23
5     4  44.4 5.94   3122. 1784. 1765.  1.23
6     5  36.5 7.14   2334. 1466. 2120.  1.21
# … with 31 more rows
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
> 
> plot(qd.cp)
> 
> 
> 
> 
> cleanEx()
> nameEx("add.dosing")
> ### * add.dosing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add.dosing
> ### Title: Add dosing to eventTable
> ### Aliases: add.dosing
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("add.sampling")
> ### * add.sampling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add.sampling
> ### Title: Add sampling to eventTable
> ### Aliases: add.sampling
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("cvPost")
> ### * cvPost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cvPost
> ### Title: Sample a covariance Matrix from the Posteior Inverse Wishart
> ###   distribution.
> ### Aliases: cvPost
> 
> ### ** Examples
> 
> 
> ## Sample a single covariance.
> draw1 <- cvPost(3, matrix(c(1,.3,.3,1),2,2))
> 
> ## Sample 3 covariances
> set.seed(42)
> draw3 <- cvPost(3, matrix(c(1,.3,.3,1),2,2), n=3)
> 
> ## Sample 3 covariances, but return the cholesky decomposition
> set.seed(42)
> draw3c <- cvPost(3, matrix(c(1,.3,.3,1),2,2), n=3, returnChol=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("et")
> ### * et
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: et
> ### Title: Event Table Function
> ### Aliases: et et.RxODE et.rxSolve et.rxParams et.default
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("etRbind")
> ### * etRbind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: etRbind
> ### Title: Combining event tables
> ### Aliases: etRbind rbind.rxEt
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("etRep")
> ### * etRep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: etRep
> ### Title: Repeat an RxODE event table
> ### Aliases: etRep rep.rxEt
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("etSeq")
> ### * etSeq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: etSeq
> ### Title: Sequence of event tables
> ### Aliases: etSeq seq.rxEt
> 
> ### ** Examples
> 
> 
> ## Model from RxODE tutorial
> mod1 <-RxODE({
+     KA=2.94E-01;
+     CL=1.86E+01;
+     V2=4.02E+01;
+     Q=1.05E+01;
+     V3=2.97E+02;
+     Kin=1;
+     Kout=1;
+     EC50=200;
+     C2 = centr/V2;
+     C3 = peri/V3;
+     d/dt(depot) =-KA*depot;
+     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;
+     d/dt(peri)  =                    Q*C2 - Q*C3;
+     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;
+ });
> 
> ## These are making the more complex regimens of the RxODE tutorial
> 
> ## bid for 5 days
> bid <- et(timeUnits="hr") %>%
+        et(amt=10000,ii=12,until=set_units(5, "days"))
> 
> ## qd for 5 days
> qd <- et(timeUnits="hr") %>%
+       et(amt=20000,ii=24,until=set_units(5, "days"))
> 
> ## bid for 5 days followed by qd for 5 days
> 
> et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));
> 
> bidQd <- rxSolve(mod1, et)
> 
> plot(bidQd, C2)
> 
> 
> ## Now Infusion for 5 days followed by oral for 5 days
> 
> ##  note you can dose to a named compartment instead of using the compartment number
> infusion <- et(timeUnits = "hr") %>%
+       et(amt=10000, rate=5000, ii=24, until=set_units(5, "days"), cmt="centr")
> 
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(5, "days"), cmt="depot")
> 
> et <- seq(infusion,qd)
> 
> infusionQd <- rxSolve(mod1, et)
> 
> plot(infusionQd, C2)
> 
> ## 2wk-on, 1wk-off
> 
> qd <- et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- seq(qd, set_units(1,"weeks"), qd) %>%
+      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))
> 
> wkOnOff <- rxSolve(mod1, et)
> 
> plot(wkOnOff, C2)
> 
> ## You can also repeat the cycle easily with the rep function
> 
> qd <-et(timeUnits = "hr") %>% et(amt=10000, ii=24, until=set_units(2, "weeks"), cmt="depot")
> 
> et <- etRep(qd, times=4, wait=set_units(1,"weeks")) %>%
+      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))
> 
> repCycle4 <- rxSolve(mod1, et)
> 
> plot(repCycle4, C2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("eventTable")
> ### * eventTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eventTable
> ### Title: Create an event table object
> ### Aliases: eventTable
> ### Keywords: data models
> 
> ### ** Examples
> 
> # create dosing and observation (sampling) events
> # QD 50mg dosing, 5 days followed by 25mg 5 days
> #
> qd <- eventTable(amount.units = "mg", time.units = "days")
> #
> qd$add.dosing(dose=50, nbr.doses=5, dosing.interval = 1, do.sampling=FALSE)
> #
> # sample the system's drug amounts hourly the first day, then every 12 hours
> # for the next 4 days
> qd$add.sampling(seq(from = 0, to = 1, by = 1/24))
> qd$add.sampling(seq(from = 1, to = 5, by = 12/24))
> #
> #print(qd$get.dosing())     # table of dosing records
> print(qd$get.nobs())   # number of observation (not dosing) records
[1] 34
> #
> # BID dosing, 5 days
> bid <- eventTable("mg", "days")  # only dosing
> bid$add.dosing(dose=10000, nbr.doses=2*5,
+                dosing.interval = 12, do.sampling=FALSE)
> #
> # Use the copy() method to create a copy (clone) of an existing
> # event table (simple assignments just create a new reference to
> # the same event table object (closure)).
> #
> bid.ext <- bid$copy()      # three-day extension for a 2nd cohort
> bid.ext$add.dosing(dose = 5000, nbr.doses = 2*3,
+                    start.time = 120, dosing.interval = 12, do.sampling = FALSE)
> 
> # You can also use the Piping operator to create a table
> 
> qd2 <- eventTable(amount.units="mg", time.units="days") %>%
+     add.dosing(dose=50, nbr.doses=5, dosing.interval=1, do.sampling=FALSE) %>%
+     add.sampling(seq(from=0, to=1, by=1 / 24)) %>%
+     add.sampling(seq(from=1, to=5, by=12 / 24))
> #print(qd2$get.dosing())     # table of dosing records
> print(qd2$get.nobs())   # number of observation (not dosing) records
[1] 34
> 
> # Note that piping with %>% will update the original table.
> 
> qd3 <- qd2 %>% add.sampling(seq(from=5, to=10, by=6 / 24))
> print(qd2$get.nobs())
[1] 34
> print(qd3$get.nobs())
[1] 55
> 
> 
> 
> 
> cleanEx()
> nameEx("genShinyApp.template")
> ### * genShinyApp.template
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: genShinyApp.template
> ### Title: Generate an example (template) of a dosing regimen shiny app
> ### Aliases: genShinyApp.template write.template.server write.template.ui
> ### Keywords: nonlinear simulation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # create the shiny app example (template)
> ##D genShinyApp.template(appDir = "myapp")
> ##D # run the shiny app
> ##D runApp("myapp")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rinvchisq")
> ### * rinvchisq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rinvchisq
> ### Title: Scaled Inverse Chi Squared distribution
> ### Aliases: rinvchisq
> 
> ### ** Examples
> 
> rinvchisq(3, 4, 1) ## Scale = 1, degrees of freedom = 4
[1] 2.4071299 0.5601054 0.5775055
> rinvchisq(2, 4, 2) ## Scale = 2, degrees of freedom = 4
[1] 1.950447 1.029493
> 
> 
> 
> cleanEx()
> nameEx("rxProgress")
> ### * rxProgress
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rxProgress
> ### Title: RxODE progress bar functions
> ### Aliases: rxProgress rxTick rxProgressStop rxProgressAbort
> 
> ### ** Examples
> 
> f <- function(){
+   on.exit({rxProgressAbort()});
+   rxProgress(100)
+     for (i in 1:100) {
+        rxTick()
+        Sys.sleep(1 / 100)
+     }
+   rxProgressStop();
+  }
> 
> ## Not run: 
> ##D f();
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  24.679 1.71 27.552 2.477 0.68 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
