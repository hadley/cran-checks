
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('sm')
Package 'sm', version 2.2-5.4: type help(sm) for summary information
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("binning")
> ### * binning
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binning
> ### Title: Construct frequency table from raw data
> ### Aliases: binning
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
> # example of 1-d use
> x  <- rnorm(1000)
> xb <- binning(x)
> xb <- binning(x, breaks=seq(-4,4,by=0.5))
> # example of 2-d use
> x <- rnorm(1000)
> y <- 2*x + 0.5*rnorm(1000)
> x <- cbind(x, y)
> xb<- binning(x, nbins=12)
> 
> 
> 
> cleanEx()
> nameEx("h.select")
> ### * h.select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: h.select
> ### Title: Selection of the smoothing parameter
> ### Aliases: h.select
> ### Keywords: nonparametric regression smooth
> 
> ### ** Examples
> 
> x <- rnorm(50)
> h.select(x)
[1] 0.4027176
> h.select(x, method = "sj")
[1] 0.3867385
> 
> x <- matrix(rnorm(100), ncol = 2)
> h.select(x)
[1] 0.5047600 0.4687649
> sm.density(x, method = "cv")
Loading required package: rgl
Warning in rgl.init(initValue, onlyNULL) :
  RGL: GLX extension missing on server
Warning: 'rgl_init' failed, running with rgl.useNULL = TRUE
Loading required package: rpanel
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘rpanel’
> 
> x <- rnorm(50)
> y <- x^2 + rnorm(50)
> h.select(x, y)
[1] 0.3346255
> sm.regression(x, y, method = "aicc")
> 
> x <- matrix(rnorm(100), ncol = 2)
> y <- x[,1]^2 + x[,2]^2 + rnorm(50)
> h.select(x, y, method = "cv", structure.2d = "common")
[1] 0.6691726 0.6691726
> sm.regression(x, y, df = 8)
> 
> 
> 
> cleanEx()

detaching ‘package:rgl’

> nameEx("hcv")
> ### * hcv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hcv
> ### Title: Cross-validatory choice of smoothing parameter
> ### Aliases: hcv
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> #  Density estimation
> 
> x <- rnorm(50)
> par(mfrow=c(1,2))
> h.cv <- hcv(x, display="lines", ngrid=32)
> sm.density(x, h=hcv(x))
> par(mfrow=c(1,1))
> 
> #  Nonparametric regression
> 
> x <- seq(0, 1, length = 50)
> y <- rnorm(50, sin(2 * pi * x), 0.2)
> par(mfrow=c(1,2))
> h.cv <- hcv(x, y, display="lines", ngrid=32)
> sm.regression(x, y, h=hcv(x, y))
> par(mfrow=c(1,1))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("hnorm")
> ### * hnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hnorm
> ### Title: Normal optimal choice of smoothing parameter in density
> ###   estimation
> ### Aliases: hnorm
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x <- rnorm(50)
> hnorm(x)
[1] 0.4027176
> 
> 
> 
> cleanEx()
> nameEx("hsj")
> ### * hsj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hsj
> ### Title: Sheather-Jones choice of smoothing parameter for density
> ###   estimation
> ### Aliases: hsj
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x <- rnorm(50)
> hsj(x)
[1] 0.3867385
> 
> 
> 
> cleanEx()
> nameEx("mosses")
> ### * mosses
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mosses
> ### Title: Heavy metals in mosses in Galicia.
> ### Aliases: mosses
> ### Keywords: smooth regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Comparison of Co in March and September
> ##D    
> ##D with(mosses, {
> ##D 	
> ##D    nbins <- 12
> ##D    vgm.m <- sm.variogram(loc.m, Co.m, nbins = nbins, original.scale = TRUE,
> ##D                         ylim = c(0, 1.5))
> ##D    vgm.s <- sm.variogram(loc.s, Co.s, nbins = nbins, original.scale = TRUE,
> ##D                         add = TRUE, col.points = "blue")
> ##D                         
> ##D    trns <- function(x) (x / 0.977741)^4
> ##D    del <- 1000
> ##D    plot(vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean), type = "b",
> ##D          ylim = c(0, 1.5), xlab = "Distance", ylab = "Semi-variogram")
> ##D    points(vgm.s$distance.mean - del, trns(vgm.s$sqrtdiff.mean), type = "b",
> ##D          col = "blue", pch = 2, lty = 2)
> ##D 
> ##D    plot(vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean), type = "b",
> ##D          ylim = c(0, 1.5), xlab = "Distance", ylab = "Semi-variogram")
> ##D    points(vgm.s$distance.mean - del, trns(vgm.s$sqrtdiff.mean), type = "b",
> ##D          col = "blue", pch = 2, lty = 2)
> ##D    segments(vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean - 2 * vgm.m$se),
> ##D          vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean + 2 * vgm.m$se))
> ##D    segments(vgm.s$distance.mean - del, trns(vgm.s$sqrtdiff.mean - 2 * vgm.s$se),
> ##D          vgm.s$distance.mean - del, trns(vgm.s$sqrtdiff.mean + 2 * vgm.s$se),
> ##D          col = "blue", lty = 2)
> ##D 
> ##D    mn <- (vgm.m$sqrtdiff.mean + vgm.s$sqrtdiff.mean) / 2
> ##D    se <- sqrt(vgm.m$se^2 + vgm.s$se^2)
> ##D    plot(vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean), type = "n",
> ##D         ylim = c(0, 1.5), xlab = "Distance", ylab = "Semi-variogram")
> ##D    polygon(c(vgm.m$distance.mean, rev(vgm.m$distance.mean)),
> ##D         c(trns(mn - se), rev(trns(mn + se))),
> ##D         border = NA, col = "lightblue")  
> ##D    points(vgm.m$distance.mean, trns(vgm.m$sqrtdiff.mean))
> ##D    points(vgm.s$distance.mean, trns(vgm.s$sqrtdiff.mean), col = "blue", pch = 2)
> ##D 
> ##D    vgm1 <- sm.variogram(loc.m, Co.m, nbins = nbins, varmat = TRUE, 
> ##D                         display = "none")
> ##D    vgm2 <- sm.variogram(loc.s, Co.s, nbins = nbins, varmat = TRUE,
> ##D                         display = "none")
> ##D 
> ##D    nbin  <- length(vgm1$distance.mean)
> ##D    vdiff <- vgm1$sqrtdiff.mean - vgm2$sqrtdiff.mean
> ##D    tstat <- c(vdiff %*% solve(vgm1$V + vgm2$V) %*% vdiff)
> ##D    pval  <- 1 - pchisq(tstat, nbin)
> ##D    print(pval)
> ##D })
> ##D 
> ##D # Assessing isotropy for Hg in March
> ##D 
> ##D with(mosses, {
> ##D    sm.variogram(loc.m, Hg.m, model = "isotropic")
> ##D })
> ##D 
> ##D # Assessing stationarity for Hg in September
> ##D 
> ##D with(mosses, {
> ##D    vgm.sty <- sm.variogram(loc.s, Hg.s, model = "stationary")
> ##D    i <- 1
> ##D    image(vgm.sty$eval.points[[1]], vgm.sty$eval.points[[2]], vgm.sty$estimate[ , , i],
> ##D          col = topo.colors(20))
> ##D    contour(vgm.sty$eval.points[[1]], vgm.sty$eval.points[[2]], vgm.sty$sdiff[ , , i],
> ##D          col = "red", add = TRUE)
> ##D })
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nise")
> ### * nise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nise
> ### Title: Integrated squared error between a density estimate and a Normal
> ###   density
> ### Aliases: nise
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x <- rnorm(100)
> nise(x)
[1] 0.0004764364
> 
> 
> 
> cleanEx()
> nameEx("nmise")
> ### * nmise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nmise
> ### Title: mean integrated squared error for density estimation with normal
> ###   data
> ### Aliases: nmise
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x  <- rnorm(50)
> sd <- sqrt(var(x))
> n  <- length(x)
> h  <- seq(0.1, 2, length=32)
> plot(h, nmise(sd, n, h), type = "l")
> 
> 
> 
> cleanEx()
> nameEx("nnbr")
> ### * nnbr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nnbr
> ### Title: nearest neighbour distances from data in one or two dimensions
> ### Aliases: nnbr
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x  <- rnorm(50)
> hw <- nnbr(x, 10)
> hw <- hw/exp(mean(log(hw)))
> sm.density(x, h.weights=hw)
> 
> 
> 
> cleanEx()
> nameEx("provide.data")
> ### * provide.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: provide.data
> ### Title: Making data available as data.frame
> ### Aliases: provide.data
> ### Keywords: utilities
> 
> ### ** Examples
> 
> provide.data(birth)
This function is no longer available in the sm package.
The data and attach functions should be used instead.
> 
> 
> 
> cleanEx()
> nameEx("sig.trace")
> ### * sig.trace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sig.trace
> ### Title: A significance trace for a hypothesis test
> ### Aliases: sig.trace
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x <- runif(50, 0, 1)
> y <- 5*x^2 + rnorm(50)
> sig.trace(sm.regression(x, y, model = "linear", display="none"), 
+         hvec = seq(0.05, 0.3, length = 10))
Test of linear model:  significance =  0.771 
Test of linear model:  significance =  0.587 
Test of linear model:  significance =  0.409 
Test of linear model:  significance =  0.302 
Test of linear model:  significance =  0.238 
Test of linear model:  significance =  0.197 
Test of linear model:  significance =  0.173 
Test of linear model:  significance =  0.16 
Test of linear model:  significance =  0.155 
Test of linear model:  significance =  0.154 
> 
> 
> 
> cleanEx()
> nameEx("sm.ancova")
> ### * sm.ancova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.ancova
> ### Title: Nonparametric analysis of covariance
> ### Aliases: sm.ancova
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> x <- runif(50, 0, 1)
> y <- 4*sin(6*x) + rnorm(50)
> g <- rbinom(50, 1, 0.5)
> sm.ancova(x, y, g, h = 0.15, model = "equal")
Test of equality :  h =  0.15    p-value =  0.11 
> 
> 
> 
> cleanEx()
> nameEx("sm.autoregression")
> ### * sm.autoregression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.autoregression
> ### Title: Nonparametric estimation of the autoregression function
> ### Aliases: sm.autoregression
> ### Keywords: nonparametric smooth ts
> 
> ### ** Examples
> 
> sm.autoregression(log(lynx), maxlag=3, se=TRUE)
> sm.autoregression(log(lynx), lags=cbind(2:3,4:5))
> 
> 
> 
> cleanEx()
> nameEx("sm.binomial")
> ### * sm.binomial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.binomial
> ### Title: Nonparametric logistic regression
> ### Aliases: sm.binomial
> ### Keywords: nonparametric smooth models
> 
> ### ** Examples
> ## Not run: 
> ##D # the next example assumes that all binomial denominators are 1's
> ##D sm.binomial(dose, failure, h=0.5)
> ##D # in the next example, (some of) the dose levels are replicated 
> ##D sm.binomial(dose, failure, n.trials, h=0.5)
> ## End(Not run)
> 
> with(birth, {
+    sm.binomial(Lwt[Smoke=="S"], Low[Smoke=="S"], h=20,
+            xlab='mother weight[Smoke=="S"]')
+    x<- seq(0,1,length=30)
+    y<- rbinom(30,10,prob=2*sin(x)/(1+x))
+    sm.binomial(x,y,N=rep(10,30), h=0.25)
+ })
> 
> 
> 
> cleanEx()
> nameEx("sm.binomial.bootstrap")
> ### * sm.binomial.bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.binomial.bootstrap
> ### Title: Bootstrap goodness-of-fit test for a logistic regression model.
> ### Aliases: sm.binomial.bootstrap
> ### Keywords: nonparametric smooth htest models
> 
> ### ** Examples
> 
> ## Not run: sm.binomial.bootstrap(concentration, dead, N, 0.5, nboot=50)
> 
> 
> 
> cleanEx()
> nameEx("sm.density")
> ### * sm.density
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.density
> ### Title: Nonparametric density estimation in one, two or three
> ###   dimensions.
> ### Aliases: sm.density
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> #  A one-dimensional example
> y <- rnorm(50)
> sm.density(y, model = "Normal")
> # sm.density(y, panel = TRUE)
> 
> #  A two-dimensional example
> y <- cbind(rnorm(50), rnorm(50))
> sm.density(y, display = "image")
Loading required package: rgl
Loading required package: rpanel
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘rpanel’
> # sm.density(y, panel = TRUE)
> 
> 
> #  A three-dimensional example
> # y <- cbind(rnorm(50), rnorm(50), rnorm(50))
> # sm.density(y)
> 
> 
> 
> cleanEx()

detaching ‘package:rgl’

> nameEx("sm.density.compare")
> ### * sm.density.compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.density.compare
> ### Title: Comparison of univariate density estimates
> ### Aliases: sm.density.compare
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> g <- rep(1:2, rep(50,2))
> sm.density.compare(y, g, model="equal")

Test of equal densities:  p-value =  0.43 
> 
> 
> 
> cleanEx()
> nameEx("sm.discontinuity")
> ### * sm.discontinuity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.discontinuity
> ### Title: The detection of discontinuities in a regression curve or
> ###   surface.
> ### Aliases: sm.discontinuity
> ### Keywords: smooth regression
> 
> ### ** Examples
> 
> par(mfrow = c(3, 2))
> 
> with(nile, {
+    sm.discontinuity(Year, Volume, hd = 0)
+    sm.discontinuity(Year, Volume)
+ 
+    ind <- (Year > 1898)
+    plot(Year, Volume)
+    h <- h.select(Year, Volume)
+    sm.regression(Year[!ind], Volume[!ind], h, add = TRUE)
+    sm.regression(Year[ ind], Volume[ ind], h, add = TRUE)
+ 
+    hvec <- 1:15
+    p <- numeric(0)
+    for (h in hvec) {
+       result <- sm.discontinuity(Year, Volume, h,
+                           display = "none", verbose = 0)
+       p <- c(p, result$p)
+    }
+    plot(hvec, p, type = "l", ylim = c(0, max(p)), xlab = "h")
+    lines(range(hvec), c(0.05, 0.05), lty = 2)
+ })
Test of continuity:  significance =  0.006 
location  st.diff
1888.5 -2.85 
1889.5 -3.65 
1890.5 -3.12 
1891.5 -2.82 
1896.5 3.78 
1897.5 4 
1898.5 4.77 
1899.5 3.35 
1915.5 -3.02 
1938.5 2.58 
Test of continuity:  significance =  0.009 
location  st.diff
1887.5 -2.9 
1888.5 -3.28 
1889.5 -3.34 
1890.5 -3.03 
1896.5 3.47 
1897.5 4.2 
1898.5 4.54 
1899.5 4.48 
1900.5 4.06 
1901.5 3.37 
1902.5 2.51 
> 
> with(trawl, {
+    Position  <- cbind(Longitude, Latitude)
+    ind <- (Longitude < 143.8)
+    # Remove a repeated point which causes difficulty with sm.discontinuity
+    ind[54] <- FALSE
+    sm.regression(Position[ind,], Score1[ind], theta = 35, phi = 30)
+    sm.discontinuity(Position[ind,], Score1[ind], col = "blue")
+ })
Test of continuity:  significance =  0.013 
> par(mfrow = c(1, 1))
> 	
> #  The following example takes longer to run.
> #  Alternative values for nside are 32 and 64.
> #  Alternative values of yjump are 1 and 0.5.
> # nside  <- 16
> # yjump  <- 2
> # x1     <- seq(0, 1, length = nside)
> # x2     <- seq(0, 1, length = nside)
> # x      <- expand.grid(x1, x2)
> # x      <- cbind(x1 = x[, 1], x2 = x[, 2])
> # y      <- rnorm(nside * nside)
> # ind    <- (sqrt((x[, 1] - 0.5)^2 + (x[, 2] - 0.5)^2) <= 0.25)
> # y[ind] <- y[ind] + yjump
> # image(x1, x2, matrix(y, ncol = nside))
> # sm.discontinuity(x, y, df = 20, add = TRUE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("sm.monotonicity")
> ### * sm.monotonicity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.monotonicity
> ### Title: A test of monotonicity in a regression curve.
> ### Aliases: sm.monotonicity
> ### Keywords: smooth regression
> 
> ### ** Examples
> 
> 	## Not run: 
> ##D #     Radiocarbon dating data
> ##D 
> ##D with(radioc, {
> ##D    ind     <- (Cal.age>5000 & Cal.age<6000)
> ##D    cal.age <- Cal.age[ind]
> ##D    rc.age  <- Rc.age[ind]
> ##D    sm.monotonicity(cal.age, rc.age, method = "aicc", nboot = 200)
> ##D })
> ##D 
> ##D #     Hosmer & Lemeshow birth data
> ##D 
> ##D with(birth, {
> ##D    sm.monotonicity(Lwt[Smoke == "N"], Low[Smoke == "N"],
> ##D           type = "binomial")
> ##D })
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("sm.options")
> ### * sm.options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.options
> ### Title: Set or return options of sm library
> ### Aliases: sm.options
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> ## Not run: 
> ##D sm.options(poly.index = 0)
> ##D # subsequent regression estimations will be performed using local means
> ##D # instead of local regression
> ##D #
> ##D sm.options(describe = FALSE)  
> ##D # turns off typing documentation files of data loaded by `sm.script'
> ##D # (works from command-line)
> ##D # 
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("sm.pca")
> ### * sm.pca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.pca
> ### Title: Smooth principal components analysis
> ### Aliases: sm.pca
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> ## Not run: 
> ##D Y    <- log(as.matrix(aircraft[ , -(1:2)]))
> ##D year <- aircraft$Yr
> ##D h    <- h.select(year, Y[ , 1], method = "df", df = 4)
> ##D spca <- sm.pca(year, Y, h, display = "none")
> ##D sm.pca(year, Y, h, display = "eigenvalues")
> ##D sm.pca(year, Y, h, display = "eigenvectors", ylim = c(-1, 1))
> ##D 
> ##D # The following code shows how the plots can be redrawn from the returned object
> ##D 
> ##D spca <- sm.pca(year, Y, h, display = "eigenvalues")
> ##D spca <- sm.pca(year, Y, h, display = "eigenvectors", ylim = c(-1, 1))
> ##D 
> ##D with(spca, {
> ##D    ylim <- range(evals[ , 1], band)
> ##D    plot(xgrid, evals[ , 1], type = "n", ylab = "Variance", ylim = ylim)
> ##D    polygon(c(xgrid, rev(xgrid)), c(band[ , 1], rev(band[ , 2])),
> ##D            col = "lightgreen", border = NA)
> ##D    lines(xgrid, evals[ , 1], col = "red")
> ##D })
> ##D 
> ##D with(spca, {
> ##D    pc <- 1
> ##D    plot(range(xgrid.plot), range(evecs.plot), type = "n",
> ##D         xlab = "x", ylab = "PC loadings")
> ##D    for (i in 1:ncol(Y))
> ##D       segments(xgrid.plot[-length(xgrid.plot)],
> ##D                evecs.plot[-nrow(evecs.plot), i],
> ##D                xgrid.plot[-1], evecs.plot[-1, i],
> ##D                col = col.plot[ , i], lty = i)
> ##D })
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sm.poisson")
> ### * sm.poisson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.poisson
> ### Title: Nonparametric Poisson regression
> ### Aliases: sm.poisson
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> with(muscle, {
+    TypeI <- TypeI.R+ TypeI.P+TypeI.B
+    sm.poisson(x=log(TypeI), y=TypeII, h=0.25,display="se")
+    sm.poisson(x=log(TypeI), y=TypeII, h=0.75, col=2, add=TRUE)
+ })
> 
> 
> 
> cleanEx()
> nameEx("sm.poisson.bootstrap")
> ### * sm.poisson.bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.poisson.bootstrap
> ### Title: Bootstrap goodness-of-fit test for a Poisson regression model
> ### Aliases: sm.poisson.bootstrap
> ### Keywords: nonparametric smooth htest models
> 
> ### ** Examples
> 
> ## takes a while: extend sm.script(muscle)
> with(muscle, {
+    TypeI <- TypeI.P + TypeI.R + TypeI.B
+    sm.poisson.bootstrap(log(TypeI), TypeII, h = 0.5)
+ })
Dipersion parameter =  0.7875154 
Test statistic =  1.622347 
Observed significance =  0.8712871 
> 
> 
> 
> cleanEx()
> nameEx("sm.regression")
> ### * sm.regression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.regression
> ### Title: Nonparametric regression with one or two covariates.
> ### Aliases: sm.regression
> ### Keywords: nonparametric regression smooth
> 
> ### ** Examples
> 
> with(trawl, {
+    Zone92   <- (Year == 0 & Zone == 1)
+    Position <- cbind(Longitude - 143, Latitude)
+    dimnames(Position)[[2]][1] <- "Longitude - 143"
+ 
+    par(mfrow = c(2, 2))
+    sm.regression(Longitude, Score1, method = "aicc", col = "red",
+        model = "linear")
+    sm.regression(Position[Zone92, ], Score1[Zone92], display = "image", 
+        theta = 120)
+    sm.regression(Position[Zone92, ], Score1[Zone92], df = 12, col = "se",
+        theta = 120)
+    sm.regression(Position[Zone92, ], Score1[Zone92], df = 12, col = "se", 
+        model = "linear", theta = 120)
+    par(mfrow = c(1, 1))
+ })
Test of linear model:  significance =  0 
Test of linear model:  significance =  0.031 
> 
> # sm.regression(Position[Zone92, 2:1], Score1[Zone92], display = "rgl", df = 12)
> # sm.regression(Position[Zone92, 2:1], Score1[Zone92], display = "rgl", df = 12,
> #       alpha = c(0.9, 1), col = "se", model = "linear")
> 
> # sm.regression(Position[Zone92, 1], Score1[Zone92], panel = TRUE)
> # sm.regression(Position[Zone92,  ], Score1[Zone92], panel = TRUE)
> # sm.regression(Position[Zone92,  ], Score1[Zone92], panel = TRUE, display = "rgl")
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("sm.rm")
> ### * sm.rm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.rm
> ### Title: Nonparametric analysis of repeated measurements data
> ### Aliases: sm.rm
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> sm.rm(y=as.matrix(citrate), display.rice=TRUE)
Autocovariances & autocorrelations:
     auto-cov  auto-corr
0  360.623571 1.00000000
1  244.287143 0.67740204
2  204.040714 0.56579972
3  175.807857 0.48751072
4  151.130000 0.41907965
5  128.680714 0.35682835
6  120.196429 0.33330164
7  103.723571 0.28762283
8   91.565000 0.25390742
9   87.847857 0.24359988
10  53.901429 0.14946729
11  22.932143 0.06359025
12  13.760714 0.03815811
13   9.732143 0.02698698
       Rice's criterion:
       h    indept.   depend.
[1] 0.100000 6.005194 6.005194
[1] 0.200000 6.005156 6.005182
[1] 0.300000 5.965648 5.992517
[1] 0.400000 5.583011 5.878175
[1] 0.500000 4.855846 5.702201
[1] 0.600000 4.131101 5.579386
[1] 0.700000 3.535247 5.519406
[1] 0.800000 3.072755 5.506906
[1] 0.900000 2.735846 5.530976
[1] 1.000000 2.516341 5.582579
[1] 1.100000 2.400934 5.653475
[1] 1.200000 2.370399 5.736703
[1] 1.300000 2.402966 5.826924
[1] 1.400000 2.478570 5.920349
[1] 1.500000 2.581237 6.014418
[1] 1.600000 2.699336 6.107412
[1] 1.700000 2.824778 6.198149
[1] 1.800000 2.952046 6.285777
[1] 1.900000 3.077424 6.369671
[1] 2.000000 3.198465 6.449387
h:  0.8 
> #
> with(dogs, {
+    Time <- seq(1,13,by=2)
+    gr1  <- as.matrix(dogs[dogs$Group==1,2:8])
+    plot(c(1,13), c(3,6),xlab="time", ylab="potassium", type="n") 
+    sm1  <- sm.rm(Time, gr1, display="se", add=TRUE)
+ })
Autocovariances & autocorrelations:
    auto-cov  auto-corr
0 0.35064732 1.00000000
1 0.21689732 0.61856261
2 0.09939732 0.28346808
3 0.03595982 0.10255268
4 0.03254464 0.09281304
5 0.04558036 0.12998918
6 0.02562500 0.07307913
       Rice's criterion:
       h    indept.   depend.
[1] 0.1000000 0.2093583 0.2093583
[1] 0.2000000 0.2093583 0.2093583
[1] 0.3000000 0.2093583 0.2093583
[1] 0.4000000 0.2093572 0.2093579
[1] 0.5000000 0.2092581 0.2093201
[1] 0.6000000 0.2082104 0.2089228
[1] 0.7000000 0.2044647 0.2075348
[1] 0.8000000 0.1972148 0.2049937
[1] 0.9000000 0.1874796 0.2018886
[1] 1.0000000 0.1769501 0.1989313
[1] 1.1000000 0.1668513 0.1964876
[1] 1.2000000 0.1577303 0.1946119
[1] 1.3000000 0.1497093 0.1932320
[1] 1.4000000 0.1427437 0.1922618
[1] 1.5000000 0.1367548 0.1916355
[1] 1.6000000 0.1316702 0.1913057
[1] 1.7000000 0.1274243 0.1912359
[1] 1.8000000 0.1239532 0.1913952
[1] 1.9000000 0.1211923 0.1917559
[1] 2.0000000 0.1190767 0.1922931
h:  1.7 
> 
> 
> 
> cleanEx()
> nameEx("sm.script")
> ### * sm.script
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.script
> ### Title: Running a script associated to the sm library
> ### Aliases: sm.script
> ### Keywords: utilities
> 
> ### ** Examples
> 
> sm.script()
		     Index of scripts for the sm library
		     -----------------------------------

To run a script called "sname", give the command
	sm.script(sname)

Script     Illus.  Fig.    Description
------     ------  ----    -----------

sp_hist	    1.1    1.1     Density estimate from the aircraft span data
sp_build           1.2     Construction of a density estimate
sp_alter    1.2    1.3     Changing the bandwidth in a density estimate
sp_comp     1.3    1.4     Comparing density estimates from the span data
air_scat           1.5     Scatterplots of the airpc data
air_dens    1.4    1.6     Density estimates from the airpc data
air_imag    1.5    1.7     Imageplot and sliceplot from the airpc data
air_cont    1.6    1.8     Sliceplots for the three groups of airpc data
geys3d      1.7    1.9     Three-dimensional contour from the geyser data
mag_scat    1.8    1.10    Spherical plot of the magnetic remanence data
mag_dens    1.9    1.11    Density estimate from the magnetic remanence data
speed       1.10   1.12    Density estimate from the aircraft speed data
speedvar    1.11   1.13    Modified estimates from the aircraft speed data
edfgrad            1.14    The gradient of an empirical distribution function

te_var      2.1    2.1     Variable bandwidths with the tephra data
air_band    2.2    2.2     A variability band from the aircraft span data
te_hcvsj    2.3    2.3     Bandwidth choices for the tephra data
air_hcv     2.4    2.4     Bandwidth choices for the aircraft data
te_norm     2.5    2.5     Assessing normality for the tephra data
te_band     2.6    2.6     Reference bands for normality with the tephra data
air_ind     2.7    2.7     Exploring independence in the aircraft data
air_inds                   Testing independence in the aircraft data
air_boot    2.8    2.8     Bootstrapping density estimates

rc_plot     3.1    3.1     Nonparametric regression with the radiocarbon data
rc_alter           3.2     Changing the bandwidth in a nonparametric regression
trwlplot    3.2    3.3     Nonparametric regressions with the reef data
birth1      3.3    3.4     Standard smoothing with the birthweight data
birth2      3.4    3.5     Local logistic regression with the birthweight data
muscle      3.5    3.6     Nonparametric regression with the rat muscle data
stanplot    3.6    3.7     Percentile curves for the Stanford data
follicle    3.7    3.8     Variable bandwidths with the follicle data
stananim                   Animation of percentile curves (Exercise 3.5)

sin_prop           4.1     Mean and s.d. of a nonparametric regression
rc_vband    4.1    4.2     A variability band with the radiocarbon data
sin_cv      4.2    4.3     Cross-validation for bandwidth choice
trwlboot    4.3    4.4     A reference band for no effect in the reef data
noeff                      A bootstrap test of no effect in the reef data
rc_boot     4.4    4.5     A bootstrap band from the radiocarbon data

trw_nesg    5.1    5.1     A significance trace for no effect in the reef data
trw_nebd    5.2    5.2     A reference band for no effect in the reef data
trw_lf             5.3     A linear model for the reef data
trw_lfsg    5.3    5.4     Assessing a linear model for the reef data
mildew      5.4    5.5     Assessing spatial trend in the mildew data
trees       5.5    5.6     Assessing linearity in the cherry trees data
trout1             5.7     Local logistic regression with the trout data
trout2      5.6    5.8     Assessing a logistic model for the trout data
bissell1           5.9     A parametric prediction band from Bissell's data
bissell2    5.7    5.10    A nonparametric prediction band from Bissell's data
bissell3           5.11    A reference band for linearity with Bissell's data
                           (execute bissell3 immediately after bissell2)

sp_comp2    6.1    6.1     Comparing density estimates for the span data
sp_test1           6.2     Assessing equality of densities for the span data
sp_test2    6.2    6.3     Assessing equality for the standardised span data
lc_dens     6.3    6.4     Density estimates from the laryngeal cancer data
lc_rr              6.5     Comparing case and control cancer groups
lc_comp                    A bootstrap test of equality for bivariate densities
trwlcomp    6.4    6.6     Nonparametric regression curves for the reef data
trwlband    6.5    6.7     A reference band for equality with the reef data
trwlcmp2           6.8     Comparing regression surfaces from the reef data
wormcomp    6.6    6.9     A reference band for equality with the worm data
onionplt    6.7    6.10    Nonparametric regression curves for the onions data
onionbnd    6.8    6.11    A reference band for parallelism

geys_ts     7.1    7.1-3   Density estimates from the geyser data
lynx        7.2    7.4     Analysis of the Canadian lynx data
citrate     7.3    7.5-7   Analysis of plasma citrate concentration data
dogs        7.4    7.8-9   Analysis of coronary sinus potassium data
nyc         7.5    7.10-13 Analysis of New York city air temperature data

trwlgam1    8.1    8.1     An additive model for the reef data
trwlgam2    8.2            Model comparison for the reef data
mackmap     8.3    8.2     Sampling points for the mackerel data
mackplot    8.4    8.3     Plots of the mackerel data
mackgam     8.5    8.4     Additive models for the mackerel data
trwlgam3    8.6    8.5     Semiparametric and varying coefficient models
smackplt    8.7    8.6     Plots for the Spanish survey data
smackgam    8.8    8.7     An additive model for the Spanish survey data

> sm.script(speed)
script:  speed

with(aircraft, {
par(mfrow=c(1,2))
hist(Speed, ylab="Frequency")
sm.density(Speed, yht=0.0016)
par(mfrow=c(1,1))
})

> 
> 
> 
> cleanEx()
> nameEx("sm.sigma")
> ### * sm.sigma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.sigma
> ### Title: Estimation of the error standard deviation in nonparametric
> ###   regression.
> ### Aliases: sm.sigma
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> ## Not run: 
> ##D with(airquality, {
> ##D    x     <- cbind(Wind, Temp)
> ##D    y     <- Ozone^(1/3)
> ##D    group <- (Solar.R < 200)
> ##D    sig1 <- sm.sigma(x[ group, ], y[ group], ci = TRUE)
> ##D    sig2 <- sm.sigma(x[!group, ], y[!group], ci = TRUE)
> ##D    print(c(sig1$estimate, sig1$ci))
> ##D    print(c(sig2$estimate, sig2$ci))
> ##D    print(sm.sigma(x[ group, ], y[ group], model = "constant", h = c(3, 5))$p)
> ##D    print(sm.sigma(x[!group, ], y[!group], model = "constant", h = c(3, 5))$p)
> ##D    print(sm.sigma2.compare(x[group, ], y[group], x[!group, ], y[!group]))
> ##D })
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("sm.sigma2.compare")
> ### * sm.sigma2.compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.sigma2.compare
> ### Title: Comparison across two groups of the error standard deviation in
> ###   nonparametric regression with two covariates.
> ### Aliases: sm.sigma2.compare
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> ## Not run: 
> ##D with(airquality, {
> ##D    x     <- cbind(Wind, Temp)
> ##D    y     <- Ozone^(1/3)
> ##D    group <- (Solar.R < 200)
> ##D    sig1 <- sm.sigma(x[ group, ], y[ group], ci = TRUE)
> ##D    sig2 <- sm.sigma(x[!group, ], y[!group], ci = TRUE)
> ##D    print(c(sig1$estimate, sig1$ci))
> ##D    print(c(sig2$estimate, sig2$ci))
> ##D    print(sm.sigma(x[ group, ], y[ group], model = "constant", h = c(3, 5))$p)
> ##D    print(sm.sigma(x[!group, ], y[!group], model = "constant", h = c(3, 5))$p)
> ##D    print(sm.sigma2.compare(x[group, ], y[group], x[!group, ], y[!group]))
> ##D })
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("sm.sphere")
> ### * sm.sphere
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.sphere
> ### Title: Nonparametric density estimation for spherical data.
> ### Aliases: sm.sphere
> ### Keywords: nonparametric smooth
> 
> ### ** Examples
> 
> lat  <- rnorm(50, 10, 15)
> long <- c(rnorm(25, 300, 15), rnorm(25, 240, 15))
> par(mfrow=c(1,2))
> sm.sphere(lat, long)
> sm.sphere(lat, long, sphim=TRUE, kappa=15)
> par(mfrow=c(1,1))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("sm.surface3d")
> ### * sm.surface3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sm.surface3d
> ### Title: Adding a regression surface to an rgl plot.
> ### Aliases: sm.surface3d
> ### Keywords: nonparametric regression smooth
> 
> ### ** Examples
> 
> with(trawl, {
+    Zone93    <- (Year == 1 & Zone == 1)
+    Position  <- cbind(Longitude - 143, Latitude)
+    model1 <- sm.regression(Position[Zone93,], Score1[Zone93],
+         h= c(0.1, 0.1), display = "rgl", xlab="Longitude - 143")
+    model2 <- sm.regression(Position[Zone93,], Score1[Zone93],
+         h= c(0.2, 0.2), display = "none")
+    sm.surface3d(model2$eval.points, model2$est, model1$scaling, col = "red")
+ })
Loading required package: rgl
Loading required package: rpanel
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘rpanel’
Error in sm.surface3d(model2$eval.points, model2$est, model1$scaling,  : 
  a scaling must be specified.
Calls: with -> with.default -> eval -> eval -> sm.surface3d
Execution halted
