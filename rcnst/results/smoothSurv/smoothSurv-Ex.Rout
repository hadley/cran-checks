
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "smoothSurv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('smoothSurv')
Loading required package: survival

### Survival Regression with Smoothed Error Distribution 
### Arnost Komarek

### See citation("smoothSurv") or toBibtex(citation("smoothSurv")) for the best way to cite
### the package if you find it useful.


> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2c")
> ### * a2c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2c
> ### Title: Work Function for 'smoothSurvReg'
> ### Aliases: a2c
> ### Keywords: internal utilities
> 
> ### ** Examples
> 
> ccoef <- c(0.1, 0.2, 0.15, 0.3, 0.25)
> 
> ### Compute 'a' counterparts
> acoef <- c2a(ccoef, 1)
> print(acoef)
[1] 0.0000000 0.6931472 0.4054651 1.0986123 0.9162907
> 
> ### And back 'c', ccoef2 should be same as ccoef
> ccoef2 <- a2c(acoef)
> print(ccoef2)
[1] 0.10 0.20 0.15 0.30 0.25
> 
> 
> 
> cleanEx()
> nameEx("c2a")
> ### * c2a
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c2a
> ### Title: Work Function for 'smoothSurvReg'
> ### Aliases: c2a
> ### Keywords: internal utilities
> 
> ### ** Examples
> 
> ccoef <- c(0.1, 0.2, 0.15, 0.3, 0.25)
> 
> ### Compute 'a' counterparts
> acoef <- c2a(ccoef, 1)
> print(acoef)
[1] 0.0000000 0.6931472 0.4054651 1.0986123 0.9162907
> 
> ### And back 'c', ccoef2 should be same as ccoef
> ccoef2 <- a2c(acoef)
> print(ccoef2)
[1] 0.10 0.20 0.15 0.30 0.25
> 
> 
> 
> cleanEx()
> nameEx("dextreme")
> ### * dextreme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extreme value
> ### Title: Density of the Extreme Value Distribution of a Minimum.
> ### Aliases: dextreme dstextreme
> ### Keywords: distribution
> 
> ### ** Examples
> 
> dextreme(1, (sqrt(6)/pi)*0.5772, sqrt(6)/pi)
[1] 0.3428868
> dstextreme(1)        ## approximately same result as on the previous row
[1] 0.3428868
> 
> 
> 
> cleanEx()
> nameEx("dstlogis")
> ### * dstlogis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: standardized logistic
> ### Title: Density of Standardized Logistic Distribution.
> ### Aliases: dstlogis
> ### Keywords: distribution
> 
> ### ** Examples
> 
> dstlogis(0)
[1] 0.4534498
> dstlogis(seq(-3, 3, 0.2))
 [1] 0.007792275 0.011157620 0.015950279 0.022748323 0.032335707 0.045746471
 [7] 0.064286993 0.089495749 0.122969777 0.165956721 0.218615885 0.278965591
[13] 0.341842078 0.398647963 0.438853129 0.453449841 0.438853129 0.398647963
[19] 0.341842078 0.278965591 0.218615885 0.165956721 0.122969777 0.089495749
[25] 0.064286993 0.045746471 0.032335707 0.022748323 0.015950279 0.011157620
[31] 0.007792275
> 
> 
> 
> cleanEx()
> nameEx("eval.Gspline")
> ### * eval.Gspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eval.Gspline
> ### Title: Evaluate a G-spline in a grid of values
> ### Aliases: eval.Gspline
> ### Keywords: dplot
> 
> ### ** Examples
> 
>   spline <- minPenalty(knots=seq(-4.2, 4.2, by=0.3), sdspline=0.2, difforder=3)$spline

Iter.: 0,  Penalty = -0.0259989,  Mean constr. = 6.10338e-17,  Var constr.= -5.55112e-16
Iter.: 1,  Penalty = -0.00650044,  Mean constr. = -2.70779e-17,  Var constr.= -5.51703e-06
Iter.: 2,  Penalty = -0.00162564,  Mean constr. = -9.51049e-17,  Var constr.= -1.54151e-06
Iter.: 3,  Penalty = -0.000406821,  Mean constr. = -3.35832e-17,  Var constr.= -4.31725e-07
Iter.: 4,  Penalty = -0.000102036,  Mean constr. = -3.24922e-17,  Var constr.= -1.0685e-07
Iter.: 5,  Penalty = -2.57752e-05,  Mean constr. = 1.02762e-16,  Var constr.= -8.90907e-09
Iter.: 6,  Penalty = -2.10079e-12,  Mean constr. = -1.13103e-15,  Var constr.= 3.96378e-06
Iter.: 7,  Penalty = -6.33796e-14,  Mean constr. = -6.78846e-17,  Var constr.= 7.12486e-11
     Convergence reached.
>   values <- eval.Gspline(spline, seq(-4.5, 4.5, by=0.05))
>   plot(values, type="l", bty="n", lwd=3)
> 
> 
> 
> cleanEx()
> nameEx("find.c")
> ### * find.c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.c
> ### Title: Work Function for 'smoothSurvReg'
> ### Aliases: find.c
> ### Keywords: internal utilities
> 
> ### ** Examples
> 
> knots <- seq(-4, 4, 0.5)
> sd0 <- 0.3
> ccoef <- find.c(knots, sd0, dist = "dstlogis")
> 
> ### We plot the approximation together with the truth
> ###
> grid <- seq(-4, 4, 0.05)
> truth <- dstlogis(grid)
> 
> ### Following lines compute the values of the approximation
> grid.big <- matrix(grid, nrow = length(grid), ncol = length(knots))
> knots.big <- matrix(knots, nrow = length(grid), ncol = length(knots), byrow = TRUE)
> normals <- dnorm(grid.big, mean = knots.big, sd = sd0)
> approx <- normals %*% ccoef
> 
> ### Plot it
> plot(grid, approx, type = "l", xlab = "y", ylab = "f(y)", bty = "n")
> lines(grid, truth, lty = 2)
> legend(-4, 0.35, c("approx", "truth"), lty = 1:2, bty = "n")
> 
> 
> 
> cleanEx()
> nameEx("give.c")
> ### * give.c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: give.c
> ### Title: Work Function for 'smoothSurvReg'
> ### Aliases: give.c
> ### Keywords: internal utilities
> 
> ### ** Examples
> 
> knots <- seq(-4, 4, 0.5)
> sd0 <- 0.3
> ccoef <- find.c(knots, sd0, dist = "dstlogis")
> 
> last.three <- c(3, 7, 10)
> c.rest <- ccoef[-last.three]
> ccoef2 <- give.c(knots, sd0, last.three, c.rest)
> 
> print(ccoef)
 [1] 0.0006121787 0.0013515103 0.0033765642 0.0082849182 0.0201061210
 [6] 0.0473784957 0.1037605134 0.1916892655 0.2445901615 0.1916892655
[11] 0.1037605134 0.0473784957 0.0201061210 0.0082849182 0.0033765642
[16] 0.0013515103 0.0006121787
> print(ccoef2)    ## Almost no change
 [1] 0.0006121787 0.0013515103 0.0054330551 0.0082849182 0.0201061210
 [6] 0.0473784957 0.0997256028 0.1916892655 0.2445901615 0.1959583899
[11] 0.1037605134 0.0473784957 0.0201061210 0.0082849182 0.0033765642
[16] 0.0013515103 0.0006121787
> 
> 
> 
> cleanEx()
> nameEx("minPenalty")
> ### * minPenalty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: minPenalty
> ### Title: Minimize the penalty term under the two (mean and variance)
> ###   constraints
> ### Aliases: minPenalty
> ### Keywords: optimize
> 
> ### ** Examples
> 
> optimum <- minPenalty(knots=seq(-4.2, 4.2, by = 0.3), sdspline=0.2, difforder=3)

Iter.: 0,  Penalty = -0.0259989,  Mean constr. = 6.10338e-17,  Var constr.= -5.55112e-16
Iter.: 1,  Penalty = -0.00650044,  Mean constr. = -2.70779e-17,  Var constr.= -5.51703e-06
Iter.: 2,  Penalty = -0.00162564,  Mean constr. = -9.51049e-17,  Var constr.= -1.54151e-06
Iter.: 3,  Penalty = -0.000406821,  Mean constr. = -3.35832e-17,  Var constr.= -4.31725e-07
Iter.: 4,  Penalty = -0.000102036,  Mean constr. = -3.24922e-17,  Var constr.= -1.0685e-07
Iter.: 5,  Penalty = -2.57752e-05,  Mean constr. = 1.02762e-16,  Var constr.= -8.90907e-09
Iter.: 6,  Penalty = -2.10079e-12,  Mean constr. = -1.13103e-15,  Var constr.= 3.96378e-06
Iter.: 7,  Penalty = -6.33796e-14,  Mean constr. = -6.78846e-17,  Var constr.= 7.12486e-11
     Convergence reached.
> where <- optimum$spline
> print(where)
         Knot SD basis      c coef.     a coef.
knot[1]  -4.2      0.2 1.251632e-05 -9.18589776
knot[2]  -3.9      0.2 4.436442e-05 -7.92049348
knot[3]  -3.6      0.2 1.431808e-04 -6.74882285
knot[4]  -3.3      0.2 4.207528e-04 -5.67088586
knot[5]  -3.0      0.2 1.125800e-03 -4.68668253
knot[6]  -2.7      0.2 2.742756e-03 -3.79621285
knot[7]  -2.4      0.2 6.084224e-03 -2.99947682
knot[8]  -2.1      0.2 1.228896e-02 -2.29647444
knot[9]  -1.8      0.2 2.260046e-02 -1.68720571
knot[10] -1.5      0.2 3.784525e-02 -1.17167063
knot[11] -1.2      0.2 5.770287e-02 -0.74986921
knot[12] -0.9      0.2 8.010791e-02 -0.42180143
knot[13] -0.6      0.2 1.012618e-01 -0.18746730
knot[14] -0.3      0.2 1.165487e-01 -0.04686683
knot[15]  0.0      0.2 1.221410e-01  0.00000000
knot[16]  0.3      0.2 1.165487e-01 -0.04686683
knot[17]  0.6      0.2 1.012618e-01 -0.18746730
knot[18]  0.9      0.2 8.010791e-02 -0.42180143
knot[19]  1.2      0.2 5.770287e-02 -0.74986921
knot[20]  1.5      0.2 3.784525e-02 -1.17167063
knot[21]  1.8      0.2 2.260046e-02 -1.68720571
knot[22]  2.1      0.2 1.228896e-02 -2.29647444
knot[23]  2.4      0.2 6.084224e-03 -2.99947682
knot[24]  2.7      0.2 2.742756e-03 -3.79621285
knot[25]  3.0      0.2 1.125800e-03 -4.68668253
knot[26]  3.3      0.2 4.207528e-04 -5.67088586
knot[27]  3.6      0.2 1.431808e-04 -6.74882285
knot[28]  3.9      0.2 4.436442e-05 -7.92049348
knot[29]  4.2      0.2 1.251632e-05 -9.18589776
> show <- eval.Gspline(where, seq(-4.2, 4.2, by=0.05))
> plot(show, type="l", bty="n", lwd=2)
> 
> 
> 
> cleanEx()
> nameEx("piece")
> ### * piece
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: piece
> ### Title: Left Continuous Piecewise Constant Function with a Finite
> ###   Support.
> ### Aliases: piece
> ### Keywords: utilities
> 
> ### ** Examples
> 
> my.breaks <- c(-2, 1.5, 4, 7)
> my.values <- c(0.5, 0.9, -2)
> grid <- seq(-3, 8, by = 0.25)
> piece(grid, my.breaks, my.values)
 [1]  0.0  0.0  0.0  0.0  0.0  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5
[16]  0.5  0.5  0.5  0.5  0.9  0.9  0.9  0.9  0.9  0.9  0.9  0.9  0.9  0.9 -2.0
[31] -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0  0.0  0.0  0.0  0.0
> 
> 
> 
> cleanEx()
> nameEx("smoothSurvReg")
> ### * smoothSurvReg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smoothSurvReg
> ### Title: Regression for a Survival Model with Smoothed Error Distribution
> ### Aliases: smoothSurvReg
> ### Keywords: survival smooth
> 
> ### ** Examples
> 
> ##### EXAMPLE 1:  Common scale
> ##### ========================
> ### We generate interval censored data and fit a model with few artificial covariates
> set.seed(221913282)
> x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
> x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
> y1 <- 0.5*x1 - 0.01*x2 + 0.005 *x1*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
> t1 <- exp(y1)                                                    ## left limit of the survival time
> t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
> surv <- Surv(t1, t2, type = "interval2")                         ## survival object
> 
> ## Fit the model with an interaction
> fit1 <- smoothSurvReg(surv ~ x1 * x2, logscale = ~1, info = FALSE, lambda = exp(2:(-1)))

Fit with Log(Lambda) = 2,  AIC(7.389056) = -74.86754,  df(7.389056) = 5.767029,  5 iterations,  fail = 0
Fit with Log(Lambda) = 1,  AIC(2.718282) = -74.84135,  df(2.718282) = 6.111356,  21 iterations,  fail = 0
Fit with Log(Lambda) = 0,  AIC(1) = -76.18611,  df(1) = 8.265108,  11 iterations,  fail = 0
Fit with Log(Lambda) = -1,  AIC(0.3678794) = -75.3578,  df(0.3678794) = 8.377794,  9 iterations,  fail = 0
> 
> ## Print the summary information
> summary(fit1, spline = TRUE)
Call:
smoothSurvReg(formula = surv ~ x1 * x2, logscale = ~1, lambda = exp(2:(-1)), 
    info = FALSE)

Estimated Regression Coefficients:
                Value Std.Error Std.Error2       Z      Z2       p      p2
(Intercept) -1.802764   3.27586    3.06748 -0.5503 -0.5877 0.58210 0.55673
x1          -3.778410   4.39325    4.28869 -0.8600 -0.8810 0.38976 0.37831
x2           0.006314   0.01804    0.01693  0.3501  0.3729 0.72630 0.70920
x1:x2        0.025362   0.02438    0.02378  1.0403  1.0664 0.29821 0.28625
Log(scale)  -0.251375   0.13899    0.12857 -1.8086 -1.9551 0.07052 0.05057

Scale = 0.7777 

Details on (Fitted) Error Distribution:
         Knot SD basis   c coef. Std.Error.c Std.Error2.c       Z       Z2
knot[1]  -6.0      0.2 3.819e-07   8.967e-06    6.490e-06 0.04259  0.05884
knot[2]  -5.7      0.2 9.662e-07   1.930e-05    1.426e-05 0.05005  0.06773
knot[3]  -5.4      0.2 2.387e-06   4.010e-05    3.029e-05 0.05954  0.07881
knot[4]  -5.1      0.2 5.761e-06   8.019e-05    6.204e-05 0.07184  0.09286
knot[5]  -4.8      0.2 1.358e-05   1.540e-04    1.223e-04 0.08815  0.11105
knot[6]  -4.5      0.2 3.125e-05   2.832e-04    2.312e-04 0.11035  0.13518
knot[7]  -4.2      0.2 7.026e-05   4.964e-04    4.177e-04 0.14155  0.16819
knot[8]  -3.9      0.2 1.542e-04   8.242e-04    7.173e-04 0.18715  0.21505
knot[9]  -3.6      0.2 3.307e-04   1.286e-03    1.161e-03 0.25718  0.28488
knot[10] -3.3      0.2 6.924e-04   1.863e-03    1.749e-03 0.37163  0.39589
knot[11] -3.0      0.2 1.416e-03   2.464e-03    2.401e-03 0.57443  0.58954
knot[12] -2.7      0.2 2.824e-03   2.908e-03    2.878e-03 0.97123  0.98120
knot[13] -2.4      0.2 5.494e-03   3.049e-03    2.690e-03 1.80172  2.04220
knot[14] -2.1      0.2 1.040e-02   3.436e-03    7.191e-04 3.02574 14.45721
knot[15] -1.8      0.2 1.903e-02   5.720e-03    1.340e-03 3.32671 14.19884
knot[16] -1.5      0.2 3.331e-02   9.984e-03    7.371e-03 3.33631  4.51886
knot[17] -1.2      0.2 5.469e-02   1.443e-02    1.342e-02 3.79149  4.07491
knot[18] -0.9      0.2 8.211e-02   1.667e-02    1.592e-02 4.92634  5.15898
knot[19] -0.6      0.2 1.098e-01   1.615e-02    1.055e-02 6.79988 10.40344
knot[20] -0.3      0.2 1.283e-01   1.625e-02          NaN 7.90012      NaN
knot[21]  0.0      0.2 1.307e-01   1.802e-02    8.661e-03 7.25246 15.09289
knot[22]  0.3      0.2 1.174e-01   1.800e-02    1.539e-02 6.52304  7.62716
knot[23]  0.6      0.2 9.515e-02   1.589e-02    1.365e-02 5.98918  6.96938
knot[24]  0.9      0.2 7.137e-02   1.332e-02    6.426e-03 5.35747 11.10517
knot[25]  1.2      0.2 5.062e-02   1.071e-02          NaN 4.72456      NaN
knot[26]  1.5      0.2 3.433e-02   7.942e-03          NaN 4.32307      NaN
knot[27]  1.8      0.2 2.225e-02   5.506e-03    1.322e-03 4.04150 16.82506
knot[28]  2.1      0.2 1.366e-02   4.080e-03    3.284e-03 3.34741  4.15852
knot[29]  2.4      0.2 7.862e-03   3.491e-03    2.632e-03 2.25212  2.98768
knot[30]  2.7      0.2 4.211e-03   2.988e-03    1.348e-03 1.40941  3.12511
knot[31]  3.0      0.2 2.089e-03   2.299e-03          NaN 0.90894      NaN
knot[32]  3.3      0.2 9.583e-04   1.557e-03          NaN 0.61539      NaN
knot[33]  3.6      0.2 4.061e-04   9.332e-04          NaN 0.43520      NaN
knot[34]  3.9      0.2 1.590e-04   4.982e-04          NaN 0.31908      NaN
knot[35]  4.2      0.2 5.747e-05   2.384e-04          NaN 0.24101      NaN
knot[36]  4.5      0.2 1.919e-05   1.028e-04          NaN 0.18665      NaN
knot[37]  4.8      0.2 5.915e-06   4.006e-05          NaN 0.14764      NaN
knot[38]  5.1      0.2 1.684e-06   1.416e-05          NaN 0.11893      NaN
knot[39]  5.4      0.2 4.429e-07   4.551e-06          NaN 0.09732      NaN
knot[40]  5.7      0.2 1.076e-07   1.332e-06          NaN 0.08074      NaN
knot[41]  6.0      0.2 2.413e-08   3.558e-07          NaN 0.06780      NaN
                 p        p2
knot[1]  9.660e-01 9.531e-01
knot[2]  9.601e-01 9.460e-01
knot[3]  9.525e-01 9.372e-01
knot[4]  9.427e-01 9.260e-01
knot[5]  9.298e-01 9.116e-01
knot[6]  9.121e-01 8.925e-01
knot[7]  8.874e-01 8.664e-01
knot[8]  8.515e-01 8.297e-01
knot[9]  7.970e-01 7.757e-01
knot[10] 7.102e-01 6.922e-01
knot[11] 5.657e-01 5.555e-01
knot[12] 3.314e-01 3.265e-01
knot[13] 7.159e-02 4.113e-02
knot[14] 2.480e-03 2.258e-47
knot[15] 8.788e-04 9.314e-46
knot[16] 8.490e-04 6.217e-06
knot[17] 1.497e-04 4.603e-05
knot[18] 8.378e-07 2.483e-07
knot[19] 1.047e-11 2.392e-25
knot[20] 2.786e-15       NaN
knot[21] 4.093e-13 1.804e-51
knot[22] 6.889e-11 2.400e-14
knot[23] 2.109e-09 3.183e-12
knot[24] 8.440e-08 1.184e-28
knot[25] 2.306e-06       NaN
knot[26] 1.539e-05       NaN
knot[27] 5.311e-05 1.599e-63
knot[28] 8.157e-04 3.203e-05
knot[29] 2.431e-02 2.811e-03
knot[30] 1.587e-01 1.777e-03
knot[31] 3.634e-01       NaN
knot[32] 5.383e-01       NaN
knot[33] 6.634e-01       NaN
knot[34] 7.497e-01       NaN
knot[35] 8.095e-01       NaN
knot[36] 8.519e-01       NaN
knot[37] 8.826e-01       NaN
knot[38] 9.053e-01       NaN
knot[39] 9.225e-01       NaN
knot[40] 9.356e-01       NaN
knot[41] 9.459e-01       NaN

Penalized Loglikelihood and Its Components:
     Log-likelihood: -68.72999 
            Penalty: -0.2994899 
   Penalized Log-likelihood: -69.02948 

Degree of smoothing:
   Number of parameters: 43 
                   Mean parameters: 4 
                  Scale parameters: 1 
                 Spline parameters: 38 

                   Lambda: 2.718282 
              Log(Lambda): 1 
                       df: 6.111356 

AIC (higher is better):  -74.84135 

Number of Newton-Raphson Iterations:  21 
n = 50 
> 
> ## Plot the fitted error distribution
> plot(fit1)
> 
> ## Plot the fitted error distribution with its components
> plot(fit1, components = TRUE)
> 
> ## Plot the cumulative distribution function corresponding to the error density
> survfit(fit1, cdf = TRUE)
> 
> ## Plot survivor curves for persons with (x1, x2) = (0, 180) and (1, 180)
> cov <- matrix(c(0, 180, 0,   1, 180, 180), ncol = 3, byrow = TRUE)
> survfit(fit1, cov = cov)
> 
> ## Plot hazard curves for persons with (x1, x2) = (0, 180) and (1, 180)
> cov <- matrix(c(0, 180, 0,   1, 180, 180), ncol = 3, byrow = TRUE)
> hazard(fit1, cov = cov)
> 
> ## Plot densities for persons with (x1, x2) = (0, 180) and (1, 180)
> cov <- matrix(c(0, 180, 0,   1, 180, 180), ncol = 3, byrow = TRUE)
> fdensity(fit1, cov = cov)
> 
> ## Compute estimates expectations of survival times for persons with
> ## (x1, x2) = (0, 180), (1, 180), (0, 190), (1, 190), (0, 200), (1, 200)
> ## and estimates of a difference of these expectations:
> ## T(0, 180) - T(1, 180), T(0, 190) - T(1, 190), T(0, 200) - T(1, 200),
> cov1 <- matrix(c(0, 180, 0,   0, 190, 0,   0, 200, 0), ncol = 3, byrow = TRUE)
> cov2 <- matrix(c(1, 180, 180,   1, 190, 190,   1, 200, 200), ncol = 3, byrow = TRUE)
> print(estimTdiff(fit1, cov1 = cov1, cov2 = cov2))
Warning in matrix(rep(sigmasq0, row.cov), ncol = nknots, byrow = TRUE) :
  data length [3] is not a sub-multiple or multiple of the number of columns [41]
Error in `dimnames<-.data.frame`(`*tmp*`, value = list(n)) : 
  invalid 'dimnames' given for data frame
Calls: print ... as.array.default -> dimnames<- -> dimnames<-.data.frame
Execution halted
