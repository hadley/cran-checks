
R Under development (unstable) (2017-08-14 r73093) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "texmexseq"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('texmexseq')
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dpoilog")
> ### * dpoilog
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpoilog
> ### Title: probability density function for the Poisson lognormal
> ###   distribution
> ### Aliases: dpoilog rpoilog
> ### Keywords: univar datagen
> 
> ### ** Examples
> 
> # visualize the density function
> plot(dpoilog(0:100, mu=1.0, sig=1.0), type='o')
> 
> # visualize the empirical distribution of a random sample of 1000 OTUs
> hist(rpoilog(1000, mu=1.0, sig=1.0, condS=TRUE))
> 
> 
> 
> cleanEx()
> nameEx("poilogMLE")
> ### * poilogMLE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: poilogMLE
> ### Title: maximum likelihood estimation for the Poisson lognormal
> ### Aliases: poilogMLE
> ### Keywords: distribution
> 
> ### ** Examples
> 
> # create some random data
> x <- rpoilog(S=1000, mu=-2.0, sig=2.0, keep0=FALSE)
> 
> # fit that data
> res <- poilogMLE(x, 2.0, -2.0)
> 
> # the results should be fairly robust to the starting parameters
> res2 <- poilogMLE(x, 1.0, 0.5)
> 
> 
> 
> cleanEx()
> nameEx("ppplot")
> ### * ppplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ppplot
> ### Title: PP plot for Poisson lognormal distribution
> ### Aliases: ppplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> # make up some data
> n <- rpoilog(1000, 1.0, 1.0)
> 
> # plot it
> p <- ppplot(n)
> p
> 
> # compare to the lognormal's fit
> # first, make the empirical cumulative distribution function from the data
> x <- tabulate(n + 1)
> empirical <- cumsum(x / sum(x))
> 
> # then, get the theoretical percents
> theoretical <- plnorm(0:max(n), meanlog=mean(log(n)), sdlog=sd(log(n)))
> lognormal.fit <- data.frame(empirical=empirical, theoretical=theoretical)
> 
> # add that data in a new layer
> p + geom_line(data=lognormal.fit, color='red')
> 
> 
> 
> cleanEx()
> nameEx("quad-table")
> ### * quad-table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quad.table
> ### Title: Create and plot "quads" of samples
> ### Aliases: quad.table quad.plot
> ### Keywords: hplot manip design
> 
> ### ** Examples
> 
> # make up some data
> sim.data <- function() rpoilog(1000, 1.0, 1.0, condS=TRUE)
> otu <- data.frame(sample0=sim.data())
> for (i in 1:10) otu[[paste('sample', i, sep='')]] <- sim.data()
> otu.ids <- paste('otu', seq(1:1000), sep='')
> rownames(otu) <- otu.ids
> z.table <- z.transform.table(otu)
Warning in value[[3L]](cond) : fit 1 failed
Warning in value[[3L]](cond) : fit 1 failed
Warning in value[[3L]](cond) : fit 2 failed
> 
> # pull out a quad, imagining that samples 1 and 2 were the control samples
> # and 3 and 4 were the treatment
> q <- quad.table(z.table, 'sample1', 'sample2', 'sample3', 'sample4')
> 
> # plot it
> p <- quad.plot(q)
Error in get("d.control") : object 'd.control' not found
Calls: quad.plot ... map_if -> map -> lapply -> FUN -> overscope_eval_next -> get
Execution halted
