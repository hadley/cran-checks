
R Under development (unstable) (2017-08-15 r73096) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RNeXML"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RNeXML')
Loading required package: ape
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_basic_meta")
> ### * add_basic_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_basic_meta
> ### Title: Add basic metadata
> ### Aliases: add_basic_meta
> 
> ### ** Examples
> 
> nex <- add_basic_meta(title = "My test title",
+              description = "A description of my test",
+              creator = "Carl Boettiger <cboettig@gmail.com>",
+              publisher = "unpublished data",
+              pubdate = "2012-04-01")
> 
>  ## Adding citation to an R package:
>  nexml <- add_basic_meta(citation=citation("ape"))
> ## Not run: 
> ##D  ## Use knitcitations package to add a citation by DOI:
> ##D  library(knitcitations)
> ##D  nexml <- add_basic_meta(citation = bib_metadata("10.2307/2408428"))
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("add_characters")
> ### * add_characters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_characters
> ### Title: Add character data to a nexml object
> ### Aliases: add_characters
> 
> ### ** Examples
> 
> library("geiger")
> data(geospiza)
> geiger_nex <- add_characters(geospiza$dat)
> 
> 
> 
> cleanEx()

detaching ‘package:geiger’

> nameEx("add_meta")
> ### * add_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_meta
> ### Title: Add metadata to a nexml file
> ### Aliases: add_meta
> 
> ### ** Examples
> 
> ## Create a new nexml object with a single metadata element: 
> modified <- meta(property = "prism:modificationDate", content = "2013-10-04")
> nex <- add_meta(modified) # Note: 'prism' is defined in nexml_namespaces by default.  
> 
> ## Write multiple metadata elements, including a new namespace:  
> website <- meta(href = "http://carlboettiger.info", 
+                 rel = "foaf:homepage")              # meta can be link-style metadata
> nex <- add_meta(list(modified,  website), 
+                 namespaces = c(foaf = "http://xmlns.com/foaf/0.1/"))
> 
> ## Append more metadata, and specify a level: 
> history <- meta(property = "skos:historyNote",
+                  content = "Mapped from the bird.orders data in the ape package using RNeXML")
> nex <- add_meta(history, 
+                 nexml = nex,
+                 level = "trees",
+                 namespaces = c(skos = "http://www.w3.org/2004/02/skos/core#"))
> 
> 
> 
> 
> cleanEx()
> nameEx("add_namespaces")
> ### * add_namespaces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_namespaces
> ### Title: add namespaces
> ### Aliases: add_namespaces
> 
> ### ** Examples
> 
> ## Create a new nexml object with a single metadata element: 
> modified <- meta(property = "prism:modificationDate", content = "2013-10-04")
> nex <- add_meta(modified) # Note: 'prism' is defined in nexml_namespaces by default.  
> 
> ## Write multiple metadata elements, including a new namespace:  
> website <- meta(href = "http://carlboettiger.info", 
+                 rel = "foaf:homepage")              # meta can be link-style metadata
> nex <- add_meta(list(modified,  website), 
+                 namespaces = c(foaf = "http://xmlns.com/foaf/0.1/"))
> 
> ## Append more metadata, and specify a level: 
> history <- meta(property = "skos:historyNote",
+                  content = "Mapped from the bird.orders data in the ape package using RNeXML")
> nex <- add_meta(history, 
+                 nexml = nex,
+                 level = "trees",
+                 namespaces = c(skos = "http://www.w3.org/2004/02/skos/core#"))
> 
> 
> 
> 
> cleanEx()
> nameEx("add_trees")
> ### * add_trees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_trees
> ### Title: add_trees
> ### Aliases: add_trees
> 
> ### ** Examples
> 
> library("geiger")
> data(geospiza)
> geiger_nex <- add_trees(geospiza$phy)
> 
> 
> 
> cleanEx()

detaching ‘package:geiger’

> nameEx("c-ListOfmeta-method")
> ### * c-ListOfmeta-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c,ListOfmeta-method
> ### Title: Concatenate ListOfmeta elements into a ListOfmeta
> ### Aliases: c,ListOfmeta-method
> 
> ### ** Examples
> 
> metalist <- c(meta(content="example", property="dc:title"),
+               meta(content="Carl", property="dc:creator"))
> out <- c(metalist, metalist) 
> out <- c(metalist, meta(content="a", property="b")) 
> 
> 
> 
> cleanEx()
> nameEx("c-meta-method")
> ### * c-meta-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c,meta-method
> ### Title: Concatenate meta elements into a ListOfmeta
> ### Aliases: c,meta-method
> 
> ### ** Examples
> 
> c(meta(content="example", property="dc:title"),
+   meta(content="Carl", property="dc:creator"))
An object of class "ListOfmeta"
[[1]]
An object of class "meta"
Slot "id":
[1] "m28"

Slot "property":
[1] "dc:title"

Slot "datatype":
[1] "xsd:string"

Slot "content":
[1] "example"

Slot "children":
list()

Slot "xsi:type":
[1] "LiteralMeta"

Slot "rel":
character(0)

Slot "href":
character(0)


[[2]]
An object of class "meta"
Slot "id":
[1] "m29"

Slot "property":
[1] "dc:creator"

Slot "datatype":
[1] "xsd:string"

Slot "content":
[1] "Carl"

Slot "children":
list()

Slot "xsi:type":
[1] "LiteralMeta"

Slot "rel":
character(0)

Slot "href":
character(0)


Slot "names":
[1] NA NA

> 
> 
> 
> 
> cleanEx()
> nameEx("c-nexml-method")
> ### * c-nexml-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c,nexml-method
> ### Title: Concatenate nexml files
> ### Aliases: c,nexml-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D f1 <- system.file("examples", "trees.xml", package="RNeXML")
> ##D f2 <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> ##D nex1 <- read.nexml(f1)
> ##D nex2 <- read.nexml(f2)
> ##D nex <- c(nex1, nex2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_characters")
> ### * get_characters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_characters
> ### Title: Get character data.frame from nexml
> ### Aliases: get_characters
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A simple example with a discrete and a continous trait
> ##D f <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> ##D nex <- read.nexml(f)
> ##D get_characters(nex)
> ##D 
> ##D # A more complex example -- currently ignores sequence-type characters
> ##D f <- system.file("examples", "characters.xml", package="RNeXML")
> ##D nex <- read.nexml(f)
> ##D get_characters(nex)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_characters_list")
> ### * get_characters_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_characters_list
> ### Title: Extract the character matrix
> ### Aliases: get_characters_list
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_characters_list(nex)
$cs15
           NA log snout-vent length
taxon_8  ou10            -3.2777799
taxon_9  ou11             2.0959433
taxon_10 ou12             3.1373971
taxon_1   ou3             4.7532824
taxon_2   ou4            -2.7624146
taxon_3   ou5             2.1049413
taxon_4   ou6            -4.9504770
taxon_5   ou7             1.2714718
taxon_6   ou8             6.2593966
taxon_7   ou9             0.9099634

$cs31
         reef-dwelling
taxon_8              0
taxon_9              1
taxon_10             0
taxon_1              1
taxon_2              0
taxon_3              0
taxon_4              0
taxon_5              1
taxon_6              1
taxon_7              1

> 
> 
> 
> cleanEx()
> nameEx("get_flat_trees")
> ### * get_flat_trees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_flat_trees
> ### Title: get_flat_trees
> ### Aliases: get_flat_trees
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_flat_trees(nex)
1 phylogenetic trees
> 
> 
> 
> cleanEx()
> nameEx("get_metadata")
> ### * get_metadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_metadata
> ### Title: get_metadata
> ### Aliases: get_metadata
> 
> ### ** Examples
> 
> ## Not run: 
> ##D comp_analysis <- system.file("examples", "primates.xml", package="RNeXML")
> ##D nex <- nexml_read(comp_analysis)
> ##D get_metadata(nex)
> ##D get_metadata(nex, "otus/otu")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_namespaces")
> ### * get_namespaces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_namespaces
> ### Title: get namespaces
> ### Aliases: get_namespaces
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_namespaces(nex)
                                             nex 
                     "http://www.nexml.org/2009" 
                                             xsi 
     "http://www.w3.org/2001/XMLSchema-instance" 
                                             xml 
          "http://www.w3.org/XML/1998/namespace" 
                                            cdao 
       "http://purl.obolibrary.org/obo/cdao.owl" 
                                             xsd 
             "http://www.w3.org/2001/XMLSchema#" 
                                              dc 
              "http://purl.org/dc/elements/1.1/" 
                                         dcterms 
                     "http://purl.org/dc/terms/" 
                                             ter 
                     "http://purl.org/dc/terms/" 
                                           prism 
"http://prismstandard.org/namespaces/1.2/basic/" 
                                              cc 
                "http://creativecommons.org/ns#" 
                                            ncbi 
         "http://www.ncbi.nlm.nih.gov/taxonomy#" 
                                              tc 
 "http://rs.tdwg.org/ontology/voc/TaxonConcept#" 
                                                 
                     "http://www.nexml.org/2009" 
                                             map 
         "http://purl.org/phylo/phylomap/terms#" 
                                             rdf 
   "http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
> 
> 
> 
> cleanEx()
> nameEx("get_rdf")
> ### * get_rdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_rdf
> ### Title: Extract rdf-xml from a NeXML file
> ### Aliases: get_rdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D f <- system.file("examples", "meta_example.xml", package="RNeXML")
> ##D rdf <- get_rdf(f)
> ##D 
> ##D ## Write to a file and read in with rrdf
> ##D tmp <- tempfile()
> ##D saveXML(rdf, tmp)
> ##D library(rrdf)
> ##D lib <- load.rdf(tmp)
> ##D 
> ##D ## Perform a SPARQL query:
> ##D sparql.rdf(lib, "SELECT ?title WHERE { ?x <http://purl.org/dc/elements/1.1/title> ?title}")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_taxa")
> ### * get_taxa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_taxa
> ### Title: get_taxa
> ### Aliases: get_otu get_taxa
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_taxa(nex)
    otu    label about xsi.type otus
1   ou3  taxon_1    NA       NA  os2
2   ou4  taxon_2    NA       NA  os2
3   ou5  taxon_3    NA       NA  os2
4   ou6  taxon_4    NA       NA  os2
5   ou7  taxon_5    NA       NA  os2
6   ou8  taxon_6    NA       NA  os2
7   ou9  taxon_7    NA       NA  os2
8  ou10  taxon_8    NA       NA  os2
9  ou11  taxon_9    NA       NA  os2
10 ou12 taxon_10    NA       NA  os2
> 
> 
> 
> cleanEx()
> nameEx("get_taxa_meta")
> ### * get_taxa_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_taxa_meta
> ### Title: get_taxa_meta
> ### Aliases: get_taxa_meta
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- add_trees(bird.orders)
> ##D birds <- taxize_nexml(birds, "NCBI")
> ##D RNeXML:::get_taxa_meta(birds)
> ##D RNeXML:::get_taxa_meta(birds, 'rel')
> ##D RNeXML:::get_taxa_meta(birds, 'id')
> ##D RNeXML:::get_taxa_meta(birds, 'xsi:type')
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_taxa_meta_list")
> ### * get_taxa_meta_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_taxa_meta_list
> ### Title: get_taxa_meta_list
> ### Aliases: get_taxa_meta_list
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- add_trees(bird.orders)
> ##D birds <- taxize_nexml(birds, "NCBI")
> ##D RNeXML:::get_taxa_meta_list(birds)
> ##D RNeXML:::get_taxa_meta_list(birds, 'rel')
> ##D RNeXML:::get_taxa_meta_list(birds, 'id')
> ##D RNeXML:::get_taxa_meta_list(birds, 'xsi:type')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_trees")
> ### * get_trees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_trees
> ### Title: extract a phylogenetic tree from the nexml
> ### Aliases: get_trees
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_trees(nex)

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
	taxon_8, taxon_9, taxon_10, taxon_1, taxon_2, taxon_3, ...

Rooted; includes branch lengths.
> 
> 
> 
> cleanEx()
> nameEx("get_trees_list")
> ### * get_trees_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_trees_list
> ### Title: extract all phylogenetic trees in ape format
> ### Aliases: get_trees_list
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> get_trees_list(nex)
[[1]]
1 phylogenetic trees

> 
> 
> 
> cleanEx()
> nameEx("meta")
> ### * meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meta
> ### Title: Constructor function for metadata nodes
> ### Aliases: meta
> 
> ### ** Examples
> 
> meta(content="example", property="dc:title")
An object of class "meta"
Slot "id":
[1] "m30"

Slot "property":
[1] "dc:title"

Slot "datatype":
[1] "xsd:string"

Slot "content":
[1] "example"

Slot "children":
list()

Slot "xsi:type":
[1] "LiteralMeta"

Slot "rel":
character(0)

Slot "href":
character(0)

> 
> 
> 
> cleanEx()
> nameEx("nexml_add")
> ### * nexml_add
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_add
> ### Title: add elements to a new or existing nexml object
> ### Aliases: nexml_add
> 
> ### ** Examples
> 
> library("geiger")
> data(geospiza)
> geiger_nex <- nexml_add(geospiza$phy, type="trees")
> geiger_nex <- nexml_add(geospiza$dat, nexml = geiger_nex, type="characters")
> 
> 
> 
> cleanEx()

detaching ‘package:geiger’

> nameEx("nexml_figshare")
> ### * nexml_figshare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_figshare
> ### Title: publish nexml to figshare
> ### Aliases: nexml_figshare
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- add_trees(bird.orders)
> ##D doi <- nexml_figshare(birds, visibility = "public", repository="figshare")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nexml_get")
> ### * nexml_get
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_get
> ### Title: Get the desired element from the nexml object
> ### Aliases: get_item nexml_get
> 
> ### ** Examples
> 
> comp_analysis <- system.file("examples", "comp_analysis.xml", package="RNeXML")
> nex <- nexml_read(comp_analysis)
> nexml_get(nex, "trees")

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
	taxon_8, taxon_9, taxon_10, taxon_1, taxon_2, taxon_3, ...

Rooted; includes branch lengths.
> nexml_get(nex, "characters_list")
$cs15
           NA log snout-vent length
taxon_8  ou10            -3.2777799
taxon_9  ou11             2.0959433
taxon_10 ou12             3.1373971
taxon_1   ou3             4.7532824
taxon_2   ou4            -2.7624146
taxon_3   ou5             2.1049413
taxon_4   ou6            -4.9504770
taxon_5   ou7             1.2714718
taxon_6   ou8             6.2593966
taxon_7   ou9             0.9099634

$cs31
         reef-dwelling
taxon_8              0
taxon_9              1
taxon_10             0
taxon_1              1
taxon_2              0
taxon_3              0
taxon_4              0
taxon_5              1
taxon_6              1
taxon_7              1

> 
> 
> 
> cleanEx()
> nameEx("nexml_publish")
> ### * nexml_publish
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_publish
> ### Title: publish nexml files to the web and receive a DOI
> ### Aliases: nexml_publish
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- add_trees(bird.orders)
> ##D doi <- nexml_publish(birds, visibility = "public", repository="figshare")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nexml_read")
> ### * nexml_read
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_read
> ### Title: Read NeXML files into various R formats
> ### Aliases: nexml_read nexml_read.XMLInternalDocument
> ###   nexml_read.XMLInternalNode nexml_read.character read.nexml
> 
> ### ** Examples
> 
> # file
> f <- system.file("examples", "trees.xml", package="RNeXML")
> nexml_read(f)
A nexml object representing:
 	 1 phylogenetic tree blocks, where: 
 	 block 1 contains 2 phylogenetic trees 
 	 5 meta elements 
 	 0 character matrices 
 	 5 taxonomic units 
 Taxa: 	 species 1, species 2, species 3, species 4, species 5 ... 

 NeXML generated by RNeXML using schema version: 0.9 
 size: 130.3 Kb 
> ## Not run: 
> ##D  # may take > 5 s
> ##D # url
> ##D url <- "https://raw.githubusercontent.com/ropensci/RNeXML/master/inst/examples/trees.xml"
> ##D nexml_read(url)
> ##D # character string of XML
> ##D str <- paste0(readLines(f), collapse = "")
> ##D nexml_read(str)
> ##D # XMLInternalDocument
> ##D library("httr")
> ##D library("XML")
> ##D x <- xmlParse(content(GET(url)))
> ##D nexml_read(x)
> ##D # XMLInternalNode
> ##D nexml_read(xmlRoot(x))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nexml_to_simmap")
> ### * nexml_to_simmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_to_simmap
> ### Title: nexml_to_simmap
> ### Aliases: nexml_to_simmap
> 
> ### ** Examples
> 
> data(simmap_ex)
> phy <- nexml_to_simmap(simmap_ex)
> nex <- simmap_to_nexml(phy) 
Warning in if (class(phy) == c("simmap", "phylo")) class(phy) <- "phylo" :
  the condition has length > 1 and only the first element will be used
> 
> 
> 
> cleanEx()

detaching ‘package:bindrcpp’

> nameEx("nexml_validate")
> ### * nexml_validate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_validate
> ### Title: validate nexml using the online validator tool
> ### Aliases: nexml_validate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- nexml_write(bird.orders, "birds_orders.xml")
> ##D nexml_validate("birds_orders.xml")
> ##D unlink("birds_orders.xml") # delete file to clean up
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nexml_write")
> ### * nexml_write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nexml_write
> ### Title: Write nexml files
> ### Aliases: nexml_write write.nexml
> 
> ### ** Examples
> 
>  ## Write an ape tree to nexml, analgous to write.nexus:
>  library(ape); data(bird.orders)
>  write.nexml(bird.orders, file="example.xml")
[1] "example.xml"
> 
> ## Not run: 
> ##D  # takes > 5s
> ##D  ## Assemble a nexml section by section and then write to file:
> ##D  library(geiger)
> ##D  data(geospiza)
> ##D  nexml <- add_trees(geospiza$phy) # creates new nexml
> ##D  nexml <- add_characters(geospiza$dat, nexml = nexml) # pass the nexml obj to append character data
> ##D  nexml <- add_basic_meta(title="my title", creator = "Carl Boettiger", nexml = nexml)
> ##D  nexml <- add_meta(meta("prism:modificationDate", format(Sys.Date())), nexml = nexml)
> ##D 
> ##D  write.nexml(nexml, file="example.xml")
> ##D 
> ##D  ## As above, but in one call (except for add_meta() call).  
> ##D  write.nexml(trees = geospiza$phy, 
> ##D              characters = geospiza$dat, 
> ##D              title = "My title", 
> ##D              creator = "Carl Boettiger",
> ##D              file = "example.xml")
> ##D  
> ##D  ## Mix and match: identical to the section by section: 
> ##D  nexml <- add_meta(meta("prism:modificationDate", format(Sys.Date())))
> ##D  write.nexml(x = nexml,
> ##D              trees = geospiza$phy, 
> ##D              characters = geospiza$dat, 
> ##D              title = "My title", 
> ##D              creator = "Carl Boettiger",
> ##D              file = "example.xml")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simmap_to_nexml")
> ### * simmap_to_nexml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simmap_to_nexml
> ### Title: simmap_to_nexml
> ### Aliases: simmap_to_nexml
> 
> ### ** Examples
> 
> data(simmap_ex)
> phy <- nexml_to_simmap(simmap_ex)
> nex <- simmap_to_nexml(phy) 
Warning in if (class(phy) == c("simmap", "phylo")) class(phy) <- "phylo" :
  the condition has length > 1 and only the first element will be used
> 
> 
> 
> cleanEx()
> nameEx("taxize_nexml")
> ### * taxize_nexml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taxize_nexml
> ### Title: taxize nexml
> ### Aliases: taxize_nexml
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(bird.orders)
> ##D birds <- add_trees(bird.orders)
> ##D birds <- taxize_nexml(birds, "NCBI")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  22.808 0.276 31.006 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
