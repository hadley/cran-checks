Package seqHMM version 1.0.14
Package built using 77885/R 4.0.0; x86_64-pc-linux-gnu; 2020-03-02 14:00:25 UTC; unix   
Checked with rchk version 490627e4fb8e93244230dbbd61455730aa43c328
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md


Function EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %222 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %226 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %230 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %370 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %374 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %378 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %382 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function _seqHMM_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_estimate_coefs
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logSumExp
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_varcoef
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbi
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbix
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function estimate_coefs(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double>, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %154 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %38 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %80 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %84 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %90 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %94 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %98 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %266 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %271 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %276 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %401 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %406 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %397 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %411 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %38 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %88 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %94 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %98 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %362 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %457 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %584 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %298 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %414 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %529 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbi(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %125 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %129 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbix(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %184 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %180 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
