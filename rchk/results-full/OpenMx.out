Package OpenMx version 2.16.0
Package built using 77770/R 4.0.0; x86_64-pc-linux-gnu; 2020-02-04 13:33:00 UTC; unix   
Checked with rchk version 490627e4fb8e93244230dbbd61455730aa43c328
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md


Function BA81Expect::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxExpectationBA81.cpp:364

Function ComputeBootstrap::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4243

Function ComputeBootstrap::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4115

Function ComputeCI::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1534

Function ComputeCI::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:692

Function ComputeCI::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1585

Function ComputeCheckpoint::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:5455

Function ComputeEM::MengRubinFamily(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3315

Function ComputeEM::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2828

Function ComputeEM::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3370

Function ComputeGenSA::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1942

Function ComputeLoop::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2588

Function ComputeNR::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeNR.cpp:320

Function ComputeReportDeriv::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4023

Function ComputeReportExpectation::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4044

Function ComputeStandardError::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3859

Function ComputeTryCatch::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2416

Function ComputeTryH::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1643

Function MLFitState::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxMLFitFunction.cpp:302

Function MxRList::add(char const*, SEXPREC*)
  [UP] ignoring variable rkey as it has address taken, results will be incomplete 
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:432

Function MxRList::asR()
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:339

Function ProtectAutoBalanceDoodad::~ProtectAutoBalanceDoodad()
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete OpenMx/src/./omxDefines.h:491
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete OpenMx/src/./omxDefines.h:491

Function ProtectedSEXP::ProtectedSEXP(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:462

Function ProtectedSEXP::~ProtectedSEXP()
  [PB] has negative depth OpenMx/src/./omxDefines.h:468
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete OpenMx/src/./omxDefines.h:468
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:469

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RelationalRAMExpectation::independentGroup::exportInternalState(MxRList&, MxRList&)
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2340

Function RelationalRAMExpectation::independentGroup::prep(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:1604

Function RelationalRAMExpectation::state::exportInternalState(MxRList&)
  [UP] ignoring variable fk1 as it has address taken, results will be incomplete 
  [UP] ignoring variable hmean as it has address taken, results will be incomplete 
  [UP] ignoring variable numKids as it has address taken, results will be incomplete 
  [UP] ignoring variable parent1 as it has address taken, results will be incomplete 
  [UP] ignoring variable qrf as it has address taken, results will be incomplete 
  [UP] ignoring variable row as it has address taken, results will be incomplete 
  [UP] ignoring variable rset as it has address taken, results will be incomplete 
  [UP] ignoring variable rscale as it has address taken, results will be incomplete 
  [UP] ignoring variable ugroup as it has address taken, results will be incomplete 
  [UP] ignoring variable numJoins as it has address taken, results will be incomplete 
  [UP] ignoring variable skipMean as it has address taken, results will be incomplete 
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2401

Function RelationalRAMExpectation::state::simulate(FitContext*, MxRList&)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2121

Function ScopedProtect::ScopedProtect(SEXPREC*&, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:443

Function ScopedProtect::~ScopedProtect()
  [PB] has negative depth OpenMx/src/./omxDefines.h:449
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete OpenMx/src/./omxDefines.h:449
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:450

Function makeFactor(SEXPREC*, int, char const**)
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:94

Function omxBackend2(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, bool)
  [UP] unprotected variable Rlb while calling allocating function Rf_allocVector OpenMx/src/glue.cpp:710
  [UP] unprotected variable Rlb while calling allocating function MxRList::add(char const*, SEXPREC*)(?,?,V) OpenMx/src/glue.cpp:711
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:755

Function omxCallAlgebra2(SEXPREC*, SEXPREC*, SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:510

Function omxComputeGD::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:593

Function omxComputeIterate::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2485

Function omxComputeNM::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeNM.cpp:514

Function omxComputeNumericDeriv::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:544

Function omxComputeNumericDeriv::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:339

Function omxComputeNumericDeriv::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:564

Function omxComputeOnce::initFromFrontend(omxState*, SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3503

Function omxComputeSequence::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2384

Function omxData::connectDynamicData(omxState*)
  [PB] has possible protection stack imbalance OpenMx/src/omxData.cpp:141

Function omxExportMatrix(omxMatrix*)
  [PB] has possible protection stack imbalance OpenMx/src/omxMatrix.cpp:239

Function omxFIMLFitFunction::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxFIMLFitFunction.cpp:452

Function omxGlobal::omxProcessConfidenceIntervals(SEXPREC*, omxState*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [UP] unprotected variable names while calling allocating function Rf_asChar OpenMx/src/omxImportFrontendState.cpp:403
  [UP] unprotected variable names while calling allocating function Rf_asInteger OpenMx/src/omxImportFrontendState.cpp:404
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:417

Function omxGlobal::omxProcessMxComputeEntities(SEXPREC*, omxState*)
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:195

Function omxProcessCheckpointOptions(SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:311

Function omxState::omxExportResults(MxRList*, FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxExportBackendState.cpp:79

Function omxState::omxProcessConstraints(SEXPREC*, FitContext*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:431
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:433
  [UP] unprotected variable names while calling allocating function Rf_asChar OpenMx/src/omxImportFrontendState.cpp:435
  [UP] unprotected variable names while calling allocating function Rf_warning OpenMx/src/omxImportFrontendState.cpp:438
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:442
  [UP] unprotected variable names while calling allocating function Rf_asInteger OpenMx/src/omxImportFrontendState.cpp:445
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:453

Function omxState::omxProcessMxExpectationEntities(SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:166

Function omxStateSpaceExpectation::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxStateSpaceExpectation.cpp:442

Function omxWLSFitFunction::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxWLSFitFunction.cpp:195

Function readOpts(SEXPREC*, int*, int*)
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:446

Function sparseInvert_wrapper(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:387

Function ssMLFitState::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ssMLFit.cpp:59
