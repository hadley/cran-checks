Package clustermq version 0.8.95
Package built using 78759/R 4.1.0; x86_64-pc-linux-gnu; 2020-07-01 11:42:00 UTC; unix   
Checked with rchk version 490627e4fb8e93244230dbbd61455730aa43c328
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::CppMethod3<ZeroMQ, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, bool>::operator()(ZeroMQ*, SEXPREC**)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Reference_Impl<Rcpp::PreserveStorage>::Reference_Impl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] calling allocating function Rcpp::Rcpp_fast_eval(SEXPREC*, SEXPREC*) with argument allocated using Rcpp::internal::get_Rcpp_namespace() Rcpp/include/Rcpp/Reference.h:63

Function Rcpp::Vector<10, Rcpp::PreserveStorage>::Vector(int const&)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<10, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:130

Function Rcpp::Vector<13, Rcpp::PreserveStorage>::Vector(int const&)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<13, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:130

Function Rcpp::Vector<16, Rcpp::PreserveStorage>::Vector(SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<16, Rcpp::PreserveStorage> >::set__(SEXPREC*) with argument allocated using SEXPREC* Rcpp::r_cast<16>(SEXPREC*) Rcpp/include/Rcpp/vector/Vector.h:74

Function Rcpp::Vector<16, Rcpp::PreserveStorage>::Vector(int const&)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<16, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:130

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::Vector()
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<19, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:57

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::Vector(int const&)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<19, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:130

Function Rcpp::XPtr<Rcpp::CppProperty<ZeroMQ>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::CppProperty<ZeroMQ> >(Rcpp::CppProperty<ZeroMQ>*)), false>::XPtr(Rcpp::CppProperty<ZeroMQ>*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<Rcpp::CppProperty<ZeroMQ>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::CppProperty<ZeroMQ> >(Rcpp::CppProperty<ZeroMQ>*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<Rcpp::Module, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::Module>(Rcpp::Module*)), false>::XPtr(Rcpp::Module*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<Rcpp::Module, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::Module>(Rcpp::Module*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<Rcpp::SignedConstructor<ZeroMQ>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::SignedConstructor<ZeroMQ> >(Rcpp::SignedConstructor<ZeroMQ>*)), false>::XPtr(Rcpp::SignedConstructor<ZeroMQ>*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<Rcpp::SignedConstructor<ZeroMQ>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<Rcpp::SignedConstructor<ZeroMQ> >(Rcpp::SignedConstructor<ZeroMQ>*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<ZeroMQ, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ZeroMQ>(ZeroMQ*)), false>::XPtr(ZeroMQ*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<ZeroMQ, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ZeroMQ>(ZeroMQ*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> >, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> > >(std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> >*)), false>::XPtr(std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> >*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> >, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> > >(std::__1::vector<Rcpp::SignedMethod<ZeroMQ>*, std::__1::allocator<Rcpp::SignedMethod<ZeroMQ>*> >*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<zmq::context_t, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<zmq::context_t>(zmq::context_t*)), false>::XPtr(zmq::context_t*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<zmq::context_t, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<zmq::context_t>(zmq::context_t*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::XPtr<zmq::socket_t, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<zmq::socket_t>(zmq::socket_t*)), false>::XPtr(zmq::socket_t*, bool, SEXPREC*, SEXPREC*)
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::XPtr<zmq::socket_t, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<zmq::socket_t>(zmq::socket_t*)), false> >::set__(SEXPREC*) with argument allocated using R_MakeExternalPtr Rcpp/include/Rcpp/XPtr.h:102

Function Rcpp::class_<ZeroMQ>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ZeroMQ::receive(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, bool)
  [UP] ignoring variable ans as it has address taken, results will be incomplete 

Function ZeroMQ::send(SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, bool)
  [UP] ignoring variable data as it has address taken, results will be incomplete 

Function _ZN4Rcpp6VectorILi13ENS_15PreserveStorageEEC2IlEET_PNS_6traits9enable_ifIXsr6traits13is_arithmeticIS4_EE5valueEvE4typeE
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<13, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:125

Function _ZN4Rcpp6VectorILi16ENS_15PreserveStorageEEC2ImEET_PNS_6traits9enable_ifIXsr6traits13is_arithmeticIS4_EE5valueEvE4typeE
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<16, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:125

Function _ZN4Rcpp6VectorILi19ENS_15PreserveStorageEEC2IlEET_PNS_6traits9enable_ifIXsr6traits13is_arithmeticIS4_EE5valueEvE4typeE
  [UP] calling allocating function Rcpp::PreserveStorage<Rcpp::Vector<19, Rcpp::PreserveStorage> >::set__(SEXPREC*)(?,V) with argument allocated using Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:125

Function _clustermq_init_context
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _clustermq_init_socket
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _clustermq_poll_socket
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _clustermq_receive_multipart
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _clustermq_receive_socket
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function receive_multipart(SEXPREC*, bool, bool)
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable ans as it has address taken, results will be incomplete 

Function receive_socket(SEXPREC*, bool, bool)
  [UP] ignoring variable ans as it has address taken, results will be incomplete 

Function send_socket(SEXPREC*, SEXPREC*, bool, bool)
  [UP] ignoring variable data as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
