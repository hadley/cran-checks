Package PoweR version 1.0.7
Package built using 76403/R 3.7.0; x86_64-pc-linux-gnu; 2019-04-17 13:39:35 UTC; unix   
Checked with rchk version 8de4e6e0566199e4662b2716e5acf000dd84f60b
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back_name__impl(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::traits::integral_constant<bool, true>)
  [UP] unprotected variable names while calling allocating function Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:684

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] calling allocating function Rcpp::Rcpp_fast_eval(SEXPREC*, SEXPREC*) with argument allocated using Rf_lang2 Rcpp/include/Rcpp/r_cast.h:34

Function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::set(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function RcppFaddeeva_Dawson
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RcppFaddeeva_Faddeeva_w
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RcppFaddeeva_erf
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RcppFaddeeva_erfc
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RcppFaddeeva_erfcx
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RcppFaddeeva_erfi
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function compquantRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function gensampleRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function gensampleRcpp2
  [UP] ignoring variable <unnamed var:   %145 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %156 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %167 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %178 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %132 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function matrixpvalMCRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function matrixpvalRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function powcompeasyRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function powcompfastRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function statcomputeRcpp
  [UP] ignoring variable __result as it has address taken, results will be incomplete 

Function statcomputeRcpp2
  [UP] ignoring variable critvalL as it has address taken, results will be incomplete 
  [UP] ignoring variable critvalR as it has address taken, results will be incomplete 
  [UP] ignoring variable ech as it has address taken, results will be incomplete 
  [UP] ignoring variable levels as it has address taken, results will be incomplete 
  [UP] ignoring variable usecrit as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
