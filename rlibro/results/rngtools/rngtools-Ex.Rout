
R Under development (unstable) (2018-01-28 r74177) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rngtools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rngtools')
Loading required package: pkgmaker
Loading required package: registry

Attaching package: ‘pkgmaker’

The following objects are masked from ‘package:base’:

    isFALSE, isNamespaceLoaded

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RNGseed")
> ### * RNGseed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RNGseed
> ### Title: Directly Getting or Setting the RNG Seed
> ### Aliases: RNGrecovery RNGseed
> 
> ### ** Examples
> 
> # get current seed
> RNGseed()
> # directly set seed
> old <- RNGseed(c(401L, 1L, 1L))
> # show old/new seed description
> showRNG(old)
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> showRNG()
# RNG kind:  Marsaglia-Multicarry / Inversion 
# RNG state: 401L, 1L, 1L 
> 
> # set bad seed
> RNGseed(2:3)
> try( showRNG() )
Error in value[[3L]](cond) : 
  Could not show RNG due to error: setRNG - Invalid numeric seed [2, 3]: '.Random.seed' has wrong length.
> # recover from bad state
> RNGrecovery()
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -325092206L [6b9b92cc9debdb741d96ff4ef849aa33] 
> 
> # example of backup/restore of RNG in functions
> f <- function(){
+ 	orng <- RNGseed()
+  on.exit(RNGseed(orng))
+ 	RNGkind('Marsaglia')
+ 	runif(10)
+ }
> 
> sample(NA)
[1] NA
> s <- .Random.seed
> f()
 [1] 0.9465679 0.6266111 0.3896875 0.3947692 0.1071452 0.7840478 0.3223734
 [8] 0.2288971 0.7144534 0.5210440
> identical(s, .Random.seed)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(s, .Random.seed)) 
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("RNGseq")
> ### * RNGseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RNGseq
> ### Title: Generate Sequence of Random Streams
> ### Aliases: RNGseq RNGseq_seed
> 
> ### ** Examples
> 
> RNGseq(3)
[[1]]
[1]         407 -1535484873  1222746892  1963142301   158053050 -1240755981
[7]  -292394600

[[2]]
[1]         407  -301255468 -1034264016   959782055 -1015092498  -999580337
[7]   459156296

[[3]]
[1]         407  -754318448 -1267835184   106221966 -1446449372  -453071442
[7]   113485020

> RNGseq(3)
[[1]]
[1]         407  1783157529 -1574809594  -477076785  -227368252 -1697363211
[7]   247691058

[[2]]
[1]         407  -790460729  -117672945  -706999217   240560823   330037177
[7] -1105462588

[[3]]
[1]         407 -1065638036 -1638218001 -2046351377   861987369 -1872878618
[7] -1823200145

> RNGseq(3, seed=123)
[[1]]
[1]         407   642048078    81368183 -2093158836   506506973  1421492218
[7] -1906381517

[[2]]
[1]         407  1340772676 -1389246211  -999053355  -953732024  1888105061
[7]  2010658538

[[3]]
[1]         407 -1318496690  -948316584   683309249  -990823268 -1895972179
[7]  1275914972

> # or identically
> set.seed(123)
> identical(RNGseq(3), RNGseq(3, seed=123))
[1] TRUE
> ## Don't show: 
> set.seed(123)
> stopifnot( identical(RNGseq(3), RNGseq(3, seed=123)) )
> ## End(Don't show)
> 
> RNGseq(3, seed=1:6, verbose=TRUE)
# Original RNG: Mersenne-Twister - Inversion [403, 1, 515190382, 2133433928, 917665867, 1283494313, 1101294840, ...]
# Directly use 6-long seed: 1, 2, 3, 4, 5, 6 ... OK
# Seed RNGkind is: L'Ecuyer-CMRG - Inversion [407, 1, 2, 3, 4, 5, 6]
# Restoring RNG: Mersenne-Twister - Inversion [403, 1, 515190382, 2133433928, 917665867, 1283494313, 1101294840, ...]
[[1]]
[1] 407   1   2   3   4   5   6

[[2]]
[1]         407  -447371532   542750874  -935969228  -269326340   701604884
[7] -1748056907

[[3]]
[1]         407   311773008 -1393648596   433058656  -545474683  2059732357
[7]   994549473

> # select Normal kind
> RNGseq(3, seed=123, normal.kind="Ahrens")
[[1]]
[1]         107   642048078    81368183 -2093158836   506506973  1421492218
[7] -1906381517

[[2]]
[1]         107  1340772676 -1389246211  -999053355  -953732024  1888105061
[7]  2010658538

[[3]]
[1]         107 -1318496690  -948316584   683309249  -990823268 -1895972179
[7]  1275914972

> ## generate a seed for RNGseq
> # random
> RNGseq_seed()
[1]        407 -770194214  920761491  494670008 -102057127 -942372026 1535907087
> RNGseq_seed()
[1]         407    82000378 -1377755341  -888237352  -352809223  1464214118
[7] -1790002769
> RNGseq_seed(NULL)
[1]         407  1285013706  -887512125 -1801713112  -140498423 -1754456522
[7]  -350228673
> # fixed
> RNGseq_seed(1)
[1]         407 -1535484873  1222746892  1963142301   158053050 -1240755981
[7]  -292394600
> RNGseq_seed(1:6)
[1] 407   1   2   3   4   5   6
> 
> # `RNGseq_seed(1)` is identical to
> set.seed(1)
> s <- RNGseq_seed()
> identical(s, RNGseq_seed(1))
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(s, RNGseq_seed(1))) 
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:parallel’

> nameEx("RNGstr")
> ### * RNGstr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RNGstr
> ### Title: Formatting RNG Information
> ### Aliases: RNGdigest RNGinfo RNGstr RNGtype showRNG
> 
> ### ** Examples
> 
> # default is a 626-long integer
> RNGstr()
[1] "403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca]"
> # what would be the seed after seeding with set.seed(1234)
> RNGstr(1234)
[1] "403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548]"
> # another RNG (short seed)
> RNGstr(c(401L, 1L, 1L))
[1] "401L, 1L, 1L"
> # no validity check is performed
> RNGstr(2:3)
[1] "2L, 3L"
> # get RNG type
> RNGtype()
[1] "Mersenne-Twister" "Inversion"       
> RNGtype(provider=TRUE)
[1] "Mersenne-Twister" "Inversion"        "base"            
> RNGtype(1:3)
[1] "Marsaglia-Multicarry"   "Buggy Kinderman-Ramage"
> 
> # type from encoded RNG kind
> RNGtype(107L)
[1] "L'Ecuyer-CMRG" "Ahrens-Dieter"
> # this is different from the following which treats 107 as a seed for set.seed
> RNGtype(107)
[1] "Mersenne-Twister" "Inversion"       
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> # as after set.seed(1234)
> showRNG(1234)
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> set.seed(1234)
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> # direct seeding
> showRNG(1:3)
# RNG kind:  Marsaglia-Multicarry / Buggy Kinderman-Ramage 
# RNG state: 1L, 2L, 3L 
> # this does not change the current RNG
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> showRNG(provider=TRUE)
# RNG kind:  Mersenne-Twister / Inversion [base] 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> # get info as a list
> RNGinfo()
$kind
[1] "Mersenne-Twister"

$normal
[1] "Inversion"

> RNGinfo(provider=TRUE)
$kind
[1] "Mersenne-Twister"

$normal
[1] "Inversion"

$provider
[1] "base"

> # from encoded RNG kind
> RNGinfo(107)
$kind
[1] "Mersenne-Twister"

$normal
[1] "Inversion"

> # compute digest hash from RNG settings
> RNGdigest()
[1] "eacb7c1288e03421d428feb736099548"
> RNGdigest(1234)
[1] "eacb7c1288e03421d428feb736099548"
> # no validity check is performed
> RNGdigest(2:3)
[1] "9d1bafcc4a1a18040eb8ba710712e25c"
> 
> 
> 
> cleanEx()
> nameEx("rng")
> ### * rng
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getRNG
> ### Title: Getting/Setting RNGs
> ### Aliases: getRNG .getRNG getRNG1 getRNG1,ANY-method getRNG1-methods
> ###   .getRNG,ANY-method .getRNG,list-method .getRNG-methods
> ###   .getRNG,missing-method .getRNG,numeric-method hasRNG nextRNG setRNG
> ###   .setRNG .setRNG,character-method .setRNG-methods
> ###   .setRNG,numeric-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> # get current RNG settings
> s <- getRNG()
> head(s)
[1]        403        624 -169270483 -442010614 -603558397 -222347416
> showRNG(s)
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> 
> # get RNG from a given single numeric seed
> s1234 <- getRNG(1234)
> head(s1234)
[1]         403         624 -1394370482 -1723143049  2071488076  1659356893
> showRNG(s1234)
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> # this is identical to the RNG seed as after set.seed()
> set.seed(1234)
> identical(s1234, .Random.seed)
[1] TRUE
> # but if num.ok=TRUE the object is returned unchanged
> getRNG(1234, num.ok=TRUE)
[1] 1234
> 
> # single integer RNG data = encoded kind
> head(getRNG(1L))
[1] 1
> 
> # embedded RNG data
> s <- getRNG(list(1L, rng=1234))
> identical(s, s1234)
[1] FALSE
> # test for embedded RNG data
> hasRNG(1)
[1] FALSE
> hasRNG( structure(1, rng=1:3) )
[1] TRUE
> hasRNG( list(1, 2, 3) )
[1] FALSE
> hasRNG( list(1, 2, 3, rng=1:3) )
[1] TRUE
> hasRNG( list(1, 2, 3, noise=list(1:3, rng=1)) )
[1] TRUE
> head(nextRNG())
[1]        403          1 1407173775  141192598  911446336 1689480195
> head(nextRNG(1234))
[1]         403         624 -1394370482 -1723143049  2071488076  1659356893
> head(nextRNG(1234, ndraw=10))
[1]        403         10 1407173775  141192598  911446336 1689480195
> obj <- list(x=1000, rng=123)
> setRNG(obj)
> rng <- getRNG()
> runif(10)
 [1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673 0.0455565 0.5281055
 [8] 0.8924190 0.5514350 0.4566147
> set.seed(123)
> rng.equal(rng)
[1] TRUE
> # set RNG kind
> old <- setRNG('Marsaglia')
> # restore
> setRNG(old)
> # directly set .Random.seed
> rng <- getRNG()
> r <- runif(10)
> setRNG(rng)
> rng.equal(rng)
[1] TRUE
> 
> # initialise from a single number (<=> set.seed)
> setRNG(123)
> rng <- getRNG()
> runif(10)
 [1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673 0.0455565 0.5281055
 [8] 0.8924190 0.5514350 0.4566147
> set.seed(123)
> rng.equal(rng)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("rngtools")
> ### * rngtools
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rngtools
> ### Title: Utility functions for working with Random Number Generators
> ### Aliases: rngtools rngtools-package
> 
> ### ** Examples
> 
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> s <- getRNG()
> RNGstr(s)
[1] "403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca]"
> RNGtype(s)
[1] "Mersenne-Twister" "Inversion"       
> 
> # get what would be the RNG seed after set.seed
> s <- nextRNG(1234)
> showRNG(s)
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -1896522223L [eacb7c1288e03421d428feb736099548] 
> showRNG( nextRNG(1234, ndraw=10) )
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 10L, ..., 467264024L [b9a4fab9a7ad828dbffae696eef6a31a] 
> 
> # change of RNG kind
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -689249108L [cef01dbe1258a11c26c5883c22388cca] 
> k <- RNGkind()
> k[2L] <- 'Ahrens'
> try( RNGkind(k) )
Error in RNGkind(k) : 
  'kind' must be a character string of length 1 (RNG to be used).
> setRNG(k)
> showRNG()
# RNG kind:  Mersenne-Twister / Ahrens-Dieter 
# RNG state: 103L, 624L, ..., -1028000697L [804c3d63d8c90fff7a049eda9f13870b] 
> # set encoded kind
> setRNG(501L)
> showRNG()
# RNG kind:  Marsaglia-Multicarry / Kinderman-Ramage 
# RNG state: 501L, 1708470665L, 302789040L 
> 
> # use as set seed
> setRNG(1234)
> showRNG()
# RNG kind:  Marsaglia-Multicarry / Kinderman-Ramage 
# RNG state: 501L, -305777535L, -1394370482L 
> r <- getRNG()
> 
> # extract embedded RNG specifications
> runif(10)
 [1] 0.02611692 0.29453091 0.31486926 0.41448683 0.88493737 0.33931239
 [7] 0.43921381 0.30835479 0.62447131 0.05536673
> setRNG(list(1, rng=1234))
> rng.equal(r)
[1] TRUE
> 
> # restore default RNG (e.g., after errors)
> RNGrecovery()
> showRNG()
# RNG kind:  Mersenne-Twister / Inversion 
# RNG state: 403L, 624L, ..., -325092206L [6b9b92cc9debdb741d96ff4ef849aa33] 
> 
> 
> 
> cleanEx()
> nameEx("uchecks")
> ### * uchecks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkRNG
> ### Title: Checking RNG Differences in Unit Tests
> ### Aliases: checkRNG
> 
> ### ** Examples
> 
> # check for differences in RNG
> set.seed(123)
> checkRNG(123)
Using RUnit framework provider: RUnit
[1] TRUE
> try( checkRNG(123, 123) )
[1] TRUE
> try( checkRNG(123, 1:3) )
Error in checkTrue(rng.equal(x, y), ...) : Test not TRUE

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:RUnit’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.42 0.016 0.438 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
