
R Under development (unstable) (2018-01-02 r74022) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "atsd"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('atsd')
Set connection parameters from the configuration file /homero/tomas/cran/rlibro/lib/atsd/connection.config> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_entities")
> ### * get_entities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_entities
> ### Title: Get information about entities from Axibase Time-Series
> ###   Database.
> ### Aliases: get_entities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # get all entities and include all their tags in the data frame
> ##D get_entities()
> ##D 
> ##D # get all active entities and include all their tags in the data frame
> ##D get_entities(active = "true")
> ##D 
> ##D # Get the top 2 entities whose 'name'  and user-defined entity tag, 'app',
> ##D # match to the expression. Include the tag, 'app', into response
> ##D # and exclude oter user-defined entity tags.
> ##D get_entities(expression = "name like 'nur*' and lower(tags.app) like '*hbase*'",
> ##D              tags = "app", limit = 2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_metrics")
> ### * get_metrics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_metrics
> ### Title: Get information about metrics from Axibase Time-Series Database.
> ### Aliases: get_metrics
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # get all metrics and include all their tags in the data frame
> ##D get_metrics()
> ##D 
> ##D # get the top 100 active metrics which have tag, 'table',
> ##D # include this tag into response and exclude oter user-defined metric tags
> ##D get_metrics(expression = "tags.table != ''", active = "true",
> ##D             tags = "table", limit = 100)
> ##D 
> ##D # get metrics which have user-defined metric tag, 'table',
> ##D # and whose name starts with 'cpu'
> ##D get_metrics(expression = "name like 'cpu*' and tags.table != ''")
> ##D 
> ##D # more complitcated expressions
> ##D get_metrics(expression = "likeAll(name, list('*disk*,*use*'))")
> ##D get_metrics(expression = "(name like 'cpu*' or tags.source = '') and tags.table like 'BC*'")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("query")
> ### * query
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: query
> ### Title: Fetch time-series historic data or forecasts from Axibase
> ###   Time-Series Database.
> ### Aliases: query
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create data frame which contains time series for the given metric
> ##D # and all entities for the last 1 hour.
> ##D dfr <- query(metric = "disk_used_percent", selection_interval = "1-Hour")
> ##D 
> ##D dfr <- query( export_type = "Forecast",
> ##D               metric = "disk_used_percent",
> ##D               entity_group = "Linux",
> ##D               tags = c("mount_point=/boot", "file_system=/dev/sda1"),
> ##D               selection_interval = "1-Week",
> ##D               aggregate_statistics = c("Avg", "Min", "Max"),
> ##D               aggregate_interval = "1-Minute",
> ##D               interpolation = "Linear")
> ##D 
> ##D # Example of the end_time argument usage.
> ##D dfr <- query( metric = "cpu_usage",
> ##D               entity = "host-383",
> ##D               selection_interval = "1-Day",
> ##D               end_time = "date('2015-02-10 10:15:03')")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("save_connection")
> ### * save_connection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_connection
> ### Title: Write connection parameters to configuration file.
> ### Aliases: save_connection
> 
> ### ** Examples
> 
> # Write the current values of the connection parameters to the configuration file
> save_connection()
Warning in writeLines(l, fileConn) :
  cannot open file '/homero/tomas/cran/rlibro/lib/atsd/connection.config': Read-only file system
Error in writeLines(l, fileConn) : cannot open the connection
Calls: save_connection -> writeLines
Execution halted
