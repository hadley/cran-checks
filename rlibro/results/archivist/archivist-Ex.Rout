
R Under development (unstable) (2018-03-02 r74345) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "archivist"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('archivist')
Welcome to archivist (version: 2.3).
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Tags")
> ### * Tags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Tags
> ### Title: Tags
> ### Aliases: Tags
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # examples
> ##D # data.frame object
> ##D data(iris)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(repoDir = exampleRepoDir)
> ##D saveToLocalRepo( iris, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, deleteRoot=TRUE )
> ##D 
> ##D # ggplot/gg object
> ##D library(ggplot2)
> ##D df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30))
> ##D library(plyr)
> ##D ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
> ##D myplot123 <- ggplot(df, aes(x = gp, y = y)) +
> ##D   geom_point() +  geom_point(data = ds, aes(y = mean),
> ##D                              colour = 'red', size = 3)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( myplot123, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, deleteRoot=TRUE )
> ##D 
> ##D # lm object
> ##D model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, 
> ##D            data= iris)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D asave( model, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # agnes (twins) object
> ##D library(cluster)
> ##D data(votes.repub)
> ##D agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( agn1, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # fanny (partition) object
> ##D x <- rbind(cbind(rnorm(10, 0, 0.5), rnorm(10, 0, 0.5)),
> ##D           cbind(rnorm(15, 5, 0.5), rnorm(15, 5, 0.5)),
> ##D           cbind(rnorm( 3,3.2,0.5), rnorm( 3,3.2,0.5)))
> ##D fannyx <- fanny(x, 2)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( fannyx, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # lda object
> ##D library(MASS)
> ##D 
> ##D Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
> ##D                    Sp = rep(c("s","c","v"), rep(50,3)))
> ##D train <- c(8,83,115,118,146,82,76,9,70,139,85,59,78,143,68,
> ##D            134,148,12,141,101,144,114,41,95,61,128,2,42,37,
> ##D            29,77,20,44,98,74,32,27,11,49,52,111,55,48,33,38,
> ##D            113,126,24,104,3,66,81,31,39,26,123,18,108,73,50,
> ##D            56,54,65,135,84,112,131,60,102,14,120,117,53,138,5)
> ##D lda1 <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D asave( lda1, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # qda object
> ##D tr <- c(7,38,47,43,20,37,44,22,46,49,50,19,4,32,12,29,27,34,2,1,17,13,3,35,36)
> ##D train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
> ##D cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> ##D qda1 <- qda(train, cl)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( qda1, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D 
> ##D # glmnet object
> ##D library( glmnet )
> ##D 
> ##D zk=matrix(rnorm(100*20),100,20)
> ##D bk=rnorm(100)
> ##D glmnet1=glmnet(zk,bk)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( glmnet1, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # trellis object
> ##D require(stats)
> ##D library( lattice)
> ##D ## Tonga Trench Earthquakes
> ##D 
> ##D Depth <- equal.count(quakes$depth, number=8, overlap=.1)
> ##D xyplot(lat ~ long | Depth, data = quakes)
> ##D update(trellis.last.object(),
> ##D        strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
> ##D        par.strip.text = list(cex = 0.75),
> ##D        aspect = "iso")
> ##D 
> ##D ## Examples with data from `Visualizing Data' (Cleveland, 1993) obtained
> ##D ## from http://cm.bell-labs.com/cm/ms/departments/sia/wsc/
> ##D 
> ##D EE <- equal.count(ethanol$E, number=9, overlap=1/4)
> ##D 
> ##D ## Constructing panel functions on the run; prepanel
> ##D trellis.plot <- xyplot(NOx ~ C | EE, data = ethanol,
> ##D                        prepanel = function(x, y) prepanel.loess(x, y, span = 1),
> ##D                        xlab = "Compression Ratio", ylab = "NOx (micrograms/J)",
> ##D                        panel = function(x, y) {
> ##D                          panel.grid(h = -1, v = 2)
> ##D                          panel.xyplot(x, y)
> ##D                          panel.loess(x, y, span=1)
> ##D                        },
> ##D                        aspect = "xy")
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( trellis.plot, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # htest object
> ##D 
> ##D x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
> ##D y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
> ##D this.test <- wilcox.test(x, y, paired = TRUE, alternative = "greater")
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( this.test, repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )
> ##D deleteLocalRepo( exampleRepoDir, TRUE )
> ##D 
> ##D # survfit object
> ##D library( survival )
> ##D # Create the simplest test data set 
> ##D test1 <- list(time=c(4,3,1,1,2,2,3), 
> ##D               status=c(1,1,1,0,1,1,0), 
> ##D              x=c(0,2,1,1,1,0,0), 
> ##D              sex=c(0,0,0,0,1,1,1)) 
> ##D # Fit a stratified model 
> ##D myFit <-  survfit( coxph(Surv(time, status) ~ x + strata(sex), test1), data = test1  )
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D saveToLocalRepo( myFit , repoDir=exampleRepoDir )
> ##D showLocalRepo( exampleRepoDir, "tags" )[,-3]
> ##D deleteLocalRepo( exampleRepoDir, TRUE)
> ##D 
> ##D # origin of the artifacts stored as a name - chaining code
> ##D library(dplyr)
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir )
> ##D data("hflights", package = "hflights")
> ##D hflights %>%
> ##D   group_by(Year, Month, DayofMonth) %>%
> ##D   select(Year:DayofMonth, ArrDelay, DepDelay) %>%
> ##D   saveToLocalRepo( exampleRepoDir, value = TRUE ) %>%
> ##D   # here the artifact is stored but chaining is not finished
> ##D   summarise(
> ##D     arr = mean(ArrDelay, na.rm = TRUE),
> ##D     dep = mean(DepDelay, na.rm = TRUE)
> ##D   ) %>%
> ##D   filter(arr > 30 | dep > 30) %>%
> ##D   saveToLocalRepo( exampleRepoDir ) 
> ##D   # chaining code is finished and after last operation the 
> ##D   # artifact is stored
> ##D showLocalRepo( exampleRepoDir, "tags" )[,-3]
> ##D showLocalRepo( exampleRepoDir )
> ##D deleteLocalRepo( exampleRepoDir, TRUE)
> ##D 
> ##D rm( exampleRepoDir )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("addHooksToPrint")
> ### * addHooksToPrint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addHooksToPrint
> ### Title: Add 'archivist' Hooks to 'rmarkdown' Reports
> ### Aliases: addHooksToPrint
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # only in Rmd report, links to github repository
> ##D addHooksToPrint(class="ggplot", repoDir = "arepo",
> ##D repo="graphGallery", user="pbiecek")
> ##D # only in Rmd report, links to local files
> ##D addHooksToPrint(class="ggplot", repoDir = "arepo",
> ##D repo=NULL)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("addTagsRepo")
> ### * addTagsRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addTagsRepo
> ### Title: Add new Tags to the Existing Repository
> ### Aliases: addTagsRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ## We Take all artifacts of lm class from repository, 
> ##D ## extract R^2 for them and store as R^2:number Tags
> ##D 
> ##D # Creating empty repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(exampleRepoDir, force=TRUE)
> ##D 
> ##D # Saving lm artifacts into repository
> ##D m1 <- lm(Sepal.Length~Species, iris)
> ##D saveToLocalRepo(m1, exampleRepoDir)
> ##D m2 <- lm(Sepal.Width~Species, iris)
> ##D saveToLocalRepo(m2, exampleRepoDir)
> ##D 
> ##D # We may see what kind of Tags are related to "m1" artifact corresponding to
> ##D # "9e66edd297c2f291446f3503c01d443a" md5hash
> ##D getTagsLocal("9e66edd297c2f291446f3503c01d443a", exampleRepoDir, "")
> ##D 
> ##D # We may see what kind of Tags are related to "m2" artifact corresponding to
> ##D # "da1bcaf68752c146903f700c1a458438" md5hash
> ##D getTagsLocal("da1bcaf68752c146903f700c1a458438", exampleRepoDir, "")
> ##D 
> ##D # We Take all objects of lm class from repository
> ##D md5hashes <- searchInLocalRepo(repoDir=exampleRepoDir, "class:lm")
> ##D 
> ##D # Adding new tag "test" explicitly
> ##D addTagsRepo(md5hashes, exampleRepoDir, tags = "test")
> ##D 
> ##D # Adding new tag "R^2: " using FUN parameter
> ##D addTagsRepo(md5hashes, exampleRepoDir, function(x) paste0("R^2:",summary(x)$r.square))
> ##D 
> ##D # And now: Tags related to "m1" artifact are
> ##D getTagsLocal("9e66edd297c2f291446f3503c01d443a", exampleRepoDir, "")
> ##D 
> ##D # And now: Tags related to "m2" artifact are
> ##D getTagsLocal("da1bcaf68752c146903f700c1a458438", exampleRepoDir, "")
> ##D 
> ##D # One more look at our Repo
> ##D showLocalRepo(exampleRepoDir, method = "tags")
> ##D 
> ##D # Deleting example repository
> ##D deleteLocalRepo(exampleRepoDir, deleteRoot=TRUE)
> ##D rm(exampleRepoDir)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("aformat")
> ### * aformat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aformat
> ### Title: Show Artifact's List of Foramts
> ### Aliases: aformat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D setLocalRepo(system.file("graphGallery", package = "archivist"))
> ##D aformat("2a6e492cb6982f230e48cf46023e2e4f")
> ##D 
> ##D # old
> ##D aformat("pbiecek/graphGallery/2a6e492cb6982f230e48cf46023e2e4f")
> ##D # png
> ##D aformat("pbiecek/graphGallery/7f3453331910e3f321ef97d87adb5bad")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ahistory")
> ### * ahistory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ahistory
> ### Title: Show Artifact's History
> ### Aliases: ahistory
> 
> ### ** Examples
> 
> 
> createLocalRepo("ahistory_check", default = TRUE)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> iris %a%
+ filter(Sepal.Length < 6) %a%
+  lm(Petal.Length~Species, data=.) %a%
+  summary() -> artifact
>  
> ahistory(artifact)
   iris                                  [ff575c261c949d073b2895b05d1097c3]
-> filter(Sepal.Length < 6)              [d3696e13d15223c7d0bbccb33cc20a11]
-> lm(Petal.Length ~ Species, data = .)  [990861c7c27812ee959f10e5f76fe2c3]
-> summary()                             [050e41ec3bc40b3004bc6bdd356acae7]
> ahistory(artifact, format = "kable")  
|   |call                                 |md5hash                          |
|:--|:------------------------------------|:--------------------------------|
|4  |iris                                 |ff575c261c949d073b2895b05d1097c3 |
|3  |filter(Sepal.Length < 6)             |d3696e13d15223c7d0bbccb33cc20a11 |
|2  |lm(Petal.Length ~ Species, data = .) |990861c7c27812ee959f10e5f76fe2c3 |
|1  |summary()                            |050e41ec3bc40b3004bc6bdd356acae7 |
> print(ahistory(artifact, format = "kable"), format = "latex")

\begin{tabular}{l|l|l}
\hline
  & call & md5hash\\
\hline
4 & iris & ff575c261c949d073b2895b05d1097c3\\
\hline
3 & filter(Sepal.Length < 6) & d3696e13d15223c7d0bbccb33cc20a11\\
\hline
2 & lm(Petal.Length \textasciitilde{} Species, data = .) & 990861c7c27812ee959f10e5f76fe2c3\\
\hline
1 & summary() & 050e41ec3bc40b3004bc6bdd356acae7\\
\hline
\end{tabular}
> ahistory(artifact, format = "kable", alink = TRUE, repoDir = "ahistory_check",
+ repo = "repo", user = "user")
|   |call                                 |md5hash                                                                                                                             |
|:--|:------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------|
|4  |iris                                 |[ff575c261c949d073b2895b05d1097c3](https://raw.githubusercontent.com/user/repo/master/gallery/ff575c261c949d073b2895b05d1097c3.rda) |
|3  |filter(Sepal.Length < 6)             |[d3696e13d15223c7d0bbccb33cc20a11](https://raw.githubusercontent.com/user/repo/master/gallery/d3696e13d15223c7d0bbccb33cc20a11.rda) |
|2  |lm(Petal.Length ~ Species, data = .) |[990861c7c27812ee959f10e5f76fe2c3](https://raw.githubusercontent.com/user/repo/master/gallery/990861c7c27812ee959f10e5f76fe2c3.rda) |
|1  |summary()                            |[050e41ec3bc40b3004bc6bdd356acae7](https://raw.githubusercontent.com/user/repo/master/gallery/050e41ec3bc40b3004bc6bdd356acae7.rda) |
> 
> 
> repoDir <- file.path(getwd(), "ahistory_check")
> deleteLocalRepo(repoDir, deleteRoot = TRUE)
> aoptions('repoDir', NULL, unset = TRUE)
NULL
> 
> 
> 
> 
> cleanEx()

detaching ‘package:bindrcpp’, ‘package:dplyr’

> nameEx("alink")
> ### * alink
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alink
> ### Title: Return a Link To Download an Artifact Stored on Remote
> ###   Repository
> ### Aliases: alink
> 
> ### ** Examples
> 
> # link in markdown format
> alink('pbiecek/archivist/134ecbbe2a8814d98f0c2758000c408e')
[`archivist::aread('pbiecek/archivist/134ecbbe2a8814d98f0c2758000c408e')`](https://raw.githubusercontent.com/pbiecek/archivist/master/gallery/134ecbbe2a8814d98f0c2758000c408e.rda)> # link in markdown format with additional subdir
> alink(user='BetaAndBit',repo='PieczaraPietraszki',
+      md5hash = '1569cc44e8450439ac52c11ccac35138', 
+      subdir = 'UniwersytetDzieci/arepo')
[`archivist::aread('BetaAndBit/PieczaraPietraszki/UniwersytetDzieci/arepo/1569cc44e8450439ac52c11ccac35138')`](https://raw.githubusercontent.com/BetaAndBit/PieczaraPietraszki/master/UniwersytetDzieci/arepo/gallery/1569cc44e8450439ac52c11ccac35138.rda)> # link in latex format
> alink(user = 'MarcinKosinski', repo = 'Museum',
+       md5hash = '1651caa499a2b07a3bdad3896a2fc717', format = 'latex')
\href{https://raw.githubusercontent.com/MarcinKosinski/Museum/master/gallery/1651caa499a2b07a3bdad3896a2fc717.rda}{archivist::aread('MarcinKosinski/Museum/1651caa499a2b07a3bdad3896a2fc717')}> # link in raw format
> alink('pbiecek/graphGallery/f5185c458bff721f0faa8e1332f01e0f', rawLink = TRUE)  
https://raw.githubusercontent.com/pbiecek/graphGallery/master/gallery/f5185c458bff721f0faa8e1332f01e0f.rda> alink('pbiecek/graphgallerygit/02af4f99e440324b9e329faa293a9394', repoType='bitbucket')  
[`archivist::aread('pbiecek/graphgallerygit/02af4f99e440324b9e329faa293a9394')`](https://bitbucket.org/pbiecek/graphgallerygit/raw/1aac0cd80e9896889b374ca6747bb6eaf9213e6e/gallery/02af4f99e440324b9e329faa293a9394.rda)> 
> 
> 
> cleanEx()
> nameEx("archivistOptions")
> ### * archivistOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aoptions
> ### Title: Default Options for Archivist
> ### Aliases: aoptions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # data.frame object
> ##D # data(iris)
> ##D 
> ##D 
> ##D ## EXAMPLE 1 : SET default local repository using aoptions() function.
> ##D 
> ##D # creating example repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(exampleRepoDir)
> ##D 
> ##D # "repodDir" parameter in each archivist function will be default and set to exampleRepoDir.
> ##D aoptions(key = "repoDir", value = exampleRepoDir)
> ##D 
> ##D data(iris)
> ##D data(swiss)
> ##D # From this moment repoDir parameter may be ommitted in the following functions
> ##D saveToLocalRepo(iris)
> ##D saveToLocalRepo(swiss) 
> ##D showLocalRepo()
> ##D showLocalRepo(method = "tags")
> ##D zipLocalRepo()
> ##D file.remove(file.path(getwd(), "repository.zip"))
> ##D iris2 <- loadFromLocalRepo( "ff575c2" , value = TRUE)
> ##D searchInLocalRepo("name:i", fixed = F)
> ##D getTagsLocal("ff575c261c949d073b2895b05d1097c3")
> ##D rmFromLocalRepo("4c43f")
> ##D showLocalRepo()
> ##D summaryLocalRepo()
> ##D 
> ##D # REMEMBER that in deleteRepo you MUST specify repoDir parameter!
> ##D # deleteLocalRepo doesn't take setLocalRepo's settings into consideration
> ##D deleteLocalRepo( exampleRepoDir, deleteRoot = TRUE)
> ##D rm( exampleRepoDir )
> ##D 
> ##D ## EXAMPLE 2 : SET default Github repository using aoptions() function.
> ##D aoptions(key = "user", value = "pbiecek")
> ##D aoptions(key = "repo", value = "archivist")
> ##D 
> ##D # From this moment user and repo parameters may be ommitted in the following functions:
> ##D showRemoteRepo() 
> ##D loadFromRemoteRepo( "ff575c261c949d073b2895b05d1097c3")
> ##D this <- loadFromRemoteRepo( "ff", value = T)
> ##D file.remove(file.path(getwd(), "repository.zip")) # We can remove this zip file
> ##D searchInRemoteRepo( "name:", fixed= FALSE)
> ##D getTagsGithub("ff575c261c949d073b2895b05d1097c3")
> ##D summaryRemoteRepo( )
> ##D searchInRemoteRepo( pattern=c("varname:Sepal.Width", "class:lm", "name:myplot123"), 
> ##D                          intersect = FALSE ) 
> ##D ## EXAMPLE 3 : SET default Github repository using aoptions() function.
> ##D showRemoteRepo('Museum', 'MarcinKosinski', subdir = 'ex1')
> ##D aoptions('repo', 'Museum')
> ##D aoptions('user', 'MarcinKosinski')
> ##D aoptions('subdir', 'ex1')
> ##D aoptions('branch', 'master')
> ##D showRemoteRepo()
> ##D showRemoteRepo(subdir = 'ex2')
> ##D 
> ##D aoptions('subdir')
> ##D 
> ##D ## EXAMPLE 4 : SET sha256 as a hasing algorithm
> ##D aoptions("hashFunction", value = "sha256")
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(exampleRepoDir)
> ##D aoptions(key = "repoDir", value = exampleRepoDir)
> ##D 
> ##D data(iris)
> ##D saveToLocalRepo(iris)
> ##D getTagsLocal(digest::digest(iris, algo = "sha256"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("aread")
> ### * aread
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aread
> ### Title: Read Artifacts Given as md5hashes from the Repository
> ### Aliases: aread
> 
> ### ** Examples
> 
> # read the object from local directory
> setLocalRepo(system.file("graphGallery", package = "archivist"))
> pl <- aread("7f3453331910e3f321ef97d87adb5bad")
> # To plot it remember to have ggplot2 in version 2.1.0
> # as this is stated in asession("7f3453331910e3f321ef97d87adb5bad") .
> # The state of R libraries can be restored to the same state in
> # which 7f3453331910e3f321ef97d87adb5bad was created with the restoreLibs function.
> 
> # read the object from Remote
> pl <- aread("pbiecek/graphGallery/7f3453331910e3f321ef97d87adb5bad")
> # To plot it remember to have ggplot2 in version 2.1.0
> # as this is stated in asession("pbiecek/graphGallery/7f3453331910e3f321ef97d87adb5bad") .
> # The state of R libraries can be restored to the same state in
> # which 7f3453331910e3f321ef97d87adb5bad was created with the restoreLibs function.
> 
> 
> 
> cleanEx()
> nameEx("asearch")
> ### * asearch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asearch
> ### Title: Read Artifacts Given as a List of Tags
> ### Aliases: asearch
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ### default LOCAL version
> ##D ## objects preparation
> ##D 
> ##D # data.frame object
> ##D data(iris)
> ##D 
> ##D # ggplot/gg object
> ##D library(ggplot2)
> ##D df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30))
> ##D library(plyr)
> ##D ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
> ##D myplot123 <- ggplot(df, aes(x = gp, y = y)) +
> ##D   geom_point() +  geom_point(data = ds, aes(y = mean),
> ##D                              colour = 'red', size = 3)
> ##D 
> ##D # lm object
> ##D model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, data= iris)
> ##D model2 <- lm(Sepal.Length~ Sepal.Width + Petal.Width, data= iris)
> ##D model3 <- lm(Sepal.Length~ Sepal.Width, data= iris)
> ##D 
> ##D ## creating example default local repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(repoDir = exampleRepoDir)
> ##D ## setting default local repository
> ##D setLocalRepo( repoDir = exampleRepoDir )
> ##D 
> ##D saveToLocalRepo(myplot123)
> ##D saveToLocalRepo(iris)
> ##D saveToLocalRepo(model)
> ##D saveToLocalRepo(model2)
> ##D saveToLocalRepo(model3)
> ##D 
> ##D ## Searching for objects of class:lm
> ##D lm <- asearch(patterns = "class:lm")
> ##D 
> ##D ## Searching for objects of class:lm with coefname:Petal.Width
> ##D lm_c_PW <- asearch(patterns = c("class:lm","coefname:Petal.Width"))
> ##D 
> ##D # Note that we searched for objects. Then loaded them from repository by their value.
> ##D 
> ##D 
> ##D ## deleting example repository
> ##D deleteLocalRepo(repoDir = exampleRepoDir, deleteRoot = TRUE)
> ##D rm(exampleRepoDir)
> ##D 
> ##D ### default GitHub version
> ##D ## Setting default github repository
> ##D setRemoteRepo( user = "pbiecek", repo = "archivist")
> ##D 
> ##D showRemoteRepo(method = "tags")$tag
> ##D searchInRemoteRepo(pattern = "class:lm")
> ##D searchInRemoteRepo(pattern = "class:gg")
> ##D getTagsRemote(md5hash = "cd6557c6163a6f9800f308f343e75e72", tag = "")
> ##D 
> ##D ## Searching for objects of class:lm
> ##D asearch(patterns = c("class:lm"))
> ##D ## Searching for objects of class:gg
> ##D ggplot_objects <- asearch(patterns = c("class:gg"))
> ##D # names(ggplot_objects)
> ##D # To plot them remember to have ggplot2 in version 2.1.0
> ##D # as this is stated in asession("pbiecek/archivist/13b2724139eb2c62578b4dab0d7b2cea") or
> ##D asession("pbiecek/archivist/7f3453331910e3f321ef97d87adb5bad") .
> ##D # The state of R libraries can be restored to the same state in
> ##D # which those objects were created with the restoreLibs function.
> ##D 
> ##D 
> ##D ### Remote version 
> ##D ## Note that repo argument is passed in the following way to asearch:
> ##D ## repo = "GitHub user name/GitHub repository name"
> ##D 
> ##D ## Searching for objects of class:gg
> ##D asearch("pbiecek/graphGallery", 
> ##D         patterns = c("class:gg",
> ##D                      "labelx:Sepal.Length")) -> ggplots_objects_v2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("asession")
> ### * asession
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asession
> ### Title: Show Artifact's Session Info
> ### Aliases: asession
> 
> ### ** Examples
> 
> ## Not run: 
> ##D setLocalRepo(system.file("graphGallery", package = "archivist"))
> ##D asession("2a6e492cb6982f230e48cf46023e2e4f")
> ##D 
> ##D # no session info
> ##D asession("pbiecek/graphGallery/2a6e492cb6982f230e48cf46023e2e4f")
> ##D # nice session info
> ##D asession("pbiecek/graphGallery/7f3453331910e3f321ef97d87adb5bad")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("atrace")
> ### * atrace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: atrace
> ### Title: Add Tracing For All Objects Created By Given Function
> ### Aliases: atrace
> 
> ### ** Examples
> 
> # read the object from local directory
> createLocalRepo("arepo_test", default=TRUE)
> atrace("lm", "z")
Tracing function "lm" in package "stats"
[1] "lm"
> lm(Sepal.Length~Sepal.Width, data=iris)
Tracing lm(Sepal.Length ~ Sepal.Width, data = iris) on exit 

Call:
lm(formula = Sepal.Length ~ Sepal.Width, data = iris)

Coefficients:
(Intercept)  Sepal.Width  
     6.5262      -0.2234  

> asearch("class:lm")
$`42fcf77af2c40f70c445cbba513aeabd`

Call:
lm(formula = Sepal.Length ~ Sepal.Width, data = iris)

Coefficients:
(Intercept)  Sepal.Width  
     6.5262      -0.2234  


> untrace("lm")
Untracing function "lm" in package "stats"
> 
> 
> 
> cleanEx()
> nameEx("cache")
> ### * cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cache
> ### Title: Enable Caching of the Function Results with the use of Archivist
> ### Aliases: cache
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # objects preparation
> ##D library("lubridate")
> ##D cacheRepo <- tempfile()
> ##D createLocalRepo( cacheRepo )
> ##D 
> ##D ## Example 1:
> ##D # cache is useful when objects used by FUN are not that big but calculations
> ##D # are time-comsuming. Take a look at this example:
> ##D fun <- function(n) {replicate(n, summary(lm(Sepal.Length~Species, iris))$r.squared)}
> ##D 
> ##D # let's check time of two evaluations of cache function
> ##D system.time( res <- cache(cacheRepo, fun, 1000) )
> ##D system.time( res <- cache(cacheRepo, fun, 1000) ) 
> ##D # The second call is much faster. Why is it so? Because the result of fun
> ##D # function evaluation has been stored in local cacheRepo during the first evaluation
> ##D # of cache. In the second call of cache we are simply loading the result of fun
> ##D # from local cacheRepo Repository.
> ##D 
> ##D ## Example 2:
> ##D testFun <- function(x) {cat(x);x}
> ##D 
> ##D # testFun will be executed and saved to cacheRepo
> ##D tmp <- cache(cacheRepo, testFun, "Say hallo!")
> ##D 
> ##D # testFun execution will be loaded from repository
> ##D tmp <- cache(cacheRepo, testFun, "Say hallo!")
> ##D 
> ##D # testFun will be executed once again as it fails with expiration date. It will
> ##D # be saved to cacheRepo.
> ##D tmp <- cache(cacheRepo, testFun, "Say hallo!", notOlderThan = now())
> ##D 
> ##D # testFun execution will be loaded from repository as it
> ##D # passes with expiration date [within hour]
> ##D tmp <- cache(cacheRepo, testFun, "Say hallo!", notOlderThan = now() - hours(1))
> ##D 
> ##D deleteLocalRepo( cacheRepo, TRUE)
> ##D rm( cacheRepo )
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("copyToRepo")
> ### * copyToRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copyLocalRepo
> ### Title: Copy an Existing Repository into Another Repository
> ### Aliases: copyLocalRepo copyRemoteRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ## Using archivist remote Repository to copy artifacts
> ##D # creating example Repository
> ##D  
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( exampleRepoDir )
> ##D 
> ##D # Searching for md5hashes of artifacts (without data related to them)
> ##D # in the archivist remote  Repository
> ##D hashes <- searchInRemoteRepo( pattern="name", user="pbiecek", repo="archivist", fixed=FALSE )
> ##D 
> ##D # Copying selected artifacts from archivist Remote  Repository into exampleRepoDir Repository
> ##D 
> ##D copyRemoteRepo( repoTo = exampleRepoDir , md5hashes= hashes, user="pbiecek", repo="archivist" )
> ##D 
> ##D # See how the gallery folder in our exampleRepoDir Repository
> ##D # with copies of artifacts from archivist Remote  Repository looks like
> ##D list.files( path = file.path( exampleRepoDir, "gallery" ) )
> ##D 
> ##D # See how the backpack database in our exampleRepoDir Repository looks like
> ##D showLocalRepo( repoDir = exampleRepoDir )
> ##D 
> ##D # removing an example Repository
> ##D 
> ##D deleteLocalRepo( exampleRepoDir, deleteRoot=TRUE )
> ##D 
> ##D rm( exampleRepoDir )
> ##D 
> ##D # many archivist-like Repositories on one Remote repository
> ##D 
> ##D dir <- paste0(getwd(), "/ex1")
> ##D createLocalRepo( dir )
> ##D copyRemoteRepo( repoTo = dir , md5hashes = "ff575c261c949d073b2895b05d1097c3",
> ##D                 user="MarcinKosinski", repo="Museum",
> ##D                 branch="master", subdir="ex2")
> ##D                 
> ##D # Check if the copied artifact is on our dir Repository
> ##D 
> ##D showLocalRepo( repoDir = dir) # It is in backpack database indeed
> ##D list.files( path = file.path( dir, "gallery" ) ) # it is also in gallery folder
> ##D 
> ##D # removing an example Repository
> ##D deleteLocalRepo( dir, TRUE)
> ##D 
> ##D rm(dir)
> ##D 
> ##D ## Using graphGallery Repository attached to the archivist package to copy artifacts
> ##D 
> ##D # creating example Repository
> ##D 
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( exampleRepoDir )
> ##D 
> ##D # Searching for md5hashes of artifacts (without data related to them)
> ##D # in the graphGallery  Repository
> ##D archivistRepo <- system.file( "graphGallery", package = "archivist")
> ##D # You may use: 
> ##D # hashes <- unique(showLocalRepo(repoDir)[,1]) 
> ##D # to extract all artifacts from repository
> ##D hashes <- searchInLocalRepo( pattern="name",
> ##D                              repoDir =  archivistRepo,
> ##D                              fixed=FALSE )
> ##D 
> ##D # Copying selected artifacts from archivist Remote  Repository into exampleRepoDir Repository
> ##D 
> ##D copyLocalRepo( repoFrom = archivistRepo, repoTo = exampleRepoDir , md5hashes= hashes )
> ##D 
> ##D # See how the backpack database in our exampleRepoDir Repository looks like
> ##D showLocalRepo( repoDir = exampleRepoDir )
> ##D 
> ##D # removing an example Repository
> ##D 
> ##D deleteLocalRepo( exampleRepoDir, deleteRoot=TRUE )
> ##D 
> ##D rm( exampleRepoDir )
> ##D rm( archivistRepo )
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("createEmptyRepo")
> ### * createEmptyRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createLocalRepo
> ### Title: Create an Empty Repository
> ### Aliases: createLocalRepo createPostgresRepo createEmptyRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir, default =  TRUE )
> ##D data(iris)
> ##D saveToLocalRepo(iris)
> ##D showLocalRepo()
> ##D showLocalRepo(method = "tags")
> ##D deleteLocalRepo( repoDir = exampleRepoDir, unset = TRUE, deleteRoot = TRUE)
> ##D 
> ##D # example with external database
> ##D # create a connector
> ##D require("RPostgreSQL")
> ##D drv <- dbDriver("PostgreSQL")
> ##D connector <- function() {
> ##D   dbConnect(drv, dbname = "postgres",
> ##D             host = "localhost", port = 5432,
> ##D             user = "user", password = pw)
> ##D }
> ##D # Now you can create an empty repository with postgress database
> ##D exampleRepoDir <- tempfile()
> ##D createPostgresRepo( repoDir = exampleRepoDir, connector)
> ##D data(iris)
> ##D saveToLocalRepo(iris)
> ##D showLocalRepo()
> ##D showLocalRepo(method = "tags")
> ##D deleteLocalRepo( repoDir = exampleRepoDir, unset = TRUE, deleteRoot = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createMDGallery")
> ### * createMDGallery
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createMDGallery
> ### Title: Create the Summary for Each Artifact in a Markdown Format
> ### Aliases: createMDGallery
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D createMDGallery(user = 'MarcinKosinski', repo = 'Museum',
> ##D  'README_test1.md', addTags = TRUE)
> ##D createMDGallery('graphGallery', 'pbiecek', addMiniature = TRUE,
> ##D  'README_test2.md', addTags = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("deleteLocalRepo")
> ### * deleteLocalRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deleteLocalRepo
> ### Title: Delete the Existing Repository from the Given Directory
> ### Aliases: deleteLocalRepo deleteRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir, default =  TRUE )
> ##D data(iris)
> ##D saveToLocalRepo(iris)
> ##D deleteLocalRepo( repoDir = exampleRepoDir, unset = TRUE, deleteRoot = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("getRemoteHook")
> ### * getRemoteHook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getRemoteHook
> ### Title: Get http Hook for Remote Repo
> ### Aliases: getRemoteHook
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # objects preparation
> ##D getRemoteHook("graphGallery", "pbiecek")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getTags")
> ### * getTags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTagsLocal
> ### Title: Return Tags Corresponding to md5hash
> ### Aliases: getTagsLocal getTagsRemote
> 
> ### ** Examples
> 
> 
> ### Local version
> ## Not run: 
> ##D ## EXAMPLE with pipe operator %a%
> ##D 
> ##D # Creating empty repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( exampleRepoDir )
> ##D 
> ##D library(dplyr)
> ##D data(mtcars)
> ##D setLocalRepo(repoDir = exampleRepoDir)
> ##D hash <- mtcars %a% 
> ##D  group_by(cyl, am) %a%
> ##D    select(mpg, cyl, wt, am) %a%
> ##D      summarise(avgmpg = mean(mpg), avgwt = mean(wt)) %a%
> ##D        filter(avgmpg > 20) %a%
> ##D        saveToRepo( exampleRepoDir )
> ##D        
> ##D showLocalRepo(exampleRepoDir)
> ##D showLocalRepo(exampleRepoDir, method = "tags")
> ##D 
> ##D # We search for a Tag with default "name" regular expression corresponding to 
> ##D # hash md5hash.
> ##D getTagsLocal( md5hash = hash, exampleRepoDir )
> ##D 
> ##D # Deleting example respository
> ##D deleteLocalRepo( exampleRepoDir, TRUE) 
> ##D rm( exampleRepoDir ) 
> ##D 
> ##D ## EXAMPLE with data iris
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( exampleRepoDir )
> ##D 
> ##D data(iris)
> ##D saveToRepo(iris, repoDir = exampleRepoDir )
> ##D showLocalRepo(exampleRepoDir)
> ##D showLocalRepo(exampleRepoDir, method = "tags")
> ##D 
> ##D # We can notice that there is only one md5hash 
> ##D # (and second for archiveSessionInfo) in repo so we will use it
> ##D hash <- showLocalRepo(exampleRepoDir)[1,1]
> ##D 
> ##D # We search for a Tag with "varname" regular expression corresponding to 
> ##D # hash md5hash.
> ##D getTagsLocal( md5hash = hash, exampleRepoDir, tag = "varname" ) 
> ##D # There are 5 different Tags with "varname" regular expression
> ##D 
> ##D # We needn't use the whole expression "varname". We may use its abbreviation
> ##D # and get the same result.
> ##D getTagsLocal( md5hash = hash, exampleRepoDir, tag = "varna" ) 
> ##D 
> ##D deleteLocalRepo( exampleRepoDir, TRUE) 
> ##D rm( exampleRepoDir ) 
> ##D 
> ##D ### Remote version
> ##D ## EXAMPLE: pbiecek archivist repository on GitHub
> ##D 
> ##D showRemoteRepo(user="pbiecek", repo="archivist")
> ##D # We search for a Tag with default "name" regular expression corresponding to 
> ##D # "cd6557c6163a6f9800f308f343e75e72" md5hash.
> ##D getTagsRemote( "cd6557c6163a6f9800f308f343e75e72",
> ##D                 user="pbiecek", repo="archivist")
> ##D                 
> ##D ## EXAMPLE: many archivist-like Repositories on one Github repository
> ##D # We search for a Tag with default "name" regular expression corresponding to 
> ##D # "ff575c261c949d073b2895b05d1097c3" md5hash.
> ##D getTagsRemote("ff575c261c949d073b2895b05d1097c3", user="MarcinKosinski",
> ##D                repo="Museum", branch="master", subdir="ex1")
> ## End(Not run)               
> 
> 
> 
> 
> cleanEx()
> nameEx("loadFromRepo")
> ### * loadFromRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadFromLocalRepo
> ### Title: Load Artifact Given as a md5hash from a Repository
> ### Aliases: loadFromLocalRepo loadFromRemoteRepo
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # objects preparation
> ##D 
> ##D #' exampleRepoDir <- tempfile()
> ##D createLocalRepo(repoDir = exampleRepoDir)
> ##D data(iris)
> ##D saveToLocalRepo(iris, repoDir=exampleRepoDir, archiveSessionInfo = TRUE)
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D showLocalRepo(method = "tags", repoDir = exampleRepoDir)
> ##D 
> ##D loadFromLocalRepo(md5hash = '7f3453331910e3f321ef97d87adb5bad',
> ##D   repoDir = system.file("graphGallery", package = "archivist"), value = TRUE) -> pl
> ##D deleteLocalRepo(exampleRepoDir, TRUE)
> ##D rm(exampleRepoDir)
> ##D 
> ##D 
> ##D #
> ##D #Remote Version
> ##D #
> ##D 
> ##D # check the state of the Repository
> ##D summaryRemoteRepo( user="pbiecek", repo="archivist" )
> ##D showRemoteRepo( user="pbiecek", repo="archivist" )
> ##D showRemoteRepo( user="pbiecek", repo="archivist", method = "tags" )
> ##D 
> ##D rm( model )
> ##D rm( myplot123 )
> ##D rm( qda1 )
> ##D (VARmd5hash <- searchInRemoteRepo( "varname:Sepal.Width", 
> ##D                    user="pbiecek", repo="archivist" ))
> ##D (NAMEmd5hash <- searchInRemoteRepo( "name:qda1", 
> ##D                    user="pbiecek", repo="archivist", branch="master" ))
> ##D (CLASSmd5hash <- searchInRemoteRepo( "class:ggplot", 
> ##D                    user="pbiecek", repo="archivist", branch="master" ))
> ##D 
> ##D 
> ##D loadFromRemoteRepo( "ff575c261c", user="pbiecek", repo="archivist")
> ##D NewObjects <- loadFromRemoteRepo( NAMEmd5hash, user="pbiecek", repo="archivist", value = TRUE )
> ##D loadFromRemoteRepo( CLASSmd5hash, user="pbiecek", repo="archivist")
> ##D 
> ##D 
> ##D ## Loading artifacts from the repository which is built in the archivist package 
> ##D ## and saving them on the example repository
> ##D 
> ##D # Creating an example Repository - on which artifacts loaded from the
> ##D # archivist package repository will be saved
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(repoDir = exampleRepoDir)
> ##D 
> ##D # Directory of the archivist package repository
> ##D repo_archivist <- system.file("graphGallery", package = "archivist") 
> ##D 
> ##D # We are checking what kind of objects
> ##D # are stored in the archivist package repository
> ##D summaryLocalRepo(repoDir = repo_archivist)
> ##D 
> ##D # Let's say that we are interested in 
> ##D # an artifact of class ggplot.
> ##D GGPLOTmd5hash <- searchInLocalRepo(pattern = "class:ggplot",
> ##D                                    repoDir = repo_archivist) 
> ##D # There are eight of them.
> ##D # We load the first one by its value (parameter value = TRUE)
> ##D # and assign it to the p variable.
> ##D p <- loadFromLocalRepo(GGPLOTmd5hash[1], repoDir = repo_archivist,
> ##D                        value = TRUE)
> ##D 
> ##D # Finally, we may save the artifact on the example Repository.
> ##D # Note that md5hash is different from the one which is stored in
> ##D # the archivist package repository.
> ##D saveToRepo(p, repoDir = exampleRepoDir) 
> ##D 
> ##D # Making sure that the artifact is stored on the example repository
> ##D showLocalRepo(repoDir = exampleRepoDir, method = "tags")
> ##D 
> ##D # removing an example Repository
> ##D 
> ##D deleteLocalRepo( exampleRepoDir, TRUE)
> ##D 
> ##D rm( exampleRepoDir )
> ##D 
> ##D # many archivist-like Repositories on one Remote repository
> ##D 
> ##D loadFromRemoteRepo( "ff575c261c949d073b2895b05d1097c3", 
> ##D user="MarcinKosinski", repo="Museum", branch="master", subdir="ex2")
> ##D 
> ##D 
> ##D loadFromRemoteRepo( "ff575c261c949d073b2895b05d1097c3", 
> ##D                     user="MarcinKosinski", repo="Museum", branch="master",
> ##D                     subdir="ex1")
> ##D                     
> ##D #github
> ##D loadFromRemoteRepo(md5hash = "08dc0b66975cded92b5cd8291ebdc955", 
> ##D                repo = "graphGallery", user = "pbiecek", 
> ##D                repoType = "github", value = TRUE)
> ##D            
> ##D #git
> ##D loadFromRemoteRepo(md5hash = "08dc0b66975cded92b5cd8291ebdc955", 
> ##D                repo = "graphGalleryGit", user = "pbiecek", 
> ##D                repoType = "bitbucket", value = TRUE)
> ##D 
> ##D # mercurial               
> ##D loadFromRemoteRepo(md5hash = "08dc0b66975cded92b5cd8291ebdc955", 
> ##D                repo = "graphGalleryM", user = "pbiecek", 
> ##D                repoType = "bitbucket", value = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("magrittr")
> ### * magrittr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %a%
> ### Title: magrittr - a Forward-Pipe Operator for R
> ### Aliases: %a%
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D library("dplyr")
> ##D 
> ##D ## Usage of %a% operator without setting default repository
> ##D # We will receive sepcial warning
> ##D iris %a% summary()
> ##D 
> ##D ## Archiving artifacts with their chaining code
> ##D # Creating empty repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( exampleRepoDir, default = TRUE ) # Remember to set repo to default
> ##D 
> ##D # Start using %a% operator
> ##D data("hflights", package = "hflights")
> ##D hflights %a%
> ##D   group_by(Year, Month, DayofMonth) %a%
> ##D   select(Year:DayofMonth, ArrDelay, DepDelay) %a%
> ##D   summarise(arr = mean(ArrDelay, na.rm = TRUE),
> ##D             dep = mean(DepDelay, na.rm = TRUE)) %a%
> ##D   filter(arr > 30 | dep > 30)
> ##D   
> ##D # Let's check how Tags of subsequent artifacts look like
> ##D showLocalRepo()
> ##D getTagsLocal("a8ce013a8e66df222be278122423dc60", tag = "") #1
> ##D getTagsLocal("9d91fe67fd51f3bfdc9db0a596b12b38", tag = "") #2
> ##D getTagsLocal("617ded4953ac986524a1c24703363980", tag = "") #3
> ##D getTagsLocal("3f1ac0a27485be5d52e1b0a41d165abc", tag = "") #4
> ##D getTagsLocal("0cb04315482de73d7f5a1081953236f8", tag = "") #5
> ##D getTagsLocal("5629bc43e36d219b613076b17c665eda", tag = "") #6
> ##D 
> ##D # Deleting existing repository
> ##D deleteLocalRepo(exampleRepoDir, deleteRoot = TRUE)
> ##D rm(exampleRepoDir) 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeTagsRepo")
> ### * removeTagsRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeTagsRepo
> ### Title: Remove Tags from Repository
> ### Aliases: removeTagsRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Creating empty repository
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(exampleRepoDir, force=TRUE)
> ##D 
> ##D # Saving lm artifacts into repository
> ##D m1 <- lm(Sepal.Length~Species, iris)
> ##D saveToLocalRepo(m1, exampleRepoDir)
> ##D 
> ##D # We may see what kind of Tags are related to "m1" artifact corresponding to
> ##D getTagsLocal("9e66edd297c2f291446f3503c01d443a", exampleRepoDir, "")
> ##D 
> ##D # One more look at our Repo
> ##D removeTagsRepo("9e66edd297c2f291446f3503c01d443a", exampleRepoDir, tags = "rank:3")
> ##D 
> ##D # Deleting example repository
> ##D deleteLocalRepo(exampleRepoDir, deleteRoot=TRUE)
> ##D rm(exampleRepoDir)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("restoreLibs")
> ### * restoreLibs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restoreLibs
> ### Title: Restore Versions of Libraries
> ### Aliases: restoreLibs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## objects preparation
> ##D ## be aware! this will probably downgrade many of your libraries
> ##D restoreLibs(md5hash = "pbiecek/graphGallery/7f3453331910e3f321ef97d87adb5bad")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmFromLocalRepo")
> ### * rmFromLocalRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmFromLocalRepo
> ### Title: Remove an Artifact Given as a md5hash from the Repository
> ### Aliases: rmFromLocalRepo rmFromRepo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # objects preparation
> ##D data.frame object
> ##D data(iris)
> ##D 
> ##D # ggplot/gg object
> ##D library(ggplot2)
> ##D df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30))
> ##D library(plyr)
> ##D ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
> ##D myplot123 <- ggplot(df, aes(x = gp, y = y)) +
> ##D   geom_point() +  geom_point(data = ds, aes(y = mean),
> ##D                              colour = 'red', size = 3)
> ##D 
> ##D # lm object
> ##D model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, data= iris)
> ##D model2 <- lm(Sepal.Length~ Sepal.Width + Petal.Width, data= iris)
> ##D model3 <- lm(Sepal.Length~ Sepal.Width, data= iris)
> ##D 
> ##D # agnes (twins) object
> ##D library(cluster)
> ##D data(votes.repub)
> ##D agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
> ##D 
> ##D # fanny (partition) object
> ##D x <- rbind(cbind(rnorm(10, 0, 0.5), rnorm(10, 0, 0.5)),
> ##D            cbind(rnorm(15, 5, 0.5), rnorm(15, 5, 0.5)),
> ##D            cbind(rnorm( 3,3.2,0.5), rnorm( 3,3.2,0.5)))
> ##D fannyx <- fanny(x, 2)
> ##D 
> ##D # creating example Repository - on which examples will work
> ##D 
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo(repoDir = exampleRepoDir)
> ##D myplot123Md5hash <- saveToLocalRepo(myplot123, repoDir=exampleRepoDir)
> ##D irisMd5hash <- saveToLocalRepo(iris, repoDir=exampleRepoDir)
> ##D modelMd5hash  <- saveToLocalRepo(model, repoDir=exampleRepoDir)
> ##D agn1Md5hash <- saveToLocalRepo(agn1, repoDir=exampleRepoDir)
> ##D fannyxMd5hash <- saveToLocalRepo(fannyx, repoDir=exampleRepoDir)
> ##D 
> ##D # let's see how the Repository looks like: show
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D showLocalRepo(method = "tags", repoDir = exampleRepoDir)
> ##D 
> ##D # let's see how the Repository looks like: summary
> ##D summaryLocalRepo( exampleRepoDir )
> ##D 
> ##D # remove examples
> ##D 
> ##D rmFromLocalRepo(fannyxMd5hash, repoDir = exampleRepoDir)
> ##D # removeData = FALSE default argument provides from removing archived
> ##D # fannyxMd5hash object's data from the Repository and the gallery
> ##D rmFromLocalRepo(irisMd5hash, repoDir = exampleRepoDir)
> ##D  
> ##D # let's see how the Repository looks like: show
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D showLocalRepo(method = "tags", repoDir = exampleRepoDir)
> ##D 
> ##D # let's see how the Repository looks like: summary
> ##D summaryLocalRepo( exampleRepoDir )
> ##D 
> ##D 
> ##D # one can have the same object archived three different times,
> ##D # there will appear a warning message
> ##D agn1Md5hash2 <- saveToLocalRepo(agn1, repoDir=exampleRepoDir)
> ##D agn1Md5hash3 <- saveToLocalRepo(agn1, repoDir=exampleRepoDir)
> ##D 
> ##D # md5hashes are the same for the same object (agn1)
> ##D agn1Md5hash == agn1Md5hash2
> ##D agn1Md5hash2 == agn1Md5hash3
> ##D 
> ##D # but in the Repository database (backpack.db)
> ##D # there are three identical rows describing the object
> ##D # as well as three identical rows describing object's data.
> ##D 
> ##D # let's see how the Repository looks like: show
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D showLocalRepo(method = "tags", repoDir = exampleRepoDir)
> ##D 
> ##D # let's see how the Repository looks like: summary
> ##D summaryLocalRepo( exampleRepoDir )
> ##D # in spite of multiplying object's appearance in database it is
> ##D 
> ##D # one easy call removes them all but this call will result in error
> ##D rmFromLocalRepo(agn1Md5hash, repoDir = exampleRepoDir, removeData = TRUE, 
> ##D             removeMiniature = TRUE)
> ##D 
> ##D # soultion to that is
> ##D rmFromLocalRepo(agn1Md5hash, repoDir = exampleRepoDir, removeData = TRUE, 
> ##D             removeMiniature = TRUE, force = TRUE)
> ##D # removeMiniature = TRUE removes miniatures from the gallery folder
> ##D 
> ##D # rest of the artifacts can be removed for example by
> ##D # looking for dates of creation and then removing all objects
> ##D # created in a specific period of time
> ##D 
> ##D obj2rm <- searchInLocalRepo( pattern = list(dateFrom = Sys.Date(), dateTo = Sys.Date()),
> ##D                              repoDir = exampleRepoDir )
> ##D sapply(obj2rm, rmFromLocalRepo, repoDir = exampleRepoDir)
> ##D # above function call removed all objects which were created in these examples.
> ##D # Note that in the gallery folder there may be still some miniatures as
> ##D # removeMiniature parameter is set to FALSE
> ##D 
> ##D # let's see how the Repository looks like: show
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D showLocalRepo(method = "tags", repoDir = exampleRepoDir)
> ##D 
> ##D # one can also delete objects of a specific class
> ##D modelMd5hash  <- saveToLocalRepo(model, repoDir=exampleRepoDir)
> ##D model2Md5hash  <- saveToLocalRepo(model2, repoDir=exampleRepoDir)
> ##D model3Md5hash  <- saveToLocalRepo(model3, repoDir=exampleRepoDir)
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D 
> ##D objMd5hash <- searchInLocalRepo("class:lm", repoDir = exampleRepoDir)
> ##D sapply(objMd5hash, rmFromLocalRepo, repoDir = exampleRepoDir, removeData = TRUE, force = TRUE)
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D summaryLocalRepo( exampleRepoDir )
> ##D 
> ##D 
> ##D # one can remove object specifying only its md5hash abbreviation
> ##D (myplo123Md5hash <- saveToLocalRepo(myplot123, repoDir=exampleRepoDir))
> ##D showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
> ##D 
> ##D # If md5hash is "db50a4e667581f8c531acd78ad24bfee" then
> ##D # model abbreviation might be : "db50a"
> ##D # Note that with each evaluation of createEmptyRepo function new md5hashes
> ##D # are created. This is why, in your evaluation of the code, artifact 
> ##D # myplo123Md5hash will have a different md5hash and the following
> ##D # instruction will result in an error.
> ##D rmFromLocalRepo("db40a", repoDir = exampleRepoDir, removeData = TRUE)
> ##D summaryLocalRepo( repoDir = exampleRepoDir )
> ##D 
> ##D 
> ##D # removing an example Repository
> ##D 
> ##D deleteLocalRepo( exampleRepoDir, TRUE)
> ##D 
> ##D 
> ##D ######
> ##D ######
> ##D REMOVING MANY ARTIFACTS
> ##D ######
> ##D ######
> ##D 
> ##D data(iris)
> ##D 
> ##D # lm object
> ##D model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, data= iris)
> ##D 
> ##D # agnes (twins) object
> ##D library(cluster)
> ##D data(votes.repub)
> ##D agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
> ##D 
> ##D # fanny (partition) object
> ##D x <- rbind(cbind(rnorm(10, 0, 0.5), rnorm(10, 0, 0.5)),
> ##D            cbind(rnorm(15, 5, 0.5), rnorm(15, 5, 0.5)),
> ##D            cbind(rnorm( 3,3.2,0.5), rnorm( 3,3.2,0.5)))
> ##D fannyx <- fanny(x, 2)
> ##D 
> ##D # lda object
> ##D library(MASS)
> ##D 
> ##D Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
> ##D                   Sp = rep(c("s","c","v"), rep(50,3)))
> ##D train <- c(8,83,115,118,146,82,76,9,70,139,85,59,78,143,68,
> ##D            134,148,12,141,101,144,114,41,95,61,128,2,42,37,
> ##D            29,77,20,44,98,74,32,27,11,49,52,111,55,48,33,38,
> ##D            113,126,24,104,3,66,81,31,39,26,123,18,108,73,50,
> ##D            56,54,65,135,84,112,131,60,102,14,120,117,53,138,5)
> ##D lda1 <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
> ##D 
> ##D # qda object
> ##D tr <- c(7,38,47,43,20,37,44,22,46,49,50,19,4,32,12,29,27,34,2,1,17,13,3,35,36)
> ##D train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
> ##D cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> ##D qda1 <- qda(train, cl)
> ##D 
> ##D # glmnet object
> ##D library( glmnet )
> ##D 
> ##D zk=matrix(rnorm(100*20),100,20)
> ##D bk=rnorm(100)
> ##D glmnet1=glmnet(zk,bk)
> ##D  
> ##D # Creating example Repository so that we may see it on our computer
> ##D 
> ##D exampleRepoDir <- tempfile()
> ##D createLocalRepo( repoDir = exampleRepoDir, force = TRUE)
> ##D saveToLocalRepo( iris, repoDir=exampleRepoDir)
> ##D saveToLocalRepo( model, repoDir=exampleRepoDir )
> ##D saveToLocalRepo( agn1, repoDir=exampleRepoDir )
> ##D saveToLocalRepo( fannyx, repoDir=exampleRepoDir )
> ##D saveToLocalRepo( lda1, repoDir=exampleRepoDir )
> ##D saveToLocalRepo( glmnet1, repoDir=exampleRepoDir )
> ##D 
> ##D ArtifactsAndData <- unique(showLocalRepo(repoDir = exampleRepoDir)[,1])
> ##D ArtifactsData <- unique(searchInLocalRepo(pattern = "relationWith", fixed = FALSE,
> ##D                                    repoDir = exampleRepoDir))
> ##D Artifacts <- setdiff(ArtifactsAndData, ArtifactsData)
> ##D 
> ##D 
> ##D # Removing many artifacts with many = TRUE argument
> ##D rmFromLocalRepo(Artifacts, repoDir = exampleRepoDir, many = TRUE)
> ##D 
> ##D # We may notice, in two ways, that artifacts' data is still in "exampleRepoDir".
> ##D # Either we may look into gallery folder of "exampleRepoDir" 
> ##D list.files(file.path(exampleRepoDir, "gallery"))
> ##D # or show how database.db file looks like.
> ##D showLocalRepo(repoDir = exampleRepoDir) # artifacts' data is there indeed!
> ##D 
> ##D # If we want to remove artifact's data now we simply call rmFromLocalRepo function
> ##D # with removeData = TRUE additional argument.
> ##D rmFromLocalRepo(Artifacts, repoDir = exampleRepoDir, removeData = TRUE,  many = TRUE)
> ##D 
> ##D # We receive a warning as Artifacts are no longer in the repository. 
> ##D # However, let's check what happened with Artifact's data.
> ##D showLocalRepo(repoDir = exampleRepoDir) # They were removed.
> ##D # Perhaps you may think that "exampleRepoDir" is empty as database indicates. However,
> ##D # if you look into gallery folder there will be some ".txt" or ".png" files. 
> ##D list.files(file.path(exampleRepoDir, "gallery"))
> ##D 
> ##D # Those are probably, the so called, Miniatures. Let's try to remove them.
> ##D # In order to do it we call rmFromLocalRepo function with removeMiniature = TRUE argument.
> ##D rmFromLocalRepo(Artifacts, many = TRUE, repoDir = exampleRepoDir, removeMiniature = TRUE)
> ##D 
> ##D # Again we receive a warning as Artifacts are no longer in the repository but ...
> ##D list.files(file.path(exampleRepoDir, "gallery")) 
> ##D # gallery folder is empty now! Artifact's miniature's were removed.
> ##D 
> ##D 
> ##D # Of course we may have done all these instructions by one simple function call.
> ##D # rmFromLocalRepo(Artifacts, many = TRUE, repoDir = exampleRepoDir,
> ##D #            removeData = TRUE, removeMiniature = TRUE)
> ##D # Nevertheless, it may be instructive to see how it is done step by step.
> ##D 
> ##D # removing an example Repository
> ##D deleteLocalRepo(repoDir = exampleRepoDir, deleteRoot = TRUE)
> ##D    
> ##D rm( exampleRepoDir )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("saveToRepo")
> ### * saveToRepo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveToLocalRepo
> ### Title: Save an Artifact into a Repository
> ### Aliases: saveToLocalRepo saveToRepo asave
> 
> ### ** Examples
> 
> exampleRepoDir <- tempfile(tmpdir = ".")
> createLocalRepo(repoDir = exampleRepoDir)
> data(swiss)
> saveToLocalRepo(swiss, repoDir=exampleRepoDir, archiveSessionInfo = TRUE)
[1] "4c43fa8a4d8f0cbf65353e397f37338c"
> showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
                           md5hash                             name
1 4c43fa8a4d8f0cbf65353e397f37338c                            swiss
2 bb01433213408d6e1b22106228b1fb1e bb01433213408d6e1b22106228b1fb1e
          createdDate
1 2018-03-03 18:49:32
2 2018-03-03 18:49:32
> showLocalRepo(method = "tags", repoDir = exampleRepoDir)
                           artifact
1  4c43fa8a4d8f0cbf65353e397f37338c
2  4c43fa8a4d8f0cbf65353e397f37338c
3  4c43fa8a4d8f0cbf65353e397f37338c
4  4c43fa8a4d8f0cbf65353e397f37338c
5  4c43fa8a4d8f0cbf65353e397f37338c
6  4c43fa8a4d8f0cbf65353e397f37338c
7  4c43fa8a4d8f0cbf65353e397f37338c
8  4c43fa8a4d8f0cbf65353e397f37338c
9  4c43fa8a4d8f0cbf65353e397f37338c
10 4c43fa8a4d8f0cbf65353e397f37338c
11 bb01433213408d6e1b22106228b1fb1e
12 4c43fa8a4d8f0cbf65353e397f37338c
13 4c43fa8a4d8f0cbf65353e397f37338c
                                             tag         createdDate
1                                     format:rda 2018-03-03 18:49:32
2                                     name:swiss 2018-03-03 18:49:32
3                               class:data.frame 2018-03-03 18:49:32
4                              varname:Fertility 2018-03-03 18:49:32
5                            varname:Agriculture 2018-03-03 18:49:32
6                            varname:Examination 2018-03-03 18:49:32
7                              varname:Education 2018-03-03 18:49:32
8                               varname:Catholic 2018-03-03 18:49:32
9                       varname:Infant.Mortality 2018-03-03 18:49:32
10                      date:2018-03-03 18:49:32 2018-03-03 18:49:32
11                                    format:rda 2018-03-03 18:49:32
12 session_info:bb01433213408d6e1b22106228b1fb1e 2018-03-03 18:49:32
13                                    format:txt 2018-03-03 18:49:32
> 
> loadFromLocalRepo(md5hash = '2a6e492cb6982f230e48cf46023e2e4f',
+   repoDir = system.file("graphGallery", package = "archivist"), value = TRUE) -> model
> 
> saveToLocalRepo(model, repoDir=exampleRepoDir,
+              userTags = c("do not delete", "my favourite model"))
[1] "2a6e492cb6982f230e48cf46023e2e4f"
attr(,"data")
[1] "afb2550d0f886f0cf3b050f04c5cd4f8"
> aoptions('repoDir', system.file("graphGallery", package = "archivist"))
[1] "/homero/tomas/cran/rlibro/lib/archivist/graphGallery"
> showLocalRepo(method = "tags")
                            artifact
1   d9313a0de3e2980201a8971e3384ff26
2   ff575c261c949d073b2895b05d1097c3
3   ff575c261c949d073b2895b05d1097c3
4   ff575c261c949d073b2895b05d1097c3
5   2a6e492cb6982f230e48cf46023e2e4f
6   2a6e492cb6982f230e48cf46023e2e4f
7   2a6e492cb6982f230e48cf46023e2e4f
8   2a6e492cb6982f230e48cf46023e2e4f
9   2a6e492cb6982f230e48cf46023e2e4f
10  2a6e492cb6982f230e48cf46023e2e4f
11  2a6e492cb6982f230e48cf46023e2e4f
12  2a6e492cb6982f230e48cf46023e2e4f
13  2a6e492cb6982f230e48cf46023e2e4f
14  2a6e492cb6982f230e48cf46023e2e4f
15  93ecfdf1436932e2860c6dbdf2abc2ad
16  2a6e492cb6982f230e48cf46023e2e4f
17  afb2550d0f886f0cf3b050f04c5cd4f8
18  afb2550d0f886f0cf3b050f04c5cd4f8
19  afb2550d0f886f0cf3b050f04c5cd4f8
20  2a6e492cb6982f230e48cf46023e2e4f
21  18a98048f0584469483afb65294ce3ed
22  18a98048f0584469483afb65294ce3ed
23  18a98048f0584469483afb65294ce3ed
24  18a98048f0584469483afb65294ce3ed
25  18a98048f0584469483afb65294ce3ed
26  18a98048f0584469483afb65294ce3ed
27  18a98048f0584469483afb65294ce3ed
28  18a98048f0584469483afb65294ce3ed
29  2b1fe80a89976f859ee2247723889256
30  18a98048f0584469483afb65294ce3ed
31  9325d4e26da1002bbb0ee75d099e6722
32  b17388f623ba94ef7ca4254ed39c92a7
33  9325d4e26da1002bbb0ee75d099e6722
34  9325d4e26da1002bbb0ee75d099e6722
35  9325d4e26da1002bbb0ee75d099e6722
36  18a98048f0584469483afb65294ce3ed
37  b17388f623ba94ef7ca4254ed39c92a7
38  ff575c261c949d073b2895b05d1097c3
39  b17388f623ba94ef7ca4254ed39c92a7
40  ff575c261c949d073b2895b05d1097c3
41  ff575c261c949d073b2895b05d1097c3
42  ff575c261c949d073b2895b05d1097c3
43  ff575c261c949d073b2895b05d1097c3
44  ff575c261c949d073b2895b05d1097c3
45  ff575c261c949d073b2895b05d1097c3
46  ff575c261c949d073b2895b05d1097c3
47  ff575c261c949d073b2895b05d1097c3
48  ff575c261c949d073b2895b05d1097c3
49  ff575c261c949d073b2895b05d1097c3
50  ff575c261c949d073b2895b05d1097c3
51  ff575c261c949d073b2895b05d1097c3
52  fe1dd03597308686a7fff7161f644b6b
53  ff575c261c949d073b2895b05d1097c3
54  ff575c261c949d073b2895b05d1097c3
55  d3696e13d15223c7d0bbccb33cc20a11
56  d3696e13d15223c7d0bbccb33cc20a11
57  d3696e13d15223c7d0bbccb33cc20a11
58  d3696e13d15223c7d0bbccb33cc20a11
59  d3696e13d15223c7d0bbccb33cc20a11
60  d3696e13d15223c7d0bbccb33cc20a11
61  d3696e13d15223c7d0bbccb33cc20a11
62  d3696e13d15223c7d0bbccb33cc20a11
63  d3696e13d15223c7d0bbccb33cc20a11
64  d3696e13d15223c7d0bbccb33cc20a11
65  fe1dd03597308686a7fff7161f644b6b
66  d3696e13d15223c7d0bbccb33cc20a11
67  d3696e13d15223c7d0bbccb33cc20a11
68  d3696e13d15223c7d0bbccb33cc20a11
69  d3696e13d15223c7d0bbccb33cc20a11
70  d3696e13d15223c7d0bbccb33cc20a11
71  d3696e13d15223c7d0bbccb33cc20a11
72  d3696e13d15223c7d0bbccb33cc20a11
73  d3696e13d15223c7d0bbccb33cc20a11
74  d3696e13d15223c7d0bbccb33cc20a11
75  d3696e13d15223c7d0bbccb33cc20a11
76  d3696e13d15223c7d0bbccb33cc20a11
77  fe1dd03597308686a7fff7161f644b6b
78  d3696e13d15223c7d0bbccb33cc20a11
79  d3696e13d15223c7d0bbccb33cc20a11
80  990861c7c27812ee959f10e5f76fe2c3
81  990861c7c27812ee959f10e5f76fe2c3
82  990861c7c27812ee959f10e5f76fe2c3
83  990861c7c27812ee959f10e5f76fe2c3
84  990861c7c27812ee959f10e5f76fe2c3
85  990861c7c27812ee959f10e5f76fe2c3
86  990861c7c27812ee959f10e5f76fe2c3
87  990861c7c27812ee959f10e5f76fe2c3
88  990861c7c27812ee959f10e5f76fe2c3
89  990861c7c27812ee959f10e5f76fe2c3
90  fe1dd03597308686a7fff7161f644b6b
91  990861c7c27812ee959f10e5f76fe2c3
92  990861c7c27812ee959f10e5f76fe2c3
93  990861c7c27812ee959f10e5f76fe2c3
94  990861c7c27812ee959f10e5f76fe2c3
95  990861c7c27812ee959f10e5f76fe2c3
96  990861c7c27812ee959f10e5f76fe2c3
97  990861c7c27812ee959f10e5f76fe2c3
98  990861c7c27812ee959f10e5f76fe2c3
99  990861c7c27812ee959f10e5f76fe2c3
100 990861c7c27812ee959f10e5f76fe2c3
101 990861c7c27812ee959f10e5f76fe2c3
102 fe1dd03597308686a7fff7161f644b6b
103 990861c7c27812ee959f10e5f76fe2c3
104 990861c7c27812ee959f10e5f76fe2c3
105 050e41ec3bc40b3004bc6bdd356acae7
106 050e41ec3bc40b3004bc6bdd356acae7
107 050e41ec3bc40b3004bc6bdd356acae7
108 050e41ec3bc40b3004bc6bdd356acae7
109 050e41ec3bc40b3004bc6bdd356acae7
110 050e41ec3bc40b3004bc6bdd356acae7
111 050e41ec3bc40b3004bc6bdd356acae7
112 050e41ec3bc40b3004bc6bdd356acae7
113 050e41ec3bc40b3004bc6bdd356acae7
114 050e41ec3bc40b3004bc6bdd356acae7
115 050e41ec3bc40b3004bc6bdd356acae7
116 050e41ec3bc40b3004bc6bdd356acae7
117 050e41ec3bc40b3004bc6bdd356acae7
118 050e41ec3bc40b3004bc6bdd356acae7
119 fe1dd03597308686a7fff7161f644b6b
120 050e41ec3bc40b3004bc6bdd356acae7
121 2362b67ee86693d7326c95d3526a5cd8
122 ff575c261c949d073b2895b05d1097c3
123 ff575c261c949d073b2895b05d1097c3
124 ff575c261c949d073b2895b05d1097c3
125 1862bb3adaf78b7b3b9a30b46526bf7e
126 ff575c261c949d073b2895b05d1097c3
127 ff575c261c949d073b2895b05d1097c3
128 ff575c261c949d073b2895b05d1097c3
129 1862bb3adaf78b7b3b9a30b46526bf7e
130 ff575c261c949d073b2895b05d1097c3
131 ff575c261c949d073b2895b05d1097c3
132 ff575c261c949d073b2895b05d1097c3
133 7f3453331910e3f321ef97d87adb5bad
134 7f3453331910e3f321ef97d87adb5bad
135 7f3453331910e3f321ef97d87adb5bad
136 7f3453331910e3f321ef97d87adb5bad
137 7f3453331910e3f321ef97d87adb5bad
138 7f3453331910e3f321ef97d87adb5bad
139 7f3453331910e3f321ef97d87adb5bad
140 78ce2c8ede25776f1f22c538258eed6d
141 7f3453331910e3f321ef97d87adb5bad
142 ff575c261c949d073b2895b05d1097c3
143 ff575c261c949d073b2895b05d1097c3
144 ff575c261c949d073b2895b05d1097c3
145 7f3453331910e3f321ef97d87adb5bad
146 369227e67f9164dcbe934dadf2b53cc2
147 369227e67f9164dcbe934dadf2b53cc2
148 369227e67f9164dcbe934dadf2b53cc2
149 369227e67f9164dcbe934dadf2b53cc2
150 369227e67f9164dcbe934dadf2b53cc2
151 369227e67f9164dcbe934dadf2b53cc2
152 369227e67f9164dcbe934dadf2b53cc2
153 78ce2c8ede25776f1f22c538258eed6d
154 369227e67f9164dcbe934dadf2b53cc2
155 ff575c261c949d073b2895b05d1097c3
156 ff575c261c949d073b2895b05d1097c3
157 ff575c261c949d073b2895b05d1097c3
158 369227e67f9164dcbe934dadf2b53cc2
159 ff575c261c949d073b2895b05d1097c3
160 ff575c261c949d073b2895b05d1097c3
161 ff575c261c949d073b2895b05d1097c3
162 ff575c261c949d073b2895b05d1097c3
163 ff575c261c949d073b2895b05d1097c3
164 ff575c261c949d073b2895b05d1097c3
165 ff575c261c949d073b2895b05d1097c3
166 ff575c261c949d073b2895b05d1097c3
167 ff575c261c949d073b2895b05d1097c3
168 c648ca6d0bb605062f5b9416818262e7
169 ff575c261c949d073b2895b05d1097c3
170 ff575c261c949d073b2895b05d1097c3
                                                                                    tag
1                                                                            format:rda
2                                                                            format:rda
3                                                                            format:txt
4                                         relationWith:600bda83cb840947976bd1ce3a11879d
5                                                                            format:rda
6                                                                            name:model
7                                                                              class:lm
8                                                                  coefname:(Intercept)
9                                                                 coefname:Sepal.Length
10                                                           coefname:Speciesversicolor
11                                                            coefname:Speciesvirginica
12                                                                               rank:4
13                                                                      df.residual:146
14                                                             date:2016-02-07 01:00:33
15                                                                           format:rda
16                                        session_info:93ecfdf1436932e2860c6dbdf2abc2ad
17                                                                           format:rda
18                                                                           format:txt
19                                        relationWith:2a6e492cb6982f230e48cf46023e2e4f
20                                                                           format:txt
21                                                                           format:rda
22                                                                          name:model2
23                                                                             class:lm
24                                                                 coefname:(Intercept)
25                                                                coefname:Sepal.Length
26                                                                               rank:2
27                                                                      df.residual:148
28                                                             date:2016-02-08 15:22:15
29                                                                           format:rda
30                                        session_info:2b1fe80a89976f859ee2247723889256
31                                                                           format:rda
32                                                                           format:rda
33                                        session_info:b17388f623ba94ef7ca4254ed39c92a7
34                                                                           format:txt
35                                        relationWith:18a98048f0584469483afb65294ce3ed
36                                                                           format:txt
37                                                                           format:rda
38                                                                           format:rda
39                                                                           format:rda
40                                        session_info:b17388f623ba94ef7ca4254ed39c92a7
41                                                                           format:txt
42                                        relationWith:70f4f83dbfef2a8afb2f495208d0a60f
43                                                                           format:rda
44                                                                     class:data.frame
45                                                                 varname:Sepal.Length
46                                                                  varname:Sepal.Width
47                                                                 varname:Petal.Length
48                                                                  varname:Petal.Width
49                                                                      varname:Species
50                                                             date:2016-02-08 15:57:32
51                                                                            name:iris
52                                                                           format:rda
53                                        session_info:fe1dd03597308686a7fff7161f644b6b
54                                                                           format:txt
55                                                                           format:rda
56                                                                     class:data.frame
57                                                                 varname:Sepal.Length
58                                                                  varname:Sepal.Width
59                                                                 varname:Petal.Length
60                                                                  varname:Petal.Width
61                                                                      varname:Species
62                                                             date:2016-02-08 15:57:32
63                                                 LHS:ff575c261c949d073b2895b05d1097c3
64                                                         RHS:filter(Sepal.Length < 6)
65                                                                           format:rda
66                                        session_info:fe1dd03597308686a7fff7161f644b6b
67                                                                           format:txt
68                                                                           format:rda
69                                                                     class:data.frame
70                                                                 varname:Sepal.Length
71                                                                  varname:Sepal.Width
72                                                                 varname:Petal.Length
73                                                                  varname:Petal.Width
74                                                                      varname:Species
75                                                             date:2016-02-08 15:57:32
76                                               name:iris %a% filter(Sepal.Length < 6)
77                                                                           format:rda
78                                        session_info:fe1dd03597308686a7fff7161f644b6b
79                                                                           format:txt
80                                                                           format:rda
81                                                                             class:lm
82                                                                 coefname:(Intercept)
83                                                           coefname:Speciesversicolor
84                                                            coefname:Speciesvirginica
85                                                                               rank:3
86                                                                       df.residual:80
87                                                             date:2016-02-08 15:57:32
88                                                 LHS:d3696e13d15223c7d0bbccb33cc20a11
89                                             RHS:lm(Petal.Length ~ Species, data = .)
90                                                                           format:rda
91                                        session_info:fe1dd03597308686a7fff7161f644b6b
92                                                                           format:txt
93                                                                           format:rda
94                                                                             class:lm
95                                                                 coefname:(Intercept)
96                                                           coefname:Speciesversicolor
97                                                            coefname:Speciesvirginica
98                                                                               rank:3
99                                                                       df.residual:80
100                                                            date:2016-02-08 15:57:32
101 name:iris %a% filter(Sepal.Length < 6) %a% lm(Petal.Length ~ Species,     data = .)
102                                                                          format:rda
103                                       session_info:fe1dd03597308686a7fff7161f644b6b
104                                                                          format:txt
105                                                                          format:rda
106                                                                    class:summary.lm
107                                                                        sigma:0.2803
108                                                                                df:3
109                                                                               df:80
110                                                                                df:3
111                                                                          R^2:0.9604
112                                                                 adjusted R^2:0.9594
113                                                                    fstatistic:970.8
114                                                                     fstatistic.df:2
115                                                                    fstatistic.df:80
116                                                            date:2016-02-08 15:57:32
117                                                LHS:990861c7c27812ee959f10e5f76fe2c3
118                                                                       RHS:summary()
119                                                                          format:rda
120                                       session_info:fe1dd03597308686a7fff7161f644b6b
121                                                                          format:rda
122                                                                          format:rda
123                                                                          format:txt
124                                       relationWith:f05f0ed0662fe01850ec1b928830ef32
125                                                                          format:rda
126                                                                          format:rda
127                                                                          format:txt
128                                       relationWith:13b2724139eb2c62578b4dab0d7b2cea
129                                                                          format:rda
130                                                                          format:rda
131                                                                          format:txt
132                                       relationWith:13b2724139eb2c62578b4dab0d7b2cea
133                                                                          format:rda
134                                                                            name:pl1
135                                                                            class:gg
136                                                                        class:ggplot
137                                                                 labelx:Sepal.Length
138                                                                 labely:Petal.Length
139                                                            date:2016-12-31 15:39:59
140                                                                          format:rda
141                                       session_info:78ce2c8ede25776f1f22c538258eed6d
142                                                                          format:rda
143                                                                          format:txt
144                                       relationWith:7f3453331910e3f321ef97d87adb5bad
145                                                                          format:png
146                                                                          format:rda
147                                                                            name:pl2
148                                                                            class:gg
149                                                                        class:ggplot
150                                                                 labelx:Sepal.Length
151                                                                 labely:Petal.Length
152                                                            date:2016-12-31 15:40:19
153                                                                          format:rda
154                                       session_info:78ce2c8ede25776f1f22c538258eed6d
155                                                                          format:rda
156                                                                          format:txt
157                                       relationWith:369227e67f9164dcbe934dadf2b53cc2
158                                                                          format:png
159                                                                          format:rda
160                                                                           name:iris
161                                                                    class:data.frame
162                                                                varname:Sepal.Length
163                                                                 varname:Sepal.Width
164                                                                varname:Petal.Length
165                                                                 varname:Petal.Width
166                                                                     varname:Species
167                                                            date:2017-11-21 14:20:10
168                                                                          format:rda
169                                       session_info:c648ca6d0bb605062f5b9416818262e7
170                                                                          format:txt
            createdDate
1   2016-02-07 00:48:44
2   2016-02-07 00:48:44
3   2016-02-07 00:48:44
4   2016-02-07 00:48:44
5   2016-02-07 01:00:33
6   2016-02-07 01:00:33
7   2016-02-07 01:00:33
8   2016-02-07 01:00:33
9   2016-02-07 01:00:33
10  2016-02-07 01:00:33
11  2016-02-07 01:00:33
12  2016-02-07 01:00:33
13  2016-02-07 01:00:33
14  2016-02-07 01:00:33
15  2016-02-07 01:00:33
16  2016-02-07 01:00:33
17  2016-02-07 01:00:33
18  2016-02-07 01:00:33
19  2016-02-07 01:00:33
20  2016-02-07 01:00:33
21  2016-02-08 15:22:15
22  2016-02-08 15:22:15
23  2016-02-08 15:22:15
24  2016-02-08 15:22:15
25  2016-02-08 15:22:15
26  2016-02-08 15:22:15
27  2016-02-08 15:22:15
28  2016-02-08 15:22:15
29  2016-02-08 15:22:15
30  2016-02-08 15:22:15
31  2016-02-08 15:22:15
32  2016-02-08 15:22:15
33  2016-02-08 15:22:15
34  2016-02-08 15:22:15
35  2016-02-08 15:22:15
36  2016-02-08 15:22:15
37  2016-02-08 15:34:53
38  2016-02-08 15:34:53
39  2016-02-08 15:34:53
40  2016-02-08 15:34:53
41  2016-02-08 15:34:53
42  2016-02-08 15:34:53
43  2016-02-08 15:57:32
44  2016-02-08 15:57:32
45  2016-02-08 15:57:32
46  2016-02-08 15:57:32
47  2016-02-08 15:57:32
48  2016-02-08 15:57:32
49  2016-02-08 15:57:32
50  2016-02-08 15:57:32
51  2016-02-08 15:57:32
52  2016-02-08 15:57:32
53  2016-02-08 15:57:32
54  2016-02-08 15:57:32
55  2016-02-08 15:57:32
56  2016-02-08 15:57:32
57  2016-02-08 15:57:32
58  2016-02-08 15:57:32
59  2016-02-08 15:57:32
60  2016-02-08 15:57:32
61  2016-02-08 15:57:32
62  2016-02-08 15:57:32
63  2016-02-08 15:57:32
64  2016-02-08 15:57:32
65  2016-02-08 15:57:32
66  2016-02-08 15:57:32
67  2016-02-08 15:57:32
68  2016-02-08 15:57:32
69  2016-02-08 15:57:32
70  2016-02-08 15:57:32
71  2016-02-08 15:57:32
72  2016-02-08 15:57:32
73  2016-02-08 15:57:32
74  2016-02-08 15:57:32
75  2016-02-08 15:57:32
76  2016-02-08 15:57:32
77  2016-02-08 15:57:32
78  2016-02-08 15:57:32
79  2016-02-08 15:57:32
80  2016-02-08 15:57:32
81  2016-02-08 15:57:32
82  2016-02-08 15:57:32
83  2016-02-08 15:57:32
84  2016-02-08 15:57:32
85  2016-02-08 15:57:32
86  2016-02-08 15:57:32
87  2016-02-08 15:57:32
88  2016-02-08 15:57:32
89  2016-02-08 15:57:32
90  2016-02-08 15:57:32
91  2016-02-08 15:57:32
92  2016-02-08 15:57:32
93  2016-02-08 15:57:32
94  2016-02-08 15:57:32
95  2016-02-08 15:57:32
96  2016-02-08 15:57:32
97  2016-02-08 15:57:32
98  2016-02-08 15:57:32
99  2016-02-08 15:57:32
100 2016-02-08 15:57:32
101 2016-02-08 15:57:32
102 2016-02-08 15:57:32
103 2016-02-08 15:57:32
104 2016-02-08 15:57:32
105 2016-02-08 15:57:32
106 2016-02-08 15:57:32
107 2016-02-08 15:57:32
108 2016-02-08 15:57:32
109 2016-02-08 15:57:32
110 2016-02-08 15:57:32
111 2016-02-08 15:57:32
112 2016-02-08 15:57:32
113 2016-02-08 15:57:32
114 2016-02-08 15:57:32
115 2016-02-08 15:57:32
116 2016-02-08 15:57:32
117 2016-02-08 15:57:32
118 2016-02-08 15:57:32
119 2016-02-08 15:57:32
120 2016-02-08 15:57:32
121 2016-03-04 19:52:25
122 2016-03-04 19:52:25
123 2016-03-04 19:52:25
124 2016-03-04 19:52:25
125 2016-03-04 19:52:31
126 2016-03-04 19:52:31
127 2016-03-04 19:52:31
128 2016-03-04 19:52:31
129 2016-03-04 19:55:05
130 2016-03-04 19:55:05
131 2016-03-04 19:55:05
132 2016-03-04 19:55:05
133 2016-12-31 15:39:59
134 2016-12-31 15:39:59
135 2016-12-31 15:39:59
136 2016-12-31 15:39:59
137 2016-12-31 15:39:59
138 2016-12-31 15:39:59
139 2016-12-31 15:39:59
140 2016-12-31 15:39:59
141 2016-12-31 15:39:59
142 2016-12-31 15:39:59
143 2016-12-31 15:39:59
144 2016-12-31 15:39:59
145 2016-12-31 15:39:59
146 2016-12-31 15:40:19
147 2016-12-31 15:40:19
148 2016-12-31 15:40:19
149 2016-12-31 15:40:19
150 2016-12-31 15:40:19
151 2016-12-31 15:40:19
152 2016-12-31 15:40:19
153 2016-12-31 15:40:19
154 2016-12-31 15:40:19
155 2016-12-31 15:40:19
156 2016-12-31 15:40:19
157 2016-12-31 15:40:19
158 2016-12-31 15:40:19
159 2017-11-21 14:20:10
160 2017-11-21 14:20:10
161 2017-11-21 14:20:10
162 2017-11-21 14:20:10
163 2017-11-21 14:20:10
164 2017-11-21 14:20:10
165 2017-11-21 14:20:10
166 2017-11-21 14:20:10
167 2017-11-21 14:20:10
168 2017-11-21 14:20:10
169 2017-11-21 14:20:10
170 2017-11-21 14:20:10
> data(iris)
> asave(iris, silent = FALSE) # iris was used in pl
Warning in asave(iris, silent = FALSE) :
  Artifact ff575c261c949d073b2895b05d1097c3 was already archived. Another archivisation executed with success.
Warning in gzfile(file, "wb") :
  cannot open compressed file '/homero/tomas/cran/rlibro/lib/archivist/graphGallery/gallery/ff575c261c949d073b2895b05d1097c3.rda', probable reason 'Read-only file system'
Error in gzfile(file, "wb") : cannot open the connection
Calls: asave -> save -> gzfile
Execution halted
