
R Under development (unstable) (2018-11-10 r75583) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "neonUtilities"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('neonUtilities')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("byFileAOP")
> ### * byFileAOP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: byFileAOP
> ### Title: Serially download all AOP files for a given site, year, and
> ###   product
> ### Aliases: byFileAOP
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To download 2017 vegetation index data from San Joaquin Experimental Range:
> ##D byFileAOP(dpID="DP3.30026.001", site="SJER", year="2017")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getAvg")
> ### * getAvg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getAvg
> ### Title: Get a list of the available averaging intervals for a data
> ###   product
> ### Aliases: getAvg
> 
> ### ** Examples
> 
> # Get available averaging intervals for PAR data product
> getAvg("DP1.00024.001")
[1] "1"  "30"
> 
> 
> 
> cleanEx()
> nameEx("getProductInfo")
> ### * getProductInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getProductInfo
> ### Title: Get NEON data product information
> ### Aliases: getProductInfo
> 
> ### ** Examples
> 
> # Get documentation and availability of plant foliar properties data product
> cfcInfo <- getProductInfo("DP1.10026.001")
> 
> 
> 
> cleanEx()
> nameEx("getProductSensors")
> ### * getProductSensors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getProductSensors
> ### Title: Get data product-sensor relationships
> ### Aliases: getProductSensors
> 
> ### ** Examples
> 
> sensors <- getProductSensors()
> 
> 
> 
> cleanEx()
> nameEx("stackByTable")
> ### * stackByTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stackByTable
> ### Title: Join data files in a zipped NEON data package by table type
> ### Aliases: stackByTable
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To unzip and merge files downloaded from the NEON Data Portal
> ##D stackByTable("~/NEON_par.zip")
> ##D 
> ##D # To unzip and merge files downloaded using zipsByProduct()
> ##D stackByTable("~/filesToStack00024", folder=T)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("zipsByProduct")
> ### * zipsByProduct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipsByProduct
> ### Title: Get files from NEON API to feed the stackByTable() function
> ### Aliases: zipsByProduct
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To download plant foliar properties data from all sites, expanded data package:
> ##D zipsByProduct(dpID="DP1.10026.001", site="all", package="expanded")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.45 0.103 2.199 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
