
R Under development (unstable) (2021-02-17 r80023) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "JuliaConnectoR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('JuliaConnectoR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AccessMutate.JuliaProxy")
> ### * AccessMutate.JuliaProxy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AccessMutate.JuliaProxy
> ### Title: Access or mutate Julia objects via proxy objects
> ### Aliases: AccessMutate.JuliaProxy $.JuliaStructProxy
> ###   $<-.JuliaStructProxy [.JuliaProxy [<-.JuliaProxy
> ###   [.JuliaSimpleArrayProxy [[.JuliaArrayProxy [[<-.JuliaArrayProxy
> ###   [[.JuliaStructProxy [[<-.JuliaStructProxy length.JuliaArrayProxy
> ###   dim.JuliaArrayProxy
> 
> ### ** Examples
> 
> if (juliaSetupOk()) {
+ 
+    # (Mutable) struct
+    juliaEval("mutable struct MyStruct
+                 x::Int
+              end")
+ 
+    MyStruct <- juliaFun("MyStruct")
+    s <- MyStruct(1L)
+    s$x
+    s$x <- 2
+    s[["x"]]
+ 
+    # Array
+    x <- juliaCall("map", MyStruct, c(1L, 2L, 3L))
+    x
+    length(x)
+    x[[1]]
+    x[[1]]$x
+    x[[1]] <- MyStruct(2L)
+    x[2:3]
+    x[2:3] <- MyStruct(2L)
+    x
+ 
+    # Tuple
+    x <- juliaEval("(1, 2, 3)")
+    x[[1]]
+    x[1:2]
+    length(x)
+ 
+    # NamedTuple
+    x <- juliaEval("(a=1, b=2)")
+    x$a
+ 
+    # Dictionary
+    strDict <- juliaEval('Dict("hi" => 1, "hello" => 2)')
+    strDict
+    strDict$hi
+    strDict$hi <- 0
+    strDict[["hi"]] <- 2
+    strDict["howdy", "greetings"] <- c(2, 3)
+    strDict["hi", "howdy"]
+ 
+ }
Starting Julia ...
[[1]]
[1] 2

[[2]]
[1] 2

> 
> ## Don't show: 
> rm(x, s, strDict)
> JuliaConnectoR:::stopJulia()
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("as.data.frame.JuliaProxy")
> ### * as.data.frame.JuliaProxy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.data.frame.JuliaProxy
> ### Title: Coerce a Julia Table to a Data Frame
> ### Aliases: as.data.frame.JuliaProxy
> 
> ### ** Examples
> 
> if (juliaSetupOk()) {
+ 
+    # Demonstrate the usage with the Julia package "JuliaDB"
+    juliaEval('import Pkg; Pkg.add("JuliaDB")')
+    JuliaDB <- juliaImport("JuliaDB")
+ 
+    mydf <- data.frame(x = c(1, 2, 3),
+                       y = c("a", "b", "c"),
+                       z = c(TRUE, FALSE, NA),
+                       stringsAsFactors = FALSE)
+ 
+    # create a table in Julia, e. g. via JuliaDB
+    mytbl <- JuliaDB$table(mydf)
+ 
+    # this table can, e g. be queried and
+    # the result can be translated to an R data frame
+    seltbl <- JuliaDB$select(mytbl, juliaExpr("(:x, :y)"))[1:2]
+ 
+    # translate selection of Julia table into R data frame
+    as.data.frame(seltbl)
+ 
+ }
Starting Julia ...
   Updating registry at `~/.julia/registries/General`
   Updating     git-repo `https://github.com/JuliaRegistries/General.git`
Fetching: [>                                        ]  0.0 %  Resolving package versions...
   Updating `/var/scratch2/tomas/cache/.julia/environments/v1.4/Project.toml`
 [no changes]
   Updating `/var/scratch2/tomas/cache/.julia/environments/v1.4/Manifest.toml`
 [no changes]
Error in handleCallbacksAndOutput() : Evaluation failed
Original error:
type RDataFrame has no field names
Stacktrace:
 [1] Main.RConnector.Fail(::String, ::ErrorException) at /var/scratch2ro/tomas/cran/rlibro/lib/JuliaConnectoR/Julia/reading.jl:6
 [2] evaluate_checked!(::Main.RConnector.Call) at /var/scratch2ro/tomas/cran/rlibro/lib/JuliaConnectoR/Julia/evaluating.jl:57
 [3] serve_repl(::Sockets.TCPSocket) at /var/scratch2ro/tomas/cran/rlibro/lib/JuliaConnectoR/Julia/communicating.jl:103
 [4] serve(::Int64; keeprunning::Bool, portfile::String) at /var/scratch2ro/tomas/cran/rlibro/lib/JuliaConnectoR/Julia/communicating.jl:73
 [5] top-level scope at /var/scratch2ro/tomas/cran/rlibro/lib/JuliaConnectoR/Julia/main.jl:21
Calls: <Anonymous> ... doTryCatch -> doCallJulia -> handleCallbacksAndOutput
Execution halted
