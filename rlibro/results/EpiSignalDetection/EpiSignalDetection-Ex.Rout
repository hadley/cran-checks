
R Under development (unstable) (2018-11-14 r75605) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EpiSignalDetection"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('EpiSignalDetection')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aggAtlasExport")
> ### * aggAtlasExport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aggAtlasExport
> ### Title: Aggregate filtered final Atlas export
> ### Aliases: aggAtlasExport
> 
> ### ** Examples
> 
> #-- Setting the parameters to run the report for
> input <- list(
+ disease = "Salmonellosis",
+ country = "EU-EEA - complete series",
+ indicator = "Reported cases",
+ stratification = "Confirmed cases",
+ unit = "Month",
+ daterange = c("2010-01-01", "2016-12-31"),
+ algo = "FarringtonFlexible",
+ testingperiod = 5
+ )
> 
> #-- Example dataset
> dataset <- EpiSignalDetection::SignalData
> 
> #-- Filtering on declared input parameters
> dataset <- filterAtlasExport(dataset, input)
> 
> #-- Aggregating the data by geographical level and time point
> dataset <- aggAtlasExport(dataset, input)
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:bindrcppâ€™

> nameEx("algoSD")
> ### * algoSD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: algoSD
> ### Title: Build algo object
> ### Aliases: algoSD
> 
> ### ** Examples
> 
> #-- Setting the parameters to run the report for
> input <- list(
+ disease = "Salmonellosis",
+ country = "EU-EEA - complete series",
+ indicator = "Reported cases",
+ stratification = "Confirmed cases",
+ unit = "Month",
+ daterange = c("2010-01-01", "2016-12-31"),
+ algo = "FarringtonFlexible",
+ testingperiod = 5
+ )
> 
> #-- Example dataset
> dataset <- EpiSignalDetection::SignalData
> 
> #-- Filtering on declared input parameters
> dataset <- filterAtlasExport(dataset, input)
> 
> #-- Aggregating the data by geographical level and time point
> dataset <- aggAtlasExport(dataset, input)
> 
> #-- Bulding the corresponding sts object
> dataset.sts <- stsSD(observedCases = dataset$NumValue,
+                      studyPeriod = dataset$StudyPeriod,
+                      timeUnit = input$unit,
+                      startYM = c(as.numeric(format(as.Date(input$daterange[1], "%Y-%m-%d"), "%Y")),
+                                  as.numeric(format(as.Date(input$daterange[1], "%Y-%m-%d"), "%m"))))
> 
> #-- Building the corresponding algo object
> dataset.algo <- algoSD(dataset.sts,
+                        algo = input$algo,
+                        timeUnit = input$unit,
+                        testingPeriod =
+                        input$testingperiod)
> 
> 
> 
> 
> cleanEx()
> nameEx("cleanAtlasExport")
> ### * cleanAtlasExport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cleanAtlasExport
> ### Title: Clean the Atlas export dataframe
> ### Aliases: cleanAtlasExport
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("filterAtlasExport")
> ### * filterAtlasExport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterAtlasExport
> ### Title: Filter clean Atlas export
> ### Aliases: filterAtlasExport
> 
> ### ** Examples
> 
> #-- Setting the parameters to run the report for
> input <- list(
+ disease = "Salmonellosis",
+ country = "EU-EEA - complete series",
+ indicator = "Reported cases",
+ stratification = "Confirmed cases",
+ unit = "Month",
+ daterange = c("2010-01-01", "2016-12-31"),
+ algo = "FarringtonFlexible",
+ testingperiod = 5
+ )
> 
> #-- Example dataset
> dataset <- EpiSignalDetection::SignalData
> 
> #-- Filtering on declared input parameters
> dataset <- filterAtlasExport(dataset, input, stratified = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("importAtlasExport")
> ### * importAtlasExport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importAtlasExport
> ### Title: Import ECDC Atlas export file (csv)
> ### Aliases: importAtlasExport
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("plotSD")
> ### * plotSD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotSD
> ### Title: Plot the Signal Detection time series
> ### Aliases: plotSD
> 
> ### ** Examples
> 
> #-- Setting the parameters to run the report for
> input <- list(
+ disease = "Salmonellosis",
+ country = "EU-EEA - complete series",
+ indicator = "Reported cases",
+ stratification = "Confirmed cases",
+ unit = "Month",
+ daterange = c("2010-01-01", "2016-12-31"),
+ algo = "FarringtonFlexible",
+ testingperiod = 5
+ )
> 
> #-- Plotting the signal detection output
> plotSD(input = input)
> 
> 
> 
> 
> cleanEx()
> nameEx("runEpiSDApp")
> ### * runEpiSDApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runEpiSDApp
> ### Title: Run the EpiSignalDectection 'shiny' application
> ### Aliases: runEpiSDApp
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("runEpiSDReport")
> ### * runEpiSDReport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runEpiSDReport
> ### Title: Run the EpiSignalDetection report (HTML markdown)
> ### Aliases: runEpiSDReport
> 
> ### ** Examples
> 
> #---> OR
> 
> #-- First setting the parameters to run the report for
> input <- list(
+ disease = "Salmonellosis",
+ country = "Portugal",
+ indicator = "Reported cases",
+ stratification = "Confirmed cases",
+ unit = "Month",
+ daterange = c("2011-01-01", "2016-12-31"),
+ algo = "FarringtonFlexible",
+ testingperiod = 6
+ )
> 
> #-- Second running the report based on the EpiSignalDetection::SignalData dataset
> #-- and store it in a temporary folder
> runEpiSDReport(input = input)


processing file: SignalDetectionReport.Rmd
   inline R code fragments

label: Config (with options) 
List of 4
 $ echo   : logi FALSE
 $ results: chr "hide"
 $ warning: logi FALSE
 $ message: logi FALSE


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

  ordinary text without R code

label: Parameters
  ordinary text without R code

label: StudyPeriod
  ordinary text without R code

label: Gaps
   inline R code fragments

label: GraphByReportingCountries
   inline R code fragments

label: LoopByCountry (with options) 
List of 2
 $ results : chr "hide"
 $ fig.show: chr "hide"

   inline R code fragments

label: AlarmTable (with options) 
List of 1
 $ results: chr "hide"



processing file: ./subsection.Rmd
   inline R code fragments

Warning in file(con, "w") :
  cannot open file 'SignalDetectionReport.knit.md': Read-only file system
Error in file(con, "w") : cannot open the connection
Calls: runEpiSDReport -> <Anonymous> -> <Anonymous> -> writeLines -> file
Execution halted
