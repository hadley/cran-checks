
R Under development (unstable) (2020-12-16 r79643) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ftrCOOL"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ftrCOOL')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AA2Binary")
> ### * AA2Binary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AA2Binary
> ### Title: Amino Acid To Binary (AA2Binary)
> ### Aliases: AA2Binary
> 
> ### ** Examples
> 
> 
> ptmSeqsADR<-system.file("extdata/",package="ftrCOOL")
> ptmSeqsVect<-as.vector(read.csv(paste0(ptmSeqsADR,"/ptmVect101AA.csv"))[,2])
> mat<-AA2Binary(seqs = ptmSeqsVect, binaryType="strBin",outFormat="mat")
> 
> 
> 
> 
> cleanEx()
> nameEx("AAKpartComposition")
> ### * AAKpartComposition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AAKpartComposition
> ### Title: Amino Acid to K Part Composition (AAKpartComposition)
> ### Aliases: AAKpartComposition
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat<-AAKpartComposition(seqs=filePrs,k=5,normalized=FALSE)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("AAindex")
> ### * AAindex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AAindex
> ### Title: Amino Acid Index (AAindex)
> ### Aliases: AAindex
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> ptmSeqsADR<-system.file("extdata/",package="ftrCOOL")
> ptmSeqsVect<-as.vector(read.csv(paste0(ptmSeqsADR,"/ptmVect101AA.csv"))[,2])
> mat<-AAindex(seqs = ptmSeqsVect, selectedAAidx=1:5,outFormat="mat")
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> ad<-paste0(dir,"/aaidx.txt")
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> AAindex(seqs = filePrs, selectedAAidx=1:5,standardized=TRUE,threshold=1,outFormat="txt"
+ ,outputFileDist=ad)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AAutoCor")
> ### * AAutoCor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AAutoCor
> ### Title: Amino Acid Autocorrelation-Autocovariance (AAutoCor)
> ### Aliases: AAutoCor
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat1<-AAutoCor(seqs=filePrs,maxlag=20,threshold=0.9,
+ type=c("Moran","Geary","NormalizeMBorto","AC"))
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
The properties ( CHAM820101, CHOC760101 ) were deleted. They had a correlation with other properties more than the threshold
> 
> mat2<-AAutoCor(seqs=filePrs,maxlag=20,threshold=0.9,selectedAAidx=
+ list(c('CIDH920105','BHAR880101','CHAM820101','CHAM820102'),c('CHOC760101','BIGC670101')
+ ,c('CHAM810101','DAYM780201')),type=c("AC","CC","ACC"))
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
The properties ( CHAM820101, CHOC760101 ) were deleted. They had a correlation with other properties more than the threshold
> 
> 
> 
> 
> cleanEx()
> nameEx("ANF_DNA")
> ### * ANF_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ANF_DNA
> ### Title: Accumulated Nucleotide Frequency (ANF_DNA)
> ### Aliases: ANF_DNA
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> LNCSeqsADR<-system.file("extdata/",package="ftrCOOL")
> LNC50Nuc<-as.vector(read.csv(paste0(LNCSeqsADR,"/LNC50Nuc.csv"))[,2])
> mat<-ANF_DNA(seqs = LNC50Nuc,outFormat="mat")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("ANF_RNA")
> ### * ANF_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ANF_RNA
> ### Title: Accumulated riboNucleotide Frequency (ANF_RNA)
> ### Aliases: ANF_RNA
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> mat<-ANF_RNA(seqs = fileLNC,outFormat="mat")
> 
> 
> 
> 
> cleanEx()
> nameEx("APAAC")
> ### * APAAC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: APAAC
> ### Title: Amphiphilic Pseudo-Amino Acid Composition(series) (APAAC)
> ### Aliases: APAAC
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat<-APAAC(seqs=filePrs,l=2,lambda=3,threshold=1)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("APkNUCTri_DNA")
> ### * APkNUCTri_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: APkNUCTri_DNA
> ### Title: Amphiphilic Pseudo-k Nucleotide Composition-Tri(series)
> ###   (APkNUCTri_DNA)
> ### Aliases: APkNUCTri_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat<-APkNUCTri_DNA(seqs=fileLNC,l=3,threshold=1)
Warning in type.convert.default(nucIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("APkNUCdi_DNA")
> ### * APkNUCdi_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: APkNUCdi_DNA
> ### Title: Amphiphilic Pseudo-k Nucleotide Composition-di(series)
> ###   (APkNUCdi_DNA)
> ### Aliases: APkNUCdi_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat<-APkNUCdi_DNA(seqs=fileLNC,ORF=TRUE,threshold=1)
Warning in type.convert.default(nucIDX) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("APkNUCdi_RNA")
> ### * APkNUCdi_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: APkNUCdi_RNA
> ### Title: Amphiphilic Pseudo-k riboNucleotide Composition-di(series)
> ###   (APkNUCdi_RNA)
> ### Aliases: APkNUCdi_RNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> mat<-APkNUCdi_RNA(seqs=fileLNC,ORF=TRUE,threshold=0.8)
Warning in type.convert.default(nucIDX) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("ASA")
> ### * ASA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ASA
> ### Title: Accessible Solvent Accessibility (ASA)
> ### Aliases: ASA
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> ad<-paste0(dir,"/asa.txt")
> 
> 
> PredASAdir<-system.file("testForder",package="ftrCOOL")
> PredASAdir<-paste0(PredASAdir,"/ASAdir/")
> ASA(PredASAdir,outFormat="txt",outputFileDist=ad)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AutoCorDiNUC_DNA")
> ### * AutoCorDiNUC_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AutoCorDiNUC_DNA
> ### Title: Di Nucleotide Autocorrelation-Autocovariance (AutoCorDiNUC_DNA)
> ### Aliases: AutoCorDiNUC_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat1<-AutoCorDiNUC_DNA(seqs=fileLNC,selectedIdx=c(1:7)
+ ,maxlag=20,type=c("Moran","Geary"))
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> mat2<-AutoCorDiNUC_DNA(seqs=fileLNC,selectedIdx=list(10,c(1,3),6:13,c(2:7))
+ ,maxlag=15,type="CC")
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("AutoCorDiNUC_RNA")
> ### * AutoCorDiNUC_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AutoCorDiNUC_RNA
> ### Title: Di riboNucleotide Autocorrelation-Autocovariance
> ###   (AutoCorDiNUC_RNA)
> ### Aliases: AutoCorDiNUC_RNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> fileLNC<-fa.read(fileLNC,alphabet="rna")
> fileLNC<-fileLNC[1:20]
> mat1<-AutoCorDiNUC_RNA(seqs=fileLNC,maxlag=20,type=c("Moran","Geary"))
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("AutoCorTriNUC_DNA")
> ### * AutoCorTriNUC_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AutoCorTriNUC_DNA
> ### Title: Tri Nucleotide Autocorrelation-Autocovariance
> ###   (AutoCorTriNUC_DNA)
> ### Aliases: AutoCorTriNUC_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat1<-AutoCorTriNUC_DNA(seqs=fileLNC,selectedNucIdx=c(1:7),maxlag=20,type=c("Moran","Geary"))
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> mat2<-AutoCorTriNUC_DNA(seqs=fileLNC,selectedNucIdx=list(c(1,3),6:10,c(2:7)),
+ maxlag=15,type=c("AC","CC"))
Warning in type.convert.default(aaIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("BLOSUM62")
> ### * BLOSUM62
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BLOSUM62
> ### Title: Blosum62 (BLOSUM62)
> ### Aliases: BLOSUM62
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> ptmSeqsADR<-system.file("extdata/",package="ftrCOOL")
> filePr<-system.file("extdata/protein.fasta",package="ftrCOOL")
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> 
> ad<-paste0(dir,"/blosum62.txt")
> vect<-BLOSUM62(seqs = filePr,outFormat="mat")
Warning in type.convert.default(Blosum) :
  'as.is' should be specified by the caller; using TRUE
> BLOSUM62(seqs = filePrs,outFormat="txt",outputFileDist=ad)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
Warning in type.convert.default(Blosum) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("CTD")
> ### * CTD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTD
> ### Title: Composition_Transition_Distribution (CTD)
> ### Aliases: CTD
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> CTDtotal<-CTD(seqs=filePrs,normalized=FALSE)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CTDC")
> ### * CTDC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTDC
> ### Title: CTD Composition (CTDC)
> ### Aliases: CTDC
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> CTD_C<-CTDC(seqs=filePrs,normalized=FALSE,label=c())
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CTDD")
> ### * CTDD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTDD
> ### Title: CTD Distribution (CTDD)
> ### Aliases: CTDD
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> CTD_D<-CTDD(seqs=filePrs)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CTDT")
> ### * CTDT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTDT
> ### Title: CTD Transition (CTDT)
> ### Aliases: CTDT
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> CTD_T<-CTDT(seqs=filePrs,normalized=FALSE)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CkSAApair")
> ### * CkSAApair
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CkSAApair
> ### Title: Composition of k-Spaced Amino Acids pairs (CkSAApair)
> ### Aliases: CkSAApair
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat1<-CkSAApair(seqs=filePrs,rng=2,upto=TRUE,normalized=TRUE)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> mat2<-CkSAApair(seqs=filePrs,rng=c(1,3,5))
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CkSGAApair")
> ### * CkSGAApair
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CkSGAApair
> ### Title: Composition of k-Spaced Grouped Amino Acids pairs (CkSGAApair)
> ### Aliases: CkSGAApair
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat1<-CkSGAApair(seqs=filePrs,rng=2,upto=TRUE,Grp="aromatic")
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> mat2<-CkSGAApair(seqs=filePrs,rng=c(1,3,5),upto=FALSE,Grp=
+ list(Grp1=c("G","A","V","L","M","I","F","Y","W"),Grp2=c("K","R","H","D","E")
+ ,Grp3=c("S","T","C","P","N","Q")))
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("CkSNUCpair_DNA")
> ### * CkSNUCpair_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CkSNUCpair_DNA
> ### Title: Composition of k-Spaced Nucleotides Pairs (CkSNUCpair_DNA)
> ### Aliases: CkSNUCpair_DNA
> 
> ### ** Examples
> 
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat1<-CkSNUCpair_DNA(seqs=fileLNC,rng=2,upto=TRUE,ORF=TRUE,reverseORF=FALSE)
> mat2<-CkSNUCpair_DNA(seqs=fileLNC,rng=c(1,3,5))
> 
> 
> 
> 
> cleanEx()
> nameEx("CkSNUCpair_RNA")
> ### * CkSNUCpair_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CkSNUCpair_RNA
> ### Title: Composition of k-Spaced riboNucleotides Pairs (CkSNUCpair_RNA)
> ### Aliases: CkSNUCpair_RNA
> 
> ### ** Examples
> 
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> mat1<-CkSNUCpair_RNA(seqs=fileLNC,rng=2,upto=TRUE,ORF=TRUE,reverseORF=FALSE)
> mat2<-CkSNUCpair_RNA(seqs=fileLNC,rng=c(1,3,5))
> 
> 
> 
> 
> cleanEx()
> nameEx("CodonFraction")
> ### * CodonFraction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CodonFraction
> ### Title: Codon Fraction (CodonFraction)
> ### Aliases: CodonFraction
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat<-CodonFraction(seqs=fileLNC,ORF=TRUE,reverseORF=FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("CodonUsage_DNA")
> ### * CodonUsage_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CodonUsage_DNA
> ### Title: Codon Usage in DNA (CodonUsage_DNA)
> ### Aliases: CodonUsage_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana_LNCRNA.fa",package="ftrCOOL")
> mat<-CodonUsage_DNA(fileLNC,ORF=TRUE,reverseORF=FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("CodonUsage_RNA")
> ### * CodonUsage_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CodonUsage_RNA
> ### Title: Codon Usage in RNA (CodonUsage_RNA)
> ### Aliases: CodonUsage_RNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> mat<-CodonUsage_RNA(seqs=fileLNC,ORF=TRUE,reverseORF=FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("DDE")
> ### * DDE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DDE
> ### Title: Dipeptide Deviation from Expected Mean value (DDE)
> ### Aliases: DDE
> 
> ### ** Examples
> 
> 
> filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
> mat<-DDE(seqs=filePrs)
Warning in readLines(file) :
  incomplete final line found on '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/proteins.fasta'
> 
> 
> 
> 
> cleanEx()
> nameEx("DiNUC2Binary_DNA")
> ### * DiNUC2Binary_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiNUC2Binary_DNA
> ### Title: Dinucleotide To Binary DNA (DiNUC2Binary_DNA)
> ### Aliases: DiNUC2Binary_DNA
> 
> ### ** Examples
> 
> 
> LNCSeqsADR<-system.file("extdata/",package="ftrCOOL")
> LNC50Nuc<-as.vector(read.csv(paste0(LNCSeqsADR,"/LNC50Nuc.csv"))[,2])
> mat<-DiNUC2Binary_DNA(seqs = LNC50Nuc, binaryType="strBin",outFormat="mat")
> 
> 
> 
> 
> cleanEx()
> nameEx("DiNUC2Binary_RNA")
> ### * DiNUC2Binary_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiNUC2Binary_RNA
> ### Title: Di riboNucleotide To Binary RNA (DiNUC2Binary_RNA)
> ### Aliases: DiNUC2Binary_RNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> mat<-DiNUC2Binary_RNA(seqs = fileLNC, binaryType="strBin",outFormat="mat")
> 
> 
> 
> 
> cleanEx()
> nameEx("DiNUCindex_DNA")
> ### * DiNUCindex_DNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiNUCindex_DNA
> ### Title: Di Nucleotide Index (DiNUCindex_DNA)
> ### Aliases: DiNUCindex_DNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Athaliana1.fa",package="ftrCOOL")
> vect<-DiNUCindex_DNA(seqs = fileLNC,outFormat="mat")
Warning in type.convert.default(nucIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> cleanEx()
> nameEx("DiNUCindex_RNA")
> ### * DiNUCindex_RNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiNUCindex_RNA
> ### Title: Di riboNucleotide Index (DiNUCindex_RNA)
> ### Aliases: DiNUCindex_RNA
> 
> ### ** Examples
> 
> 
> fileLNC<-system.file("extdata/Carica_papaya101RNA.txt",package="ftrCOOL")
> vect<-DiNUCindex_RNA(seqs = fileLNC,outFormat="mat")
Warning in type.convert.default(nucIdx) :
  'as.is' should be specified by the caller; using TRUE
> 
> 
> 
> cleanEx()
> nameEx("DisorderB")
> ### * DisorderB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DisorderB
> ### Title: disorder Binary (DisorderB)
> ### Aliases: DisorderB
> 
> ### ** Examples
> 
> 
> dir = tempdir()
> PredDisdir<-system.file("testForder",package="ftrCOOL")
> 
> PredDisdir<-paste0(PredDisdir,"/Disdir/")
> ad1<-paste0(dir,"/disorderB.txt")
> 
> mat<-DisorderB(PredDisdir,binaryType="strBin",outFormat="txt",outputFileDist=ad1)
Warning in file(con, "w") :
  cannot open file '/var/scratch2ro/tomas/cran/rlibro/lib/ftrCOOL/extdata/tempTable.txt': Read-only file system
Error in file(con, "w") : cannot open the connection
Calls: DisorderB -> readDisDir -> writeLines -> file
Execution halted
