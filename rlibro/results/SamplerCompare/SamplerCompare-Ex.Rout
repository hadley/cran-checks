
R Under development (unstable) (2018-01-02 r74022) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SamplerCompare"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SamplerCompare')
Loading required package: mvtnorm
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("check.dist.gradient")
> ### * check.dist.gradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.dist.gradient
> ### Title: Test a gradient function
> ### Aliases: check.dist.gradient
> 
> ### ** Examples
> 
>   check.dist.gradient(N2weakcor.dist, runif(2))
> 
> 
> 
> cleanEx()
> nameEx("make.dist")
> ### * make.dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.dist
> ### Title: Define a probability distribution object
> ### Aliases: make.dist
> 
> ### ** Examples
> 
>   # A one dimensional Gamma(3,2) distribution.
> 
>   # So that the density does not return NaN outside the support.
>   inflog <- function(x) ifelse(x<=0, -Inf, log(x))
>   
>   # Define density; unnormalized densities are fine.
> 
>   gamma32.log.density <- function(x) (3-1)*inflog(x) - x/2
>   gamma32.grad <- function(x) (3-1)/x - 1/2
> 
>   # Use make.dist to define the distribution object.
>  
>   gamma32.dist <- make.dist(1, 'Gamma32', 'plain("Gamma")(3,2)',
+                             log.density=gamma32.log.density,
+                             grad.log.density=gamma32.grad,
+                             mean=3*2, cov=as.matrix(3*2^2))
> 
>   # Make sure the log density and gradient agree at an arbitrary point.
> 
>   check.dist.gradient(gamma32.dist, 17)
> 
> 
> 
> cleanEx()
> nameEx("make.gaussian")
> ### * make.gaussian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.gaussian
> ### Title: Gaussian distribution objects
> ### Aliases: make.gaussian N2weakcor.dist N4poscor.dist N4negcor.dist
> 
> ### ** Examples
> 
>   N2weakcor.dist <- make.gaussian(c(0,0), rho=0.8)
>   N4poscor.dist <- make.gaussian(c(1,2,3,4), rho=0.999)
>   N4negcor.dist <- make.gaussian(c(1,2,3,4), rho=-0.3329)
> 
> 
> 
> cleanEx()
> nameEx("simulation.result")
> ### * simulation.result
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulation.result
> ### Title: Summarize one MCMC chain
> ### Aliases: simulation.result
> 
> ### ** Examples
> ## Not run: 
> ##D # An example generated with the following JAGS model:
> ##D #
> ##D # model {
> ##D #   mu[1] <- 0
> ##D #   mu[2] <- 0
> ##D #   Sigma[1,1] <- 1
> ##D #   Sigma[2,2] <- 1
> ##D #   Sigma[1,2] <- 0.7
> ##D #   Sigma[2,1] <- 0.7
> ##D #   x ~ dmnorm(mu, inverse(Sigma))
> ##D # }
> ##D #
> ##D # and the following JAGS script:
> ##D #
> ##D # model in "mv.7.model"
> ##D # compile, nchains(1)
> ##D # initialize
> ##D # update 1000
> ##D # monitor x
> ##D # update 10000
> ##D # coda *
> ##D 
> ##D # Load data written by JAGS
> ##D 
> ##D library(coda)
> ##D X <- read.coda('CODAchain1.txt', 'CODAindex.txt')
> ##D 
> ##D # Dummy distribution object.
> ##D 
> ##D N2.dist <- make.dist(2, '2D Normal, cor=0.7', mean=c(0,0))
> ##D 
> ##D # Compute simulation result.  evals and tuning are hacks; they
> ##D # are undefined with Gibbs sampling.  JAGS can do its own burn-in,
> ##D # so set burn.in to zero.
> ##D 
> ##D sim.result <- simulation.result(N2.dist, 'JAGS', X,
> ##D                                 evals=nrow(X)*ncol(X), tuning=1,
> ##D                                 burn.in=0)
> ## End(Not run)
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.216 0.012 0.226 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
