
R Under development (unstable) (2020-10-13 r79336) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MODIStsp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('MODIStsp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MODIStsp")
> ### * MODIStsp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MODIStsp
> ### Title: MODIStsp main function
> ### Aliases: MODIStsp
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #' # - Running the tool using the GUI
> ##D 
> ##D # Running the tool without any option will start the GUI with the default or
> ##D # last used settings, in interactive mode (i.e., with gui = TRUE).
> ##D 
> ##D # MODIStsp()
> ## End(Not run)
> ## Not run: 
> ##D 
> ##D #' # - Running the tool specifying processing arguments in the call
> ##D 
> ##D # **NOTE** Output files of examples are saved to file.path(tempdir(), "MODIStsp").
> ##D 
> ##D # Here we process layers __NDVI__ and __EVI__ and quality indicator __usefulness__
> ##D # of product __M*D13Q1__, considering both Terra and Aqua platforms, for dates
> ##D # comprised between 2020-06-01 and 2020-06-15 and saves output to R tempdir
> ##D # --> See name and available layers for product M*D13Q1
> ##D 
> ##D MODIStsp_get_prodlayers("M*D13A2")
> ##D 
> ##D # --> Launch the processing
> ##D MODIStsp(gui             = FALSE,
> ##D          out_folder      = "$tempdir",
> ##D          selprod         = "Vegetation_Indexes_16Days_1Km (M*D13A2)",
> ##D          bandsel         = c("EVI", "NDVI"),
> ##D          quality_bandsel = "QA_usef",
> ##D          indexes_bandsel = "SR",
> ##D          user            = "mstp_test" ,
> ##D          password        = "MSTP_test_01",
> ##D          start_date      = "2020.06.01",
> ##D          end_date        = "2020.06.15",
> ##D          verbose         = FALSE)
> ## End(Not run)
> 
> ## Not run: 
> ##D 
> ##D #' # - Running the tool using the settings previously saved in a specific options file
> ##D 
> ##D # **NOTE** Output files of examples are saved to file.path(tempdir(), "MODIStsp").
> ##D # You can run the examples with `gui = TRUE` to set a different output folder!
> ##D 
> ##D # Here we use a test json file saved in MODIStsp installation folder which
> ##D # downloads and processed 3 MOD13A2 images over the Como Lake (Lombardy, Italy)
> ##D # and retrieves NDVI and EVI data, plus the Usefulness Index Quality Indicator.
> ##D 
> ##D opts_file <- system.file("testdata/test_MOD13A2.json", package = "MODIStsp")
> ##D MODIStsp(gui = FALSE, opts_file = opts_file, verbose = TRUE)
> ## End(Not run)
> 
> ## Not run: 
> ##D 
> ##D # Running the tool using the settings previously saved in a specific option file
> ##D # and specifying the extent from a spatial file allows to re-use the same
> ##D # processing settings to perform download and reprocessing on a different area
> ##D 
> ##D opts_file <- system.file("testdata/test_MOD13A2.json", package = "MODIStsp")
> ##D spatial_file <- system.file("testdata/lakeshapes/garda_lake.shp", package = "MODIStsp")
> ##D MODIStsp(gui = FALSE, opts_file = opts_file,
> ##D   spatmeth = "file",
> ##D   spafile = spatial_file, verbose = TRUE)
> ## End(Not run)
> 
> ## Not run: 
> ##D 
> ##D # Running the tool using the settings previously saved in a
> ##D # specific options file and specifying each time the extent from a different
> ##D # spatial file (e.g., to perform the same processing on several extents)
> ##D 
> ##D extent_list  <- c(system.file("testdata/lakeshapes/garda_lake.shp",
> ##D                               package = "MODIStsp"),
> ##D                   system.file("testdata/lakeshapes/iseo_lake.shp",
> ##D                               package = "MODIStsp"))
> ##D extent_list
> ##D 
> ##D # Note that you can also put all your extent files in a specific folder and
> ##D # create the extent list using for example.
> ##D # extent_list = list.files(system.file("testdata/lakeshapes/", package = "MODIStsp"),
> ##D #                          full.names = TRUE, "\.shp$")
> ##D 
> ##D opts_file <- system.file("testdata/test_MOD13A2.json", package = "MODIStsp")
> ##D for (single_shape in extent_list) {
> ##D   MODIStsp(gui = FALSE, opts_file = opts_file,
> ##D            spatmeth = "file",
> ##D            spafile = single_shape, verbose = TRUE)
> ##D }
> ##D 
> ##D # output files are placed in separate folders:
> ##D outfiles_garda <- list.files(file.path(tempdir(), "MODIStsp/garda_lake/VI_16Days_1Km_v6/NDVI"),
> ##D            full.names = TRUE)
> ##D outfiles_garda
> ##D 
> ##D library(raster)
> ##D plot(raster(outfiles_garda[1] ))
> ##D 
> ##D outfiles_iseo <- list.files(file.path(tempdir(), "MODIStsp/iseo_lake/VI_16Days_1Km_v6/NDVI"),
> ##D            full.names = TRUE)
> ##D outfiles_iseo
> ##D 
> ##D plot(raster(outfiles_iseo[1]))
> ##D 
> ##D # See also https://docs.ropensci.org/MODIStsp/articles/noninteractive_execution.html
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("MODIStsp_addindex")
> ### * MODIStsp_addindex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MODIStsp_addindex
> ### Title: Add custom spectral indexes
> ### Aliases: MODIStsp_addindex
> 
> ### ** Examples
> 
> # Run the GUI to interactively define a new index
>  ## Not run: 
> ##D  MODIStsp_addindex()
> ## End(Not run)
> 
> # Define the new index in non-interactive execution
> 
> ## Not run: 
> ##D MODIStsp_addindex(new_indexbandname = "SSI",
> ##D   new_indexfullname = "Simple Useless Index",
> ##D   new_indexformula = "b2_NIR+b1_Red")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("MODIStsp_extract")
> ### * MODIStsp_extract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MODIStsp_extract
> ### Title: Extract data from MODIStsp time series
> ### Aliases: MODIStsp_extract
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Extract average and standard deviation values from a rts object created by
> ##D # MODIStsp for each polygon of a shapefile, for each date in the period
> ##D # between 2001-01-01 and 2014-12-31
> ##D 
> ##D # The example uses tif files in testdata/VI_16Days_500m_v6 to build
> ##D # a MODIStsp rasterStack corresponding to the 2016 time series of the NDVI index
> ##D # over the Como Lake (Italy). It then extracts data on polygons corresponding
> ##D # to different land cover classes saved in testdata/extract_polys.shp
> ##D 
> ##D # First, prepare the test dataset.
> ##D # __NOTE__ To avoid redownloading, here we copy some test data from MODIStsp
> ##D # installation folder to tempdir and use it to create a test time series.
> ##D 
> ##D test_folder <-  system.file("testdata/VI_16Days_500m_v6/NDVI",
> ##D                             package = "MODIStsp")
> ##D dir.create(file.path(tempdir(), "MODIStsp/VI_16Days_500m_v6/NDVI/"),
> ##D            showWarnings = FALSE, recursive = TRUE)
> ##D file.copy(list.files(test_folder, full.names = TRUE),
> ##D           file.path(tempdir(), "MODIStsp/VI_16Days_500m_v6/NDVI/"))
> ##D 
> ##D opts_file <- system.file("testdata/test_extract.json", package = "MODIStsp")
> ##D MODIStsp(opts_file = opts_file, gui = FALSE, verbose = FALSE)
> ##D 
> ##D # Now load the MODIStsp stack: This is a MODIS NDVI time series ranging between
> ##D # 2016-01-01 and 2016-12-18
> ##D # __NOTE__: MODIStsp rasterStack files are always saved in the "Time_Series\/RData"
> ##D # subfolder of your main output folder - see
> ##D # "https://docs.ropensci.org/MODIStsp/articles/output.html")
> ##D 
> ##D # Specify the filename of the RData RasterStack of interest
> ##D stack_file  <- file.path(tempdir(),
> ##D  "MODIStsp/VI_16Days_500m_v6/Time_Series/RData/Terra/NDVI",
> ##D   "MOD13A1_NDVI_1_2016_353_2016_RData.RData")
> ##D basename(stack_file)
> ##D 
> ##D ts_data <- get(load(stack_file))
> ##D ts_data
> ##D 
> ##D # Now load a shapefile containing polygons from which we want to extract data
> ##D 
> ##D polygons <- sf::st_read(system.file("testdata/extract_polys.shp",
> ##D                            package = "MODIStsp"), quiet = TRUE)
> ##D polygons
> ##D 
> ##D # Finally, extract the average values for each polygon and date and plot the
> ##D # results
> ##D 
> ##D out_dataavg <- suppressMessages(MODIStsp_extract(ts_data, polygons, id_field = "lc_type",
> ##D                              small = FALSE))
> ##D head(out_dataavg)
> ##D 
> ##D plot(out_dataavg, legend.loc = "topleft")
> ##D 
> ##D # use a different summarization function
> ##D 
> ##D out_datasd <- MODIStsp_extract(ts_data, polygons, id_field = "lc_type",
> ##D                               FUN = "sd", small = FALSE)
> ##D head(out_datasd)
> ##D 
> ##D # (See also https://docs.ropensci.org/MODIStsp/articles/Analyze.html for a
> ##D # worked-out example)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("MODIStsp_get_prodlayers")
> ### * MODIStsp_get_prodlayers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MODIStsp_get_prodlayers
> ### Title: Retrieve the names of MODIS layers for a product
> ### Aliases: MODIStsp_get_prodlayers
> 
> ### ** Examples
> 
> 
> # Get layers of product M*13Q1 based on code
> MODIStsp_get_prodlayers("M*13Q1")
Reading the MODIS products' characteristics from XML. Please wait!
Warning in gzfile(file, "wb") :
  cannot open compressed file '/var/scratch2ro/tomas/cran/rlibro/lib/MODIStsp/ExtData/MODIStsp_ProdOpts.RData', probable reason 'Read-only file system'
Error in gzfile(file, "wb") : cannot open the connection
Calls: MODIStsp_get_prodlayers ... load_prodopts -> MODIStsp_read_xml -> save -> gzfile
Execution halted
