
R Under development (unstable) (2018-04-24 r74637) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RSMET"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RSMET')
Loading required package: stringr
Loading required package: reshape2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.meteoioini")
> ### * as.meteoioini
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.meteoioini
> ### Title: Coerces an object to a 'meteoioini-class' object
> ### Aliases: as.meteoioini as.meteoioini,character-method
> ###   as.meteoioini,list-method as.meteoioini,meteoioini-method
> 
> ### ** Examples
> 
> 
> ini <- as.meteoioini("test")
>  
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("as.smet")
> ### * as.smet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.smet
> ### Title: Coerces an object to a 'smet-class' object
> ### Aliases: as.smet as.smet,character-method as.smet,data.frame-method
> ###   as.smet,list-method as.smet,smet-method
> 
> ### ** Examples
> 
> data(meteofrance)
> 
> 
> ## Choose a particular station 
> station_id <-  unique(meteofrance$station_id)[3]
> 
> 
> 
> 
> variables <- c("timestamp","DW","VW","TA","TD","RH","MFR_rr24",
+       "MFR_tn12","MFR_tn24","MFR_tx12","MFR_tx24","HS","HS_fresh")
> header <- c("longitude","latitude","station_id" ,"altitude","location")
> names(header) <- header
> 
> 
> 
> data <- meteofrance[meteofrance$station_id==station_id,c(header,variables)]
> metaparam <- attr(meteofrance,"metaparam")
> metaparam <- metaparam[metaparam$SMET_ID %in% names(data),]
> header <- lapply(X=header,FUN=function(x,data) {data[1,x]},data=data)
> data <- data[,variables]
> attr(data,"header") <- header
> attr(data,"metaparam") <- metaparam
> 
> sm <- as.smet(data)
> 
> # In case of multiple station, it return a list of SMET-class objects: 
> 
> ## This opton works for more than one station, 
> #in case of one station this works too only if it is FORCED!
> 
> sm_multi <- as.smet(meteofrance,variables=variables)
> 
> 
> onestation <- meteofrance[meteofrance$station_id=="07499",]
> sm_o <- as.smet(onestation,variables=variables,force.multistation=TRUE)
> 
> 
>  
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("collapse.smet")
> ### * collapse.smet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapse.smet
> ### Title: Coerces a 'smet-class' object to a data frame
> ### Aliases: collapse.smet
> 
> ### ** Examples
> 
> 
> smet1 <- as.smet(system.file("examples/zugspitze1.smet",package="RSMET"))
> smet2 <- as.smet(system.file("examples/zugspitze2.smet",package="RSMET"))
> 
> newsmet <- collapse.smet(x=smet1,y=smet2)
> 
> newsmet_ <- collapse.smet(x=smet2,y=smet1)
> 
> 
> x <- smet(system.file('examples/PIEM001114.smet',package="RSMET"))
> y <- smet(system.file('examples/PIEM001114_20160308.smet',package="RSMET"))
> 
> 
> xy <-  collapse.smet(x,y) 
Warning in collapse.smet(x, y) :
  Collapsing SMET : header mismatch!!!   fields: timestamp VW DW TA HS == timestamp TA HS   units_offset: 0 0 0 0 0 == 0 0 0   units_multiplier: 1 1 1 1 1 == 1 1 1   station_id: PIEM001114 == PIEM001114
> 
> 
> 
> 
> cleanEx()
> nameEx("extract")
> ### * extract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [.smet
> ### Title: '[' S3 method for 'smet-class' object
> ### Aliases: Extract [ [.smet
> 
> ### ** Examples
> 
> 
> x <- smet(system.file('examples/PIEM001114.smet',package="RSMET"))
> x[,1:3]
SMET 1.1 ASCII
[HEADER]
station_id = PIEM001114
latitude = 45.15421
longitude = 6.916477
altitude = 2745
nodata = -999
tz =                  +00
fields = timestamp VW DW
units_offset = 0 0 0
units_multiplier = 1 1 1
station_name =                  RIFUGIO VACCARONE
municipality =                  GIAGLIONE  (TO)
location =                  RIFUGIO VACCARONE
station_url =                  http://webgis.arpa.piemonte.it/webmeteo/meteo.php?CODTOT=001114901
[DATA]
2016-02-23T08:00:00 -999.0 -999
2016-02-23T08:30:00 -999.0 -999
2016-02-23T09:30:00 -999.0 -999
2016-02-23T09:36:04    4.4  253
2016-02-23T09:36:09 -999.0 -999
2016-02-23T10:00:00 -999.0 -999
2016-02-23T10:30:00 -999.0 -999
2016-02-23T10:36:03    5.4  255
2016-02-23T10:36:08 -999.0 -999
2016-02-23T11:06:03    5.7  268
2016-02-23T11:06:09 -999.0 -999
2016-02-23T11:16:03    5.7  268
2016-02-23T11:16:09 -999.0 -999
2016-02-23T11:26:03    5.7  268
2016-02-23T11:26:08 -999.0 -999
2016-02-23T11:30:00 -999.0 -999
2016-02-23T11:36:03    7.0  272
2016-02-23T11:36:09 -999.0 -999
2016-02-23T12:00:00 -999.0 -999
2016-02-23T12:26:03    4.8  272
...
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_replacemethod")
> ### * extract_replacemethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [<-.smet
> ### Title: "[<-" S3 Replacement method for 'smet-class' object
> ### Aliases: [<-,extract_replacemethod [<-.smet
> 
> ### ** Examples
> 
> rm(list=ls())
> 
> 
>  ### SMET Rifugio Vaccarone
> 
> 
> 
> cleanEx()
> nameEx("fields")
> ### * fields
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fields
> ### Title: Extract the fields of a 'smet-class' object
> ### Aliases: fields fields,smet-method
> 
> ### ** Examples
> 
> 
> 
> df <- data.frame(a=1:6,c=1:6)
> fields(df)
[1] "a" "c"
> 
> x <- smet(system.file('examples/PIEM001114.smet',package="RSMET"))
> fields(x)
  timestamp          VW          DW          TA          HS 
"timestamp"        "VW"        "DW"        "TA"        "HS" 
> 
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("header_attr")
> ### * header_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: header_attr
> ### Title: Header attributes of a 'smet' object.
> ### Aliases: header_attr
> 
> ### ** Examples
> 
> 
> x <- smet(system.file('examples/PIEM001114.smet',package="RSMET"))
> header_attr(x,attr="station_name")
[1] "                 RIFUGIO VACCARONE"
> 
> header_attr(list(x,x),attr="station_name")
[1] "                 RIFUGIO VACCARONE" "                 RIFUGIO VACCARONE"
> 
> 
> 
> 
> cleanEx()
> nameEx("meteofrance")
> ### * meteofrance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meteofrance
> ### Title: Snow Weather Data in France
> ### Aliases: meteofrance
> 
> ### ** Examples
> 
>  
> 
> 
> 
> 
> library(ggmap)
Loading required package: ggplot2
> data(meteofrance)
> 
> ## Not run: 
> ##D ## See help(get_map) documentation and run the example with a connection to Google!
> ##D 
> ##D dates <- as.Date(meteofrance$timestamp)
> ##D 
> ##D data=meteofrance[dates==dates[1],]
> ##D 
> ##D 
> ##D 
> ##D map <- get_map(location ="France", zoom = 6)
> ##D 
> ##D size <- 3
> ##D 
> ##D gsnow <- ggmap(map) +
> ##D 		geom_point(data = data,aes(x = longitude, y = latitude),size=size,  alpha
> ##D 						=1, color="blue",show.legend  = FALSE)
> ##D 
> ##D ## Uncomment if you want to save in PDF format the otput of gsnow
> ##D ## ggsave("test-map.pdf", gsnow,width=10,height=10)
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:ggmap’, ‘package:ggplot2’

> nameEx("meteofranceSynop")
> ### * meteofranceSynop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meteofranceSynop
> ### Title: SYNOP Weather Data in France
> ### Aliases: meteofranceSynop
> 
> ### ** Examples
> 
>  
> 
> library(ggmap)
Loading required package: ggplot2
> data(meteofranceSynop)
> 
> 
> ## Not run: 
> ##D ## See help(get_map) documentation and run the example with a connection to Google!
> ##D data=meteofranceSynop[meteofranceSynop$timestamp==meteofranceSynop$timestamp[250],]
> ##D 
> ##D 
> ##D 
> ##D map <- get_map(location ="France", zoom = 6)
> ##D 
> ##D size <- 3
> ##D 
> ##D gsynop <- ggmap(map) +
> ##D 		geom_point(data = data,aes(x = longitude, y = latitude),size=size,  alpha
> ##D 						=1, color="blue",show.legend  = FALSE)
> ##D 
> ##D ## Uncomment if you want to save in PDF format the otput of gsynop
> ##D ## ggsave("test-map.pdf", gsynop,width=10,height=10)
> ## End(Not run) 
> 
> 
> 
> cleanEx()

detaching ‘package:ggmap’, ‘package:ggplot2’

> nameEx("meteoioini-class")
> ### * meteoioini-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meteoioini-class
> ### Title: meteoioini-class
> ### Aliases: meteoioini-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("meteoioini")
Class "meteoioini" [package "RSMET"]

Slots:
                                                                      
Name:          General           Input          Output         Filters
Class:            list            list            list            list
                                      
Name:  Interpolation2D            file
Class:            list       character
> as.meteoioini("test")


[General]
BUFF_CHUNK_SIZE = 30
BUFF_BEFORE = 1.5


[Input]
COORDSYS = CH1903v
TIME_ZONE = 1
DEM = ARC
DEMFILE = ../input/surface-grids/Switzerland_1000m.asc
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ../input/meteo
STATION1 = FLU2
STATION2 = FIR2
STATION3 = FRA2
STATION4 = GLA2
STATION5 = ILI2
STATION6 = OTT2
STATION7 = TUJ3


[Output]
COORDSYS = CH1903
TIME_ZONE = 1
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ./


[Filters]
TA::filter1 = min
TA::arg1 = 240
TA::filter2 = max
TA::arg2 = 320
TA::filter3 = unventilated_T
TA::arg3 = 0.23
RH::filter1 = min_max
RH::arg1 = 0.01 1.2
RH::filter2 = min_max
RH::arg2 = soft 0.05 1.0
PSUM::filter1 = min
PSUM::arg1 = -0.1
PSUM::filter2 = min
PSUM::arg2 = soft 0.
PSUM::filter3 = unheated_raingauge
PSUM::arg3 = soft 0.5 3.
PSUM::filter4 = undercatch_wmo
PSUM::arg4 = Hellmannsh
ISWR::filter1 = min_max
ISWR::arg1 = -10. 1500.
ISWR::filter2 = min
ISWR::arg2 = soft 0.
RSWR::filter1 = min_max
RSWR::arg1 = -10 1500
RSWR::filter2 = min
RSWR::arg2 = soft 0
RSWR::filter3 = median_avg
RSWR::arg3 = soft center 3 14400
ILWR::filter1 = min_max
ILWR::arg1 = 188 600
ILWR::filter2 = min_max
ILWR::arg2 = soft 200 400
ILWR::filter3 = mean_avg
ILWR::arg3 = soft right 3 14400
TSS::filter1 = min_max
TSS::arg1 = 200 320
TSS::filter2 = add
TSS::arg2 = 0.25
TSS::filter3 = exp_smoothing
TSS::arg3 = right 3 3600 0.8
TSG::filter1 = min_max
TSG::arg1 = 200 320
TSG::filter2 = mult
TSG::arg2 = 1.002
TSG::filter3 = wma_smoothing
TSG::arg3 = right 3 3600
HS::filter1 = min
HS::arg1 = soft 0.0
HS::filter2 = rate
HS::arg2 = 5.55e-5 ;0.20 m/h
HS::filter3 = mad
HS::arg3 = soft left 10 21600
VW::filter1 = min_max
VW::arg1 = -2 70
VW::filter2 = min_max
VW::arg2 = soft 0.2 50.0
VW::filter3 = std_dev
VW::arg3 = soft center 6 21600
WINDOW_SIZE = 86400
TA::resample = linear
RH::resample = linear
RH::linear = extrapolate
HS::resample = linear
PSUM::resample = accumulate
PSUM::accumulate = 3600
VW::resample = nearest
VW::nearest = extrapolate
TA::algorithms = IDW_LAPSE
TA::idw_lapse = -0.008 soft
TSS::algorithms = CST_LAPSE
TSS::cst_lapse = -0.008
TSG::algorithms = CST
TSG::cst = 273.15
RH::algorithms = RH IDW_LAPSE CST
PSUM::algorithms = PSUM_SNOW
PSUM::psum_snow = cst_lapse
PSUM::cst_lapse = 0.0005 frac
VW::algorithms = LISTON_WIND
DW::algorithms = IDW
P::algorithms = STD_PRESS
RSWR::algorithms = IDW

> 
> 
> 
> 
> cleanEx()
> nameEx("meteoioini")
> ### * meteoioini
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meteoioini
> ### Title: Function to read a a Meteo IO *.ini file
> ### Aliases: meteoioini
> 
> ### ** Examples
> 
> 
> file <- system.file("examples/io.ini",package="RSMET")
> ini <- meteoioini(file)
> 
> 
> 
> 
> cleanEx()
> nameEx("print")
> ### * print
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.smet
> ### Title: "Print" and "Show" method for "smet-class" object
> ### Aliases: print print.smet show show,smet-method
> 
> ### ** Examples
> 
> 
> file <- system.file("examples/test.smet",package="RSMET")
> sm <- smet(file)
> print(sm)
SMET 1.1 ASCII
[HEADER]
station_id = test_station
latitude = 46.5
longitude = 9.8
altitude = 1500
nodata = -999
tz =  +01
fields = timestamp TA RH VW ISWR
units_offset = 0 273.15 0 0 0
units_multiplier = 1 1 0.01 1 1
[DATA]
2010-06-22T12:00:00 2.0 52 1.2 320
2010-06-22T13:00:00 3.0 60 2.4 340
2010-06-22T14:00:00 2.8 56 2.0 330
SMET 1.1 ASCII
[HEADER]
station_id = test_station
latitude = 46.5
longitude = 9.8
altitude = 1500
nodata = -999
tz =  +01
fields = timestamp TA RH VW ISWR
units_offset = 0 273.15 0 0 0
units_multiplier = 1 1 0.01 1 1
[DATA]
2010-06-22T12:00:00 2.0 52 1.2 320
2010-06-22T13:00:00 3.0 60 2.4 340
2010-06-22T14:00:00 2.8 56 2.0 330
> 
> 
> 
> 
> cleanEx()
> nameEx("print_meteioini")
> ### * print_meteioini
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.meteoioini
> ### Title: "Print" and "Show" method for "meteoioini-class" object
> ### Aliases: print.meteoioini print_meteioini show,meteoioini-method
> ###   show_meteioini
> 
> ### ** Examples
> 
> 
> file <- system.file("examples/io.ini",package="RSMET")
> ini <- meteoioini(file)
> print(ini)


[General]
BUFF_CHUNK_SIZE = 30
BUFF_BEFORE = 1.5


[Input]
COORDSYS = CH1903v
TIME_ZONE = 1
DEM = ARC
DEMFILE = ../input/surface-grids/Switzerland_1000m.asc
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ../input/meteo
STATION1 = FLU2
STATION2 = FIR2
STATION3 = FRA2
STATION4 = GLA2
STATION5 = ILI2
STATION6 = OTT2
STATION7 = TUJ3


[Output]
COORDSYS = CH1903
TIME_ZONE = 1
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ./


[Filters]
TA::filter1 = min
TA::arg1 = 240
TA::filter2 = max
TA::arg2 = 320
TA::filter3 = unventilated_T
TA::arg3 = 0.23
RH::filter1 = min_max
RH::arg1 = 0.01 1.2
RH::filter2 = min_max
RH::arg2 = soft 0.05 1.0
PSUM::filter1 = min
PSUM::arg1 = -0.1
PSUM::filter2 = min
PSUM::arg2 = soft 0.
PSUM::filter3 = unheated_raingauge
PSUM::arg3 = soft 0.5 3.
PSUM::filter4 = undercatch_wmo
PSUM::arg4 = Hellmannsh
ISWR::filter1 = min_max
ISWR::arg1 = -10. 1500.
ISWR::filter2 = min
ISWR::arg2 = soft 0.
RSWR::filter1 = min_max
RSWR::arg1 = -10 1500
RSWR::filter2 = min
RSWR::arg2 = soft 0
RSWR::filter3 = median_avg
RSWR::arg3 = soft center 3 14400
ILWR::filter1 = min_max
ILWR::arg1 = 188 600
ILWR::filter2 = min_max
ILWR::arg2 = soft 200 400
ILWR::filter3 = mean_avg
ILWR::arg3 = soft right 3 14400
TSS::filter1 = min_max
TSS::arg1 = 200 320
TSS::filter2 = add
TSS::arg2 = 0.25
TSS::filter3 = exp_smoothing
TSS::arg3 = right 3 3600 0.8
TSG::filter1 = min_max
TSG::arg1 = 200 320
TSG::filter2 = mult
TSG::arg2 = 1.002
TSG::filter3 = wma_smoothing
TSG::arg3 = right 3 3600
HS::filter1 = min
HS::arg1 = soft 0.0
HS::filter2 = rate
HS::arg2 = 5.55e-5 ;0.20 m/h
HS::filter3 = mad
HS::arg3 = soft left 10 21600
VW::filter1 = min_max
VW::arg1 = -2 70
VW::filter2 = min_max
VW::arg2 = soft 0.2 50.0
VW::filter3 = std_dev
VW::arg3 = soft center 6 21600
WINDOW_SIZE = 86400
TA::resample = linear
RH::resample = linear
RH::linear = extrapolate
HS::resample = linear
PSUM::resample = accumulate
PSUM::accumulate = 3600
VW::resample = nearest
VW::nearest = extrapolate
TA::algorithms = IDW_LAPSE
TA::idw_lapse = -0.008 soft
TSS::algorithms = CST_LAPSE
TSS::cst_lapse = -0.008
TSG::algorithms = CST
TSG::cst = 273.15
RH::algorithms = RH IDW_LAPSE CST
PSUM::algorithms = PSUM_SNOW
PSUM::psum_snow = cst_lapse
PSUM::cst_lapse = 0.0005 frac
VW::algorithms = LISTON_WIND
DW::algorithms = IDW
P::algorithms = STD_PRESS
RSWR::algorithms = IDW



[General]
BUFF_CHUNK_SIZE = 30
BUFF_BEFORE = 1.5


[Input]
COORDSYS = CH1903v
TIME_ZONE = 1
DEM = ARC
DEMFILE = ../input/surface-grids/Switzerland_1000m.asc
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ../input/meteo
STATION1 = FLU2
STATION2 = FIR2
STATION3 = FRA2
STATION4 = GLA2
STATION5 = ILI2
STATION6 = OTT2
STATION7 = TUJ3


[Output]
COORDSYS = CH1903
TIME_ZONE = 1
GRID2D = ARC
GRID2DPATH = ./
METEO = SMET
METEOPATH = ./


[Filters]
TA::filter1 = min
TA::arg1 = 240
TA::filter2 = max
TA::arg2 = 320
TA::filter3 = unventilated_T
TA::arg3 = 0.23
RH::filter1 = min_max
RH::arg1 = 0.01 1.2
RH::filter2 = min_max
RH::arg2 = soft 0.05 1.0
PSUM::filter1 = min
PSUM::arg1 = -0.1
PSUM::filter2 = min
PSUM::arg2 = soft 0.
PSUM::filter3 = unheated_raingauge
PSUM::arg3 = soft 0.5 3.
PSUM::filter4 = undercatch_wmo
PSUM::arg4 = Hellmannsh
ISWR::filter1 = min_max
ISWR::arg1 = -10. 1500.
ISWR::filter2 = min
ISWR::arg2 = soft 0.
RSWR::filter1 = min_max
RSWR::arg1 = -10 1500
RSWR::filter2 = min
RSWR::arg2 = soft 0
RSWR::filter3 = median_avg
RSWR::arg3 = soft center 3 14400
ILWR::filter1 = min_max
ILWR::arg1 = 188 600
ILWR::filter2 = min_max
ILWR::arg2 = soft 200 400
ILWR::filter3 = mean_avg
ILWR::arg3 = soft right 3 14400
TSS::filter1 = min_max
TSS::arg1 = 200 320
TSS::filter2 = add
TSS::arg2 = 0.25
TSS::filter3 = exp_smoothing
TSS::arg3 = right 3 3600 0.8
TSG::filter1 = min_max
TSG::arg1 = 200 320
TSG::filter2 = mult
TSG::arg2 = 1.002
TSG::filter3 = wma_smoothing
TSG::arg3 = right 3 3600
HS::filter1 = min
HS::arg1 = soft 0.0
HS::filter2 = rate
HS::arg2 = 5.55e-5 ;0.20 m/h
HS::filter3 = mad
HS::arg3 = soft left 10 21600
VW::filter1 = min_max
VW::arg1 = -2 70
VW::filter2 = min_max
VW::arg2 = soft 0.2 50.0
VW::filter3 = std_dev
VW::arg3 = soft center 6 21600
WINDOW_SIZE = 86400
TA::resample = linear
RH::resample = linear
RH::linear = extrapolate
HS::resample = linear
PSUM::resample = accumulate
PSUM::accumulate = 3600
VW::resample = nearest
VW::nearest = extrapolate
TA::algorithms = IDW_LAPSE
TA::idw_lapse = -0.008 soft
TSS::algorithms = CST_LAPSE
TSS::cst_lapse = -0.008
TSG::algorithms = CST
TSG::cst = 273.15
RH::algorithms = RH IDW_LAPSE CST
PSUM::algorithms = PSUM_SNOW
PSUM::psum_snow = cst_lapse
PSUM::cst_lapse = 0.0005 frac
VW::algorithms = LISTON_WIND
DW::algorithms = IDW
P::algorithms = STD_PRESS
RSWR::algorithms = IDW

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("pushSmetIntoIni")
> ### * pushSmetIntoIni
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pushSmetIntoIni
> ### Title: Pushes SMET object file into a 'meteoioini-class' object
> ### Aliases: pushSmetIntoIni
> 
> ### ** Examples
> 
> 
> ini <- as.meteoioini("test")
> 
> AA <- as.smet("test")
> BB <- as.smet("test")
> 
> 
> newini <- pushSmetIntoIni(AA,BB,ini=ini)
Warning in file(con, "w") :
  cannot open file '/homero/tomas/cran/rlibro/lib/RSMET/temp/test_station.smet': Read-only file system
Error in file(con, "w") : cannot open the connection
Calls: pushSmetIntoIni -> lapply -> FUN -> print.smet -> <Anonymous> -> file
Execution halted
