
R Under development (unstable) (2018-06-20 r74924) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "doRNG"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('doRNG')
Loading required package: foreach
Loading required package: rngtools
Loading required package: pkgmaker
Loading required package: registry

Attaching package: ‘pkgmaker’

The following object is masked from ‘package:base’:

    isFALSE

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("doRNG-package")
> ### * doRNG-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: doRNG-package
> ### Title: Generic Reproducible Parallel Backend for foreach Loops
> ### Aliases: doRNG-package
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Don't show: 
> options(R_CHECK_RUNNING_EXAMPLES_=TRUE) ## roxygen generated flag
> ## End(Don't show)
> 
> 
> # register parallel backend
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> cl <- makeCluster(2)
> registerDoParallel(cl)
> 
> ## standard %dopar% loop are not reproducible
> set.seed(123)
> r1 <- foreach(i=1:4) %dopar%{ runif(1) }
> set.seed(123)
> r2 <- foreach(i=1:4) %dopar%{ runif(1) }
> identical(r1, r2)
[1] FALSE
> ## Don't show: 
>  stopifnot(!identical(r1, r2)) 
> ## End(Don't show)
> 
> ## %dorng% loops _are_ reproducible
> set.seed(123)
> r1 <- foreach(i=1:4) %dorng%{ runif(1) }
> set.seed(123)
> r2 <- foreach(i=1:4) %dorng%{ runif(1) }
> identical(r1, r2)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(r1, r2)) 
> ## End(Don't show)
> 
> # alternative way of seeding 
> a1 <- foreach(i=1:4, .options.RNG=123) %dorng%{ runif(1) }
> a2 <- foreach(i=1:4, .options.RNG=123) %dorng%{ runif(1) }
> identical(a1, a2) && identical(a1, r1)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(a1, a2) && identical(a1, r1)) 
> ## End(Don't show)
> 
> ## sequences of %dorng% loops _are_ reproducible
> set.seed(123)
> s1 <- foreach(i=1:4) %dorng%{ runif(1) }
> s2 <- foreach(i=1:4) %dorng%{ runif(1) }
> identical(s1, r1) && !identical(s1, s2)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(s1, r1) && !identical(s1, s2)) 
> ## End(Don't show)
> 
> set.seed(123)
> s1.2 <- foreach(i=1:4) %dorng%{ runif(1) }
> s2.2 <- foreach(i=1:4) %dorng%{ runif(1) }
> identical(s1, s1.2) && identical(s2, s2.2)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(s1, s1.2) && identical(s2, s2.2)) 
> ## End(Don't show)
>  
> ## Non-invasive way of converting %dopar% loops into reproducible loops
> registerDoRNG(123)
> s3 <- foreach(i=1:4) %dopar%{ runif(1) }
> s4 <- foreach(i=1:4) %dopar%{ runif(1) }
> identical(s3, s1) && identical(s4, s2)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(s3, s1) && identical(s4, s2)) 
> ## End(Don't show)
> 
> stopCluster(cl) 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:doParallel’, ‘package:parallel’, ‘package:iterators’

> nameEx("doRNG")
> ### * doRNG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %dorng%
> ### Title: Reproducible Parallel Foreach Backend
> ### Aliases: %dorng%
> 
> ### ** Examples
> 
> ## Don't show: 
> options(R_CHECK_RUNNING_EXAMPLES_=TRUE) ## roxygen generated flag
> ## End(Don't show)
> 
> 
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> cl <- makeCluster(2)
> registerDoParallel(cl)
> 
> # standard %dopar% loops are _not_ reproducible
> set.seed(1234)
> s1 <- foreach(i=1:4) %dopar% { runif(1) }
> set.seed(1234)
> s2 <- foreach(i=1:4) %dopar% { runif(1) }
> identical(s1, s2)
[1] FALSE
> 
> # single %dorng% loops are reproducible
> r1 <- foreach(i=1:4, .options.RNG=1234) %dorng% { runif(1) }
> r2 <- foreach(i=1:4, .options.RNG=1234) %dorng% { runif(1) }
> identical(r1, r2)
[1] TRUE
> # the sequence os RNG seed is stored as an attribute
> attr(r1, 'rng')
[[1]]
[1]         407  -305383241    69318028 -1161659107  -348804806 -1127582349
[7]  -343284712

[[2]]
[1]         407  1222430165 -1386318120  1144759979   748500427   690571908
[7]   329037778

[[3]]
[1]         407   215137210 -1421031558  1452323561 -2060097535   712279522
[7]  -278425444

[[4]]
[1]         407 -1017432992  1583835527  1997665660   821136125  1282044776
[7]  1045008570

> 
> # stop cluster
> stopCluster(cl)
> 
> # More examples can be found in demo `doRNG`
> ## Not run: 
> ##D demo('doRNG')
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:doParallel’, ‘package:parallel’, ‘package:iterators’

> nameEx("doRNGversion")
> ### * doRNGversion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: doRNGversion
> ### Title: Back Compatibility Option for doRNG
> ### Aliases: doRNGversion
> 
> ### ** Examples
> 
> ## Don't show: 
> options(R_CHECK_RUNNING_EXAMPLES_=TRUE) ## roxygen generated flag
> ## End(Don't show)
> 
> 
> ## Don't show: 
>  registerDoSEQ() 
> ## End(Don't show)
> 
> ## Seeding when current RNG is L'Ecuyer-CMRG
> RNGkind("L'Ecuyer")
> 
> doRNGversion("1.4")
> # in version >= 1.4 seeding behaviour changed to fix a bug
> set.seed(123)
> res <- foreach(i=1:3) %dorng% runif(1)
> res2 <- foreach(i=1:3) %dorng% runif(1)
> stopifnot( !identical(attr(res, 'rng')[2:3], attr(res2, 'rng')[1:2]) )
> res3 <- foreach(i=1:3, .options.RNG=123) %dorng% runif(1)
> stopifnot( identical(res, res3) )
> 
> # buggy behaviour in version < 1.4
> doRNGversion("1.3")
> res <- foreach(i=1:3) %dorng% runif(1)
> res2 <- foreach(i=1:3) %dorng% runif(1)
> stopifnot( identical(attr(res, 'rng')[2:3], attr(res2, 'rng')[1:2]) )
> res3 <- foreach(i=1:3, .options.RNG=123) %dorng% runif(1)
> stopifnot( !identical(res, res3) )
> 
> # restore default RNG  
> RNGkind("default")
> # restore to current doRNG version
> doRNGversion(NULL)
> 
> 
> 
> 
> cleanEx()
> nameEx("registerDoRNG")
> ### * registerDoRNG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: registerDoRNG
> ### Title: Registering doRNG for Persistent Reproducible Parallel Foreach
> ###   Loops
> ### Aliases: registerDoRNG
> 
> ### ** Examples
> 
> ## Don't show: 
> options(R_CHECK_RUNNING_EXAMPLES_=TRUE) ## roxygen generated flag
> ## End(Don't show)
> 
> 
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> cl <- makeCluster(2)
> registerDoParallel(cl)
> 
> # One can make reproducible loops using the %dorng% operator
> r1 <- foreach(i=1:4, .options.RNG=1234) %dorng% { runif(1) }
> # or convert %dopar% loops using registerDoRNG
> registerDoRNG(1234)
> r2 <- foreach(i=1:4) %dopar% { runif(1) }
> identical(r1, r2)
[1] TRUE
> stopCluster(cl)
> 
> # Registering another foreach backend disables doRNG
> cl <- makeCluster(2)
> registerDoParallel(cl)
> set.seed(1234)
> s1 <- foreach(i=1:4) %dopar% { runif(1) }
> set.seed(1234)
> s2 <- foreach(i=1:4) %dopar% { runif(1) }
> identical(s1, s2)
[1] FALSE
> ## Don't show: 
>  stopifnot(!identical(s1, s2)) 
> ## End(Don't show)
> 
> # doRNG is re-nabled by re-registering it 
> registerDoRNG()
> set.seed(1234)
> r3 <- foreach(i=1:4) %dopar% { runif(1) }
> identical(r2, r3)
[1] TRUE
> # NB: the results are identical independently of the task scheduling
> # (r2 used 2 nodes, while r3 used 3 nodes)
> 
> # argument `once=FALSE` reseeds doRNG's seed at the beginning of each loop 
> registerDoRNG(1234, once=FALSE)
> r1 <- foreach(i=1:4) %dopar% { runif(1) }
> r2 <- foreach(i=1:4) %dopar% { runif(1) }
> identical(r1, r2)
[1] TRUE
> 
> # Once doRNG is registered the seed can also be passed as an option to %dopar%
> r1.2 <- foreach(i=1:4, .options.RNG=456) %dopar% { runif(1) }
> r2.2 <- foreach(i=1:4, .options.RNG=456) %dopar% { runif(1) }
> identical(r1.2, r2.2) && !identical(r1.2, r1)
[1] TRUE
> ## Don't show: 
>  stopifnot(identical(r1.2, r2.2) && !identical(r1.2, r1)) 
> ## End(Don't show)
> 
> stopCluster(cl)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:doParallel’, ‘package:parallel’, ‘package:iterators’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.347 0.04 4.686 0.008 0.013 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
