
R Under development (unstable) (2018-01-02 r74022) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "futile.matrix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('futile.matrix')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RandomMatrixModel")
> ### * RandomMatrixModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RandomMatrixModel
> ### Title: Type constructors for random matrices and ensembles of random
> ###   matrices
> ### Aliases: Ensemble JacobiMatrix JacobiModel RandomMatrixModel
> ###   WignerMatrix WignerModel WishartMatrix WishartModel
> 
> ### ** Examples
> 
> model <- WignerModel(10)
> m <- rmatrix(model)
> e <- Ensemble(20, model)
> 
> 
> 
> cleanEx()
> nameEx("arrange")
> ### * arrange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arrange
> ### Title: Order matrix elements based on rownames and/or colnames
> ### Aliases: arrange
> 
> ### ** Examples
> 
> library(datasets)
> arrange(state.x77)
                 Area Frost HS Grad Illiteracy Income Life Exp Murder
Alabama         50708    20    41.3        2.1   3624    69.05   15.1
Alaska         566432   152    66.7        1.5   6315    69.31   11.3
Arizona        113417    15    58.1        1.8   4530    70.55    7.8
Arkansas        51945    65    39.9        1.9   3378    70.66   10.1
California     156361    20    62.6        1.1   5114    71.71   10.3
Colorado       103766   166    63.9        0.7   4884    72.06    6.8
Connecticut      4862   139    56.0        1.1   5348    72.48    3.1
Delaware         1982   103    54.6        0.9   4809    70.06    6.2
Florida         54090    11    52.6        1.3   4815    70.66   10.7
Georgia         58073    60    40.6        2.0   4091    68.54   13.9
Hawaii           6425     0    61.9        1.9   4963    73.60    6.2
Idaho           82677   126    59.5        0.6   4119    71.87    5.3
Illinois        55748   127    52.6        0.9   5107    70.14   10.3
Indiana         36097   122    52.9        0.7   4458    70.88    7.1
Iowa            55941   140    59.0        0.5   4628    72.56    2.3
Kansas          81787   114    59.9        0.6   4669    72.58    4.5
Kentucky        39650    95    38.5        1.6   3712    70.10   10.6
Louisiana       44930    12    42.2        2.8   3545    68.76   13.2
Maine           30920   161    54.7        0.7   3694    70.39    2.7
Maryland         9891   101    52.3        0.9   5299    70.22    8.5
Massachusetts    7826   103    58.5        1.1   4755    71.83    3.3
Michigan        56817   125    52.8        0.9   4751    70.63   11.1
Minnesota       79289   160    57.6        0.6   4675    72.96    2.3
Mississippi     47296    50    41.0        2.4   3098    68.09   12.5
Missouri        68995   108    48.8        0.8   4254    70.69    9.3
Montana        145587   155    59.2        0.6   4347    70.56    5.0
Nebraska        76483   139    59.3        0.6   4508    72.60    2.9
Nevada         109889   188    65.2        0.5   5149    69.03   11.5
New Hampshire    9027   174    57.6        0.7   4281    71.23    3.3
New Jersey       7521   115    52.5        1.1   5237    70.93    5.2
New Mexico     121412   120    55.2        2.2   3601    70.32    9.7
New York        47831    82    52.7        1.4   4903    70.55   10.9
North Carolina  48798    80    38.5        1.8   3875    69.21   11.1
North Dakota    69273   186    50.3        0.8   5087    72.78    1.4
Ohio            40975   124    53.2        0.8   4561    70.82    7.4
Oklahoma        68782    82    51.6        1.1   3983    71.42    6.4
Oregon          96184    44    60.0        0.6   4660    72.13    4.2
Pennsylvania    44966   126    50.2        1.0   4449    70.43    6.1
Rhode Island     1049   127    46.4        1.3   4558    71.90    2.4
South Carolina  30225    65    37.8        2.3   3635    67.96   11.6
South Dakota    75955   172    53.3        0.5   4167    72.08    1.7
Tennessee       41328    70    41.8        1.7   3821    70.11   11.0
Texas          262134    35    47.4        2.2   4188    70.90   12.2
Utah            82096   137    67.3        0.6   4022    72.90    4.5
Vermont          9267   168    57.1        0.6   3907    71.64    5.5
Virginia        39780    85    47.8        1.4   4701    70.08    9.5
Washington      66570    32    63.5        0.6   4864    71.72    4.3
West Virginia   24070   100    41.6        1.4   3617    69.48    6.7
Wisconsin       54464   149    54.5        0.7   4468    72.48    3.0
Wyoming         97203   173    62.9        0.6   4566    70.29    6.9
               Population
Alabama              3615
Alaska                365
Arizona              2212
Arkansas             2110
California          21198
Colorado             2541
Connecticut          3100
Delaware              579
Florida              8277
Georgia              4931
Hawaii                868
Idaho                 813
Illinois            11197
Indiana              5313
Iowa                 2861
Kansas               2280
Kentucky             3387
Louisiana            3806
Maine                1058
Maryland             4122
Massachusetts        5814
Michigan             9111
Minnesota            3921
Mississippi          2341
Missouri             4767
Montana               746
Nebraska             1544
Nevada                590
New Hampshire         812
New Jersey           7333
New Mexico           1144
New York            18076
North Carolina       5441
North Dakota          637
Ohio                10735
Oklahoma             2715
Oregon               2284
Pennsylvania        11860
Rhode Island          931
South Carolina       2816
South Dakota          681
Tennessee            4173
Texas               12237
Utah                 1203
Vermont               472
Virginia             4981
Washington           3559
West Virginia        1799
Wisconsin            4589
Wyoming               376
> 
> 
> 
> cleanEx()
> nameEx("ct")
> ### * ct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ct
> ### Title: Perform the conjugate transpose of a matrix
> ### Aliases: ct
> 
> ### ** Examples
> 
> x <- matrix(rcomp(16), nrow=4)
> ct(x)
                      [,1]                  [,2]                  [,3]
[1,] -0.6264538+0.0161903i  0.1836433-0.9438362i -0.8356286-0.8212212i
[2,]  0.3295078-0.9189774i -0.8204684-0.7821363i  0.4874291-0.0745650i
[3,]  0.5757814-0.6198257i -0.3053884+0.0561287i  1.5117812+0.1557955i
[4,] -0.6212406+0.4781501i -2.2146999-0.4179416i  1.1249309-1.3586796i
                      [,4]
[1,]  1.5952808-0.5939013i
[2,]  0.7383247+1.9893517i
[3,]  0.3898432+1.4707524i
[4,] -0.0449336+0.1027877i
> 
> 
> 
> cleanEx()
> nameEx("cutoff")
> ### * cutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cutoff
> ### Title: Calculate the upper bound of the noise spectrum
> ### Aliases: MaximumLikelihoodFit RandomMatrixFilter cutoff
> 
> ### ** Examples
> 
> cutoff(rmatrix(WignerModel(100)))
[1] 3.918762
> 
> 
> 
> cleanEx()
> nameEx("dmatrix")
> ### * dmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dmatrix
> ### Title: Get the density for the given random matrix model
> ### Aliases: dmatrix
> 
> ### ** Examples
> 
> m <- WignerModel(100)
> dmatrix(seq(-1,1,by=0.02), m)
  [1] 0.2756644 0.2774779 0.2792432 0.2809614 0.2826334 0.2842598 0.2858416
  [8] 0.2873794 0.2888739 0.2903258 0.2917358 0.2931045 0.2944323 0.2957200
 [15] 0.2969679 0.2981767 0.2993467 0.3004785 0.3015724 0.3026288 0.3036483
 [22] 0.3046310 0.3055775 0.3064880 0.3073628 0.3082022 0.3090066 0.3097762
 [29] 0.3105113 0.3112120 0.3118787 0.3125116 0.3131108 0.3136766 0.3142091
 [36] 0.3147085 0.3151750 0.3156087 0.3160097 0.3163783 0.3167143 0.3170181
 [43] 0.3172897 0.3175291 0.3177364 0.3179117 0.3180551 0.3181666 0.3182462
 [50] 0.3182940 0.3183099 0.3182940 0.3182462 0.3181666 0.3180551 0.3179117
 [57] 0.3177364 0.3175291 0.3172897 0.3170181 0.3167143 0.3163783 0.3160097
 [64] 0.3156087 0.3151750 0.3147085 0.3142091 0.3136766 0.3131108 0.3125116
 [71] 0.3118787 0.3112120 0.3105113 0.3097762 0.3090066 0.3082022 0.3073628
 [78] 0.3064880 0.3055775 0.3046310 0.3036483 0.3026288 0.3015724 0.3004785
 [85] 0.2993467 0.2981767 0.2969679 0.2957200 0.2944323 0.2931045 0.2917358
 [92] 0.2903258 0.2888739 0.2873794 0.2858416 0.2842598 0.2826334 0.2809614
 [99] 0.2792432 0.2774779 0.2756644
> 
> 
> 
> cleanEx()
> nameEx("expand")
> ### * expand
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expand
> ### Title: Expand a matrix to larger dimensions, filling in new entries
> ### Aliases: expand
> ### Keywords: array
> 
> ### ** Examples
> 
> rows.m <- c('row.1', 'row.2', 'row.3')
> cols.m <- c('col.1', 'col.2')
> rows.n <- c(rows.m, 'row.4')
> cols.n <- c(cols.m, 'col.3')
> m <- matrix(c(1,4,7,2,5,8), ncol=2, dimnames=list(rows.m,cols.m))
> n <- matrix(c(1,4,7,10,2,5,8,11,3,6,9,12), ncol=3,
+   dimnames=list(rows.n,cols.n))
> expand(m, n)
      col.1 col.2 col.3
row.1     1     2     0
row.2     4     5     0
row.3     7     8     0
row.4     0     0     0
> 
> 
> 
> cleanEx()
> nameEx("fit.density")
> ### * fit.density
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit.density
> ### Title: Fit the eigenvalue spectrum to model
> ### Aliases: fit.density
> 
> ### ** Examples
> 
> ## Not run: 
> ##D m <- rmatrix(WishartModel(50, 200))
> ##D es <- eigen(m)
> ##D fit.density(es, MaximumLikelihoodFit(hint=c(1,1)))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("futile.matrix-package")
> ### * futile.matrix-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: futile.matrix-package
> ### Title: A collection of matrix manipulation functions
> ### Aliases: futile.matrix futile.matrix-package
> ### Keywords: attribute logic package
> 
> ### ** Examples
> 
> # Generate a random ensemble
> m <- rmatrix(WishartModel(100,400))
> 
> # Select sub-matrices
> library(datasets)
> select(swiss, "Rive")
            Fertility Agriculture Examination Education Catholic
Rive Droite      44.7        46.6          16        29    50.43
Rive Gauche      42.8        27.7          22        29    58.33
            Infant.Mortality
Rive Droite             18.2
Rive Gauche             19.3
> select(swiss, col.pat='^E')
             Examination Education
Courtelary            15        12
Delemont               6         9
Franches-Mnt           5         5
Moutier               12         7
Neuveville            17        15
Porrentruy             9         7
Broye                 16         7
Glane                 14         8
Gruyere               12         7
Sarine                16        13
Veveyse               14         6
Aigle                 21        12
Aubonne               14         7
Avenches              19        12
Cossonay              22         5
Echallens             18         2
Grandson              17         8
Lausanne              26        28
La Vallee             31        20
Lavaux                19         9
Morges                22        10
Moudon                14         3
Nyone                 22        12
Orbe                  20         6
Oron                  12         1
Payerne               14         8
Paysd'enhaut           6         3
Rolle                 16        10
Vevey                 25        19
Yverdon               15         8
Conthey                3         2
Entremont              7         6
Herens                 5         2
Martigwy              12         6
Monthey                7         3
St Maurice             9         9
Sierre                 3         3
Sion                  13        13
Boudry                26        12
La Chauxdfnd          29        11
Le Locle              22        13
Neuchatel             35        32
Val de Ruz            15         7
ValdeTravers          25         7
V. De Geneve          37        53
Rive Droite           16        29
Rive Gauche           22        29
> select(swiss, "Rive", '^E') <- -1
> dimnames <- list( c(rownames(swiss), 'Zermat', 'Zurich', 'Geneva'),
+  c(colnames(swiss), 'Age','Hair.Color') )
> my.swiss <- expand(swiss, dimnames)
> 
> 
> 
> cleanEx()
> nameEx("peek")
> ### * peek
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: peek
> ### Title: Peek inside a matrix or vector
> ### Aliases: peek
> ### Keywords: array
> 
> ### ** Examples
> 
> m <- matrix(c(1,3,4,2, 5,10,11,2, 3,42,8,22, 23,15,3,8), ncol=4)
> peek(m, 2)
     [,1] [,2]
[1,]    1    5
[2,]    3   10
> 
> 
> 
> cleanEx()
> nameEx("rcomp")
> ### * rcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rcomp
> ### Title: Generate random complex numbers
> ### Aliases: rcomp
> 
> ### ** Examples
> 
> rcomp(10)
 [1] -0.6264538+1.5117812i  0.1836433+0.3898432i -0.8356286-0.6212406i
 [4]  1.5952808-2.2146999i  0.3295078+1.1249309i -0.8204684-0.0449336i
 [7]  0.4874291-0.0161903i  0.7383247+0.9438362i  0.5757814+0.8212212i
[10] -0.3053884+0.5939013i
> rcomp(10, runif)
 [1] 0.8209463+0.4776196i 0.6470602+0.8612095i 0.7829328+0.4380971i
 [4] 0.5530363+0.2447973i 0.5297196+0.0706790i 0.7893562+0.0994662i
 [7] 0.0233312+0.3162717i 0.4772301+0.5186343i 0.7323137+0.6620051i
[10] 0.6927316+0.4068302i
> 
> 
> 
> cleanEx()
> nameEx("read.matrix")
> ### * read.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.matrix
> ### Title: Read a sparse matrix from a file and return a matrix
> ### Aliases: read.matrix
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   path <- system.file('sample-data/triplet.csv', package='futile.matrix')
> ##D   m <- read.matrix(path)
> ##D 
> ##D   rows <- paste('row', 1:10000, sep='.')
> ##D   cols <- paste('col', 1:10000, sep='.')
> ##D   n <- read.matrix(path, row.ids=rows, col.ids=cols)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmatrix")
> ### * rmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmatrix
> ### Title: Generation of random matrices
> ### Aliases: eigenvalues hermitian max_eigen rmatrix symmetric
> 
> ### ** Examples
> 
> model <- WignerModel(10)
> m <- rmatrix(model)
> 
> ## Not run: 
> ##D e <- Ensemble(20, model)
> ##D hist(max_eigen(e), freq=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("select")
> ### * select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select
> ### Title: Select a portion of a matrix based on a regular expression of
> ###   the row and/or column names.
> ### Aliases: select select<-
> 
> ### ** Examples
> 
> library(datasets)
> select(swiss, "Rive")
            Fertility Agriculture Examination Education Catholic
Rive Droite      44.7        46.6          16        29    50.43
Rive Gauche      42.8        27.7          22        29    58.33
            Infant.Mortality
Rive Droite             18.2
Rive Gauche             19.3
> 
> select(swiss, col.pat="E", fixed=TRUE)
             Examination Education
Courtelary            15        12
Delemont               6         9
Franches-Mnt           5         5
Moutier               12         7
Neuveville            17        15
Porrentruy             9         7
Broye                 16         7
Glane                 14         8
Gruyere               12         7
Sarine                16        13
Veveyse               14         6
Aigle                 21        12
Aubonne               14         7
Avenches              19        12
Cossonay              22         5
Echallens             18         2
Grandson              17         8
Lausanne              26        28
La Vallee             31        20
Lavaux                19         9
Morges                22        10
Moudon                14         3
Nyone                 22        12
Orbe                  20         6
Oron                  12         1
Payerne               14         8
Paysd'enhaut           6         3
Rolle                 16        10
Vevey                 25        19
Yverdon               15         8
Conthey                3         2
Entremont              7         6
Herens                 5         2
Martigwy              12         6
Monthey                7         3
St Maurice             9         9
Sierre                 3         3
Sion                  13        13
Boudry                26        12
La Chauxdfnd          29        11
Le Locle              22        13
Neuchatel             35        32
Val de Ruz            15         7
ValdeTravers          25         7
V. De Geneve          37        53
Rive Droite           16        29
Rive Gauche           22        29
> 
> select(swiss, row.pat='^[A-T]', col.pat="^E")
             Examination Education
Courtelary            15        12
Delemont               6         9
Franches-Mnt           5         5
Moutier               12         7
Neuveville            17        15
Porrentruy             9         7
Broye                 16         7
Glane                 14         8
Gruyere               12         7
Sarine                16        13
Aigle                 21        12
Aubonne               14         7
Avenches              19        12
Cossonay              22         5
Echallens             18         2
Grandson              17         8
Lausanne              26        28
La Vallee             31        20
Lavaux                19         9
Morges                22        10
Moudon                14         3
Nyone                 22        12
Orbe                  20         6
Oron                  12         1
Payerne               14         8
Paysd'enhaut           6         3
Rolle                 16        10
Conthey                3         2
Entremont              7         6
Herens                 5         2
Martigwy              12         6
Monthey                7         3
St Maurice             9         9
Sierre                 3         3
Sion                  13        13
Boudry                26        12
La Chauxdfnd          29        11
Le Locle              22        13
Neuchatel             35        32
Rive Droite           16        29
Rive Gauche           22        29
> 
> select(swiss, "Rive", "Ed") <- min(select(swiss, "^[^R]", "Ed"))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.62 0.008 0.702 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
