
R Under development (unstable) (2018-03-16 r74418) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> test_check("SpaDES.core")
Loading required package: SpaDES.core
Loading required package: quickPlot
Loading required package: reproducible

Attaching package: 'reproducible'

The following object is masked from 'package:testthat':

    %>%

── 1. Error: test cache (@test-cache.R#15)  ────────────────────────────────────
cannot open the connection
1: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE)) at testthat/test-cache.R:15
2: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA)), 
       modules = list("randomLandscapes", "fireSpread", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA)), 
       modules = list("randomLandscapes", "fireSpread", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 2. Error: test cache (@test-cache.R#7)  ─────────────────────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-cache.R:7
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 3. Error: test event-level cache (@test-cache.R#70)  ────────────────────────
cannot open the connection
1: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA, .useCache = "init")), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE)) at testthat/test-cache.R:70
2: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA, .useCache = "init")), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA, 
           .useCache = "init")), modules = list("randomLandscapes", "fireSpread", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA, 
           .useCache = "init")), modules = list("randomLandscapes", "fireSpread", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 4. Error: test event-level cache (@test-cache.R#63)  ────────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-cache.R:63
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 5. Error: test module-level cache (@test-cache.R#126)  ──────────────────────
cannot open the connection
1: simInit(times = times, params = list(.globals = list(stackName = "landscape", burnStats = "nPixelsBurned"), 
       fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = times$start, .useCache = TRUE)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE)) at testthat/test-cache.R:126
2: simInit(times = times, params = list(.globals = list(stackName = "landscape", burnStats = "nPixelsBurned"), 
       fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = times$start, .useCache = TRUE)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir, cachePath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = 0, 
           .useCache = TRUE)), modules = list("randomLandscapes", "fireSpread", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 1, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = 0, 
           .useCache = TRUE)), modules = list("randomLandscapes", "fireSpread", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testCache", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(
           objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 6. Error: test module-level cache (@test-cache.R#114)  ──────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-cache.R:114
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 7. Error: test .prepareOutput (@test-cache.R#199)  ──────────────────────────
Cannot create RasterLayer object from this file; perhaps you need to install rgdal first
1: lapply(filelist$files, rasterToMemory) at testthat/test-cache.R:199
2: FUN(X[[i]], ...)
3: FUN(X[[i]], ...)
4: raster(x, ...)
5: raster(x, ...)
6: .local(x, ...)
7: .rasterObjectFromFile(x, band = band, objecttype = "RasterLayer", ...)
8: stop("Cannot create RasterLayer object from this file; perhaps you need to install rgdal first")

── 8. Error: test .prepareOutput (@test-cache.R#185)  ──────────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-cache.R:185
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 9. Error: test .robustDigest for simLists (@test-cache.R#260)  ──────────────
cannot open the connection
1: expect_message(do.call(simInit, args), regexp = "Using or creating cached copy", 
       all = TRUE) at testthat/test-cache.R:260
2: quasi_capture(enquo(object), capture_messages, label = label)
3: capture(act$val <- eval_bare(get_expr(quo), get_env(quo)))
4: withCallingHandlers(code, message = function(condition) {
       out$push(condition)
       invokeRestart("muffleMessage")
   })
5: eval_bare(get_expr(quo), get_env(quo))
6: do.call(simInit, args)
7: (new("nonstandardGenericFunction", .Data = function (times, params, modules, objects, 
       paths, inputs, outputs, loadOrder, notOlderThan = NULL) 
   {
       standardGeneric("simInit")
   }, generic = structure("simInit", package = "SpaDES.core"), package = "SpaDES.core", 
       group = list(), valueClass = character(0), signature = c("times", "params", "modules", 
       "objects", "paths", "inputs", "outputs", "loadOrder", "notOlderThan"), default = NULL, 
       skeleton = (function (times, params, modules, objects, paths, inputs, outputs, 
           loadOrder, notOlderThan = NULL) 
       stop("invalid call in method dispatch to 'simInit' (no default method)", domain = NA))(times, 
           params, modules, objects, paths, inputs, outputs, loadOrder, notOlderThan)))(modules = list(
       "test"), paths = list(modulePath = "/tmp/RtmpQNjY1P", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       params = list(test = list(.useCache = ".inputObjects")))
8: (new("nonstandardGenericFunction", .Data = function (times, params, modules, objects, 
       paths, inputs, outputs, loadOrder, notOlderThan = NULL) 
   {
       standardGeneric("simInit")
   }, generic = structure("simInit", package = "SpaDES.core"), package = "SpaDES.core", 
       group = list(), valueClass = character(0), signature = c("times", "params", "modules", 
       "objects", "paths", "inputs", "outputs", "loadOrder", "notOlderThan"), default = NULL, 
       skeleton = (function (times, params, modules, objects, paths, inputs, outputs, 
           loadOrder, notOlderThan = NULL) 
       stop("invalid call in method dispatch to 'simInit' (no default method)", domain = NA))(times, 
           params, modules, objects, paths, inputs, outputs, loadOrder, notOlderThan)))(modules = list(
       "test"), paths = list(modulePath = "/tmp/RtmpQNjY1P", cachePath = "/tmp/RtmpQNjY1P/testCache"), 
       params = list(test = list(.useCache = ".inputObjects")))
9: do.call("simInit", args = li)
10: simInit(times = list(start = 0, end = 10), params = list(test = list(.useCache = ".inputObjects")), 
       modules = list("test"), objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P", 
           cachePath = "/tmp/RtmpQNjY1P/testCache"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
11: simInit(times = list(start = 0, end = 10), params = list(test = list(.useCache = ".inputObjects")), 
       modules = list("test"), objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P", 
           cachePath = "/tmp/RtmpQNjY1P/testCache"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
12: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
13: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
14: saveRDS(allPkgsDESC, file = .snap)
15: gzfile(file, mode)

── 10. Error: test .robustDigest for simLists (@test-cache.R#244)  ─────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-cache.R:244
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 11. Error: test checkpointing (@test-checkpoint.R#27)  ──────────────────────
cannot open the connection
1: simInit(times = times, params = parameters, modules = modules, paths = paths) at testthat/test-checkpoint.R:27
2: simInit(times = times, params = parameters, modules = modules, paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 2, timeunit = "second"), params = list(.globals = list(
       stackName = "landscape"), .checkpoint = list(interval = 1, file = "chkpnt.RData"), 
       randomLandscapes = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA, 
           torus = TRUE)), modules = list("randomLandscapes", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/test_checkpoint"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 2, timeunit = "second"), params = list(.globals = list(
       stackName = "landscape"), .checkpoint = list(interval = 1, file = "chkpnt.RData"), 
       randomLandscapes = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA, 
           torus = TRUE)), modules = list("randomLandscapes", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/test_checkpoint"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 12. Error: test checkpointing (@test-checkpoint.R#8)  ───────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-checkpoint.R:8
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 13. Error: test checkpointing with disk-backed raster (@test-checkpoint.R#74)
cannot open the connection
1: simInit(times = times, params = parameters, modules = modules, paths = paths) at testthat/test-checkpoint.R:74
2: simInit(times = times, params = parameters, modules = modules, paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 2, timeunit = "second"), params = list(.globals = list(
       stackName = "landscape"), .checkpoint = list(interval = 1, file = "chkpnt.RData"), 
       randomLandscapes = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA, 
           torus = TRUE)), modules = list("randomLandscapes", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/test_checkpoint"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 2, timeunit = "second"), params = list(.globals = list(
       stackName = "landscape"), .checkpoint = list(interval = 1, file = "chkpnt.RData"), 
       randomLandscapes = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA, 
           torus = TRUE)), modules = list("randomLandscapes", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/test_checkpoint"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 14. Error: /tmp/Rtmpk4iT0g/R.INSTALL47bb6e3390d7/SpaDES.core/man/moduleMetada
cannot open the connection
1: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(.globals = list(stackName = "landscape")), 
       modules = list("caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
           package = "SpaDES.core")))
2: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(.globals = list(stackName = "landscape")), 
       modules = list("caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
           package = "SpaDES.core")))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(
       .globals = list(stackName = "landscape")), modules = list("caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(
       .globals = list(stackName = "landscape")), modules = list("caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 15. Error: /tmp/Rtmpk4iT0g/R.INSTALL47bb6e3390d7/SpaDES.core/man/moduleVersio
cannot open the connection
1: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned")), modules = list("caribouMovement"), paths = list(modulePath = path))
2: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned")), modules = list("caribouMovement"), paths = list(modulePath = path))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(
       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned")), modules = list(
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 2000, end = 2002, timeunit = "year"), params = list(
       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned")), modules = list(
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 16. Error: /tmp/Rtmpk4iT0g/R.INSTALL47bb6e3390d7/SpaDES.core/man/params.Rd  ─
cannot open the connection
1: simInit(modules = modules, paths = paths, params = list(.globals = list(stackName = "landscape")))
2: simInit(modules = modules, paths = paths, params = list(.globals = list(stackName = "landscape")))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(.globals = list(stackName = "landscape")), 
       modules = list("randomLandscapes"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(.globals = list(stackName = "landscape")), 
       modules = list("randomLandscapes"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 17. Error: experiment does not work correctly (@test-experiment.R#11)  ──────
cannot open the connection
1: simInit(times = list(start = 0, end = 2, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE)) at testthat/test-experiment.R:11
2: simInit(times = list(start = 0, end = 2, timeunit = "year"), params = list(.globals = list(stackName = "landscape", 
       burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), caribouMovement = list(.plotInitialTime = NA), 
       randomLandscapes = list(.plotInitialTime = NA)), modules = list("randomLandscapes", 
       "fireSpread", "caribouMovement"), paths = list(modulePath = system.file("sampleModules", 
       package = "SpaDES.core"), outputPath = tmpdir), outputs = data.frame(objectName = c("landscape", 
       "caribou"), stringsAsFactors = FALSE))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 2, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA)), 
       modules = list("randomLandscapes", "fireSpread", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testParallel"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 2, timeunit = "year"), params = list(.globals = list(
       stackName = "landscape", burnStats = "nPixelsBurned"), fireSpread = list(.plotInitialTime = NA), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA)), 
       modules = list("randomLandscapes", "fireSpread", "caribouMovement"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           outputPath = "/tmp/RtmpQNjY1P/testParallel"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(objectName = c("landscape", "caribou")), class = "data.frame", row.names = c(NA, 
       -2L)), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 18. Error: experiment does not work correctly  ──────────────────────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible")
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 19. Error: test-load.R: loading inputs does not work correctly (@test-load.R#
cannot open the connection
1: simInit(times = times, params = parameters, modules = modules, paths = paths) at testthat/test-load.R:31
2: simInit(times = times, params = parameters, modules = modules, paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 1), params = list(.globals = list(stackName = "landscape"), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA, 
           nx = 20, ny = 20)), modules = list("randomLandscapes", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           inputPath = "/homero/tomas/cran/rlibro/lib/quickPlot/maps", outputPath = "/tmp/RtmpQNjY1P/test_load/UvRQNUWI"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 1), params = list(.globals = list(stackName = "landscape"), 
       caribouMovement = list(.plotInitialTime = NA), randomLandscapes = list(.plotInitialTime = NA, 
           nx = 20, ny = 20)), modules = list("randomLandscapes", "caribouMovement"), 
       objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
           inputPath = "/homero/tomas/cran/rlibro/lib/quickPlot/maps", outputPath = "/tmp/RtmpQNjY1P/test_load/UvRQNUWI"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 20. Error: test-load.R: interval loading of objects from .GlobalEnv (@test-lo
cannot open the connection
1: simInit(inputs = data.frame(obj = "test1", loadTimes = times), times = list(start = 0, 
       end = 2), modules = list("test"), paths = list(modulePath = tempdir())) at testthat/test-load.R:366
2: simInit(inputs = data.frame(obj = "test1", loadTimes = times), times = list(start = 0, 
       end = 2), modules = list("test"), paths = list(modulePath = tempdir()))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 2), params = list(), modules = list("test"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P"), inputs = structure(list(
           obj = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), class = "factor", .Label = "test1"), 
           loadTimes = 0:10), class = "data.frame", row.names = c(NA, -11L)), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 2), params = list(), modules = list("test"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P"), inputs = structure(list(
           obj = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), class = "factor", .Label = "test1"), 
           loadTimes = 0:10), class = "data.frame", row.names = c(NA, -11L)), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 21. Error: depsEdgeList and depsGraph work (@test-module-deps-methods.R#115) 
cannot open the connection
1: simInit(times, params, modules, paths = paths) at testthat/test-module-deps-methods.R:115
2: simInit(times, params, modules, paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape"), randomLandscapes = list(.plotInitialTime = NA, .plotInterval = NA), 
       caribouMovement = list(.plotInitialTime = NA, .plotInterval = NA), fireSpread = list(
           .plotInitialTime = NA, .plotInterval = NA)), modules = list("randomLandscapes", 
       "caribouMovement", "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape"), randomLandscapes = list(.plotInitialTime = NA, .plotInterval = NA), 
       caribouMovement = list(.plotInitialTime = NA, .plotInterval = NA), fireSpread = list(
           .plotInitialTime = NA, .plotInterval = NA)), modules = list("randomLandscapes", 
       "caribouMovement", "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 22. Error: 3 levels of parent and child modules load and show correctly (@tes
cannot open the connection
1: simInit(modules = list("grandpar1"), paths = list(modulePath = tmpdir)) at testthat/test-module-deps-methods.R:200
2: simInit(modules = list("grandpar1"), paths = list(modulePath = tmpdir))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(), modules = list("grandpar1"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_hierachicalModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(), modules = list("grandpar1"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_hierachicalModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 23. Error: 3 levels of parent and child modules load and show correctly (@tes
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-module-deps-methods.R:161
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 24. Error: module templates work (@test-module-template.R#9)  ───────────────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-module-template.R:9
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 25. Error: paths file does not work correctly (@test-paths.R#13)  ───────────
cannot open the connection
1: simInit(times, params, modules, objects = list(), paths) at testthat/test-paths.R:13
2: simInit(times, params, modules, objects = list(), paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape")), modules = list("randomLandscapes", "caribouMovement", 
       "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
       "/tmp/RtmpQNjY1P/test-paths"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape")), modules = list("randomLandscapes", "caribouMovement", 
       "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
       "/tmp/RtmpQNjY1P/test-paths"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(), row.names = integer(0), class = "data.frame"), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 26. Error: saving files does not work correctly (@test-save.R#25)  ──────────
cannot open the connection
1: simInit(times = times, params = parameters, modules = modules, paths = paths, outputs = outputs) at testthat/test-save.R:25
2: simInit(times = times, params = parameters, modules = modules, paths = paths, outputs = outputs)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 6, "month"), params = list(.globals = list(
       stackName = "landscape"), caribouMovement = list(.plotInitialTime = NA, torus = TRUE, 
       .saveObjects = "caribou", .saveInitialTime = 1, .saveInterval = 1), randomLandscapes = list(
       .plotInitialTime = NA, nx = 20, ny = 20)), modules = list("randomLandscapes", 
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
       outputPath = "/tmp/RtmpQNjY1P/test_save"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(objectName = c("caribou", "landscape", "caribou", "landscape"
       ), saveTime = c(1L, 1L, 2L, 2L)), class = "data.frame", row.names = c(NA, -4L
       )), loadOrder = character(0))
5: simInit(times = list(start = 0, end = 6, "month"), params = list(.globals = list(
       stackName = "landscape"), caribouMovement = list(.plotInitialTime = NA, torus = TRUE, 
       .saveObjects = "caribou", .saveInitialTime = 1, .saveInterval = 1), randomLandscapes = list(
       .plotInitialTime = NA, nx = 20, ny = 20)), modules = list("randomLandscapes", 
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules", 
       outputPath = "/tmp/RtmpQNjY1P/test_save"), inputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       outputs = structure(list(objectName = c("caribou", "landscape", "caribou", "landscape"
       ), saveTime = c(1L, 1L, 2L, 2L)), class = "data.frame", row.names = c(NA, -4L
       )), loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 27. Error: simList object initializes correctly (@test-simList.R#10)  ───────
cannot open the connection
1: simInit(times, params, modules, objects = list(), paths) at testthat/test-simList.R:10
2: simInit(times, params, modules, objects = list(), paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 1, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape")), modules = list("randomLandscapes", "caribouMovement", 
       "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 1, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape")), modules = list("randomLandscapes", "caribouMovement", 
       "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 28. Error: simList object initializes correctly (@test-simList.R#270)  ──────
cannot open the connection
1: capture_warnings(mySim <- simInit(times = list(start = 1, end = 2), modules = list("test"), 
       paths = paths, objects = obj)) at testthat/test-simList.R:270
2: withCallingHandlers(code, warning = function(condition) {
       out$push(condition)
       invokeRestart("muffleWarning")
   })
3: simInit(times = list(start = 1, end = 2), modules = list("test"), paths = paths, 
       objects = obj)
4: simInit(times = list(start = 1, end = 2), modules = list("test"), paths = paths, 
       objects = obj)
5: do.call("simInit", args = li)
6: simInit(times = list(start = 1, end = 2), params = list(), modules = list("test"), 
       objects = list(abundRasters = list(new("RasterLayer", file = new(".RasterFile", 
           name = "", datanotation = "FLT4S", byteorder = "little", nodatavalue = -Inf, 
           NAchanged = FALSE, nbands = 1L, bandorder = "BIL", offset = 0L, toptobottom = TRUE, 
           blockrows = 0L, blockcols = 0L, driver = "", open = FALSE), data = new(".SingleLayerData", 
           values = c(0.0950290122627754, 0.0852929829389459, 0.075067634835, 0.0601720504511765, 
           0.05563966707153, 0.0657734698305159, 0.0621233079071887, 0.0672450310244799, 
           0.0603924211987313, 0.0483808173663293, 0.0814591852552508, 0.0832035060309287, 
           0.0742712524725967, 0.0555279213649081, 0.050374815229375, 0.0693269191230601, 
           0.0685226668903991, 0.0776330372367102, 0.0592780092279261, 0.0574337368766915, 
           0.0783712214355696, 0.0581978394831012, 0.0450768163113403, 0.0487055095059934, 
           0.051323381391945, 0.0588609731602684, 0.0634835334431575, 0.0772630158598979, 
           0.080785619170525, 0.0729185427789779, 0.0604458533002278, 0.0626331747713968, 
           0.0520247342323795, 0.041007415221316, 0.049067171464233, 0.0545332212664829, 
           0.0548528762823028, 0.0867602437457947, 0.0897260121467471, 0.0834372157467524, 
           0.0641527202448214, 0.0407601816164645, 0.0463348602834909, 0.0489133277725276, 
           0.0561161417846332, 0.0607412734755622, 0.0650347008824542, 0.0643045533471518, 
           0.073193459556006, 0.0834669158307105, 0.0479556357546602, 0.0368268421395519, 
           0.0447026445173748, 0.04516816493985, 0.0494734764998612, 0.0437118269424778, 
           0.0594273118483276, 0.0766642765023877, 0.0734453793954442, 0.0778923340082292, 
           0.039871830427475, 0.033151828246264, 0.0266361833403635, 0.026186788681802, 
           0.0270929457156875, 0.0617486288596935, 0.0629381067255453, 0.085663742697913, 
           0.0966083869601114, 0.0750658842592785, 0.0380483040707587, 0.0329190388026571, 
           0.0373835656383993, 0.0365215294704835, 0.0416011645079065, 0.0468061950976184, 
           0.0837883771097322, 0.0873587924764739, 0.084593432968214, 0.0763432599101645, 
           0.032427936550866, 0.0272598201957076, 0.0517185868594863, 0.0340872761762146, 
           0.0283331319498209, 0.0382588868991448, 0.079868571426579, 0.0771258059050658, 
           0.0681408949261992, 0.0716218071791423, 0, 0.0331672837814156, 0.0594460439471378, 
           0.0434009077470095, 0.0470857744561126, 0.0415171599643905, 0.0490350325016787, 
           0.0580566319927912, 0.0712701859742085, 0.0750046384357027), offset = 0, 
           gain = 1, inmemory = TRUE, fromdisk = FALSE, isfactor = FALSE, attributes = list(), 
           haveminmax = TRUE, min = 0, max = 0.0966083869601114, band = 1L, unit = "", 
           names = "layer"), legend = new(".RasterLegend", type = character(0), values = logical(0), 
           color = logical(0), names = logical(0), colortable = logical(0)), title = character(0), 
           extent = new("Extent", xmin = -5, xmax = 5, ymin = -5, ymax = 5), rotated = FALSE, 
           rotation = new(".Rotation", geotrans = numeric(0), transfun = function () 
           NULL), ncols = 10L, nrows = 10L, crs = new("CRS", projargs = NA_character_), 
           history = list(), z = list()))), paths = list(modulePath = "/tmp/RtmpQNjY1P/modules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
7: simInit(times = list(start = 1, end = 2), params = list(), modules = list("test"), 
       objects = list(abundRasters = list(new("RasterLayer", file = new(".RasterFile", 
           name = "", datanotation = "FLT4S", byteorder = "little", nodatavalue = -Inf, 
           NAchanged = FALSE, nbands = 1L, bandorder = "BIL", offset = 0L, toptobottom = TRUE, 
           blockrows = 0L, blockcols = 0L, driver = "", open = FALSE), data = new(".SingleLayerData", 
           values = c(0.0950290122627754, 0.0852929829389459, 0.075067634835, 0.0601720504511765, 
           0.05563966707153, 0.0657734698305159, 0.0621233079071887, 0.0672450310244799, 
           0.0603924211987313, 0.0483808173663293, 0.0814591852552508, 0.0832035060309287, 
           0.0742712524725967, 0.0555279213649081, 0.050374815229375, 0.0693269191230601, 
           0.0685226668903991, 0.0776330372367102, 0.0592780092279261, 0.0574337368766915, 
           0.0783712214355696, 0.0581978394831012, 0.0450768163113403, 0.0487055095059934, 
           0.051323381391945, 0.0588609731602684, 0.0634835334431575, 0.0772630158598979, 
           0.080785619170525, 0.0729185427789779, 0.0604458533002278, 0.0626331747713968, 
           0.0520247342323795, 0.041007415221316, 0.049067171464233, 0.0545332212664829, 
           0.0548528762823028, 0.0867602437457947, 0.0897260121467471, 0.0834372157467524, 
           0.0641527202448214, 0.0407601816164645, 0.0463348602834909, 0.0489133277725276, 
           0.0561161417846332, 0.0607412734755622, 0.0650347008824542, 0.0643045533471518, 
           0.073193459556006, 0.0834669158307105, 0.0479556357546602, 0.0368268421395519, 
           0.0447026445173748, 0.04516816493985, 0.0494734764998612, 0.0437118269424778, 
           0.0594273118483276, 0.0766642765023877, 0.0734453793954442, 0.0778923340082292, 
           0.039871830427475, 0.033151828246264, 0.0266361833403635, 0.026186788681802, 
           0.0270929457156875, 0.0617486288596935, 0.0629381067255453, 0.085663742697913, 
           0.0966083869601114, 0.0750658842592785, 0.0380483040707587, 0.0329190388026571, 
           0.0373835656383993, 0.0365215294704835, 0.0416011645079065, 0.0468061950976184, 
           0.0837883771097322, 0.0873587924764739, 0.084593432968214, 0.0763432599101645, 
           0.032427936550866, 0.0272598201957076, 0.0517185868594863, 0.0340872761762146, 
           0.0283331319498209, 0.0382588868991448, 0.079868571426579, 0.0771258059050658, 
           0.0681408949261992, 0.0716218071791423, 0, 0.0331672837814156, 0.0594460439471378, 
           0.0434009077470095, 0.0470857744561126, 0.0415171599643905, 0.0490350325016787, 
           0.0580566319927912, 0.0712701859742085, 0.0750046384357027), offset = 0, 
           gain = 1, inmemory = TRUE, fromdisk = FALSE, isfactor = FALSE, attributes = list(), 
           haveminmax = TRUE, min = 0, max = 0.0966083869601114, band = 1L, unit = "", 
           names = "layer"), legend = new(".RasterLegend", type = character(0), values = logical(0), 
           color = logical(0), names = logical(0), colortable = logical(0)), title = character(0), 
           extent = new("Extent", xmin = -5, xmax = 5, ymin = -5, ymax = 5), rotated = FALSE, 
           rotation = new(".Rotation", geotrans = numeric(0), transfun = function () 
           NULL), ncols = 10L, nrows = 10L, crs = new("CRS", projargs = NA_character_), 
           history = list(), z = list()))), paths = list(modulePath = "/tmp/RtmpQNjY1P/modules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
8: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
9: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
10: saveRDS(allPkgsDESC, file = .snap)
11: gzfile(file, mode)

── 29. Error: simulation runs with simInit and spades (@test-simulation.R#16)  ─
cannot open the connection
1: simInit(times, params, modules, objects = list(), paths) %>% spades() at testthat/test-simulation.R:16
2: eval(lhs, parent, parent)
3: eval(lhs, parent, parent)
4: simInit(times, params, modules, objects = list(), paths)
5: simInit(times, params, modules, objects = list(), paths)
6: do.call("simInit", args = li)
7: simInit(times = list(start = 0, end = 10, timeunit = "year"), params = list(.globals = list(
       burnStats = "npixelsburned", stackName = "landscape"), randomLandscapes = list(
       .plotInitialTime = NA, .plotInterval = NA), caribouMovement = list(.plotInitialTime = NA, 
       .plotInterval = NA, torus = TRUE), fireSpread = list(.plotInitialTime = NA, .plotInterval = NA)), 
       modules = list("randomLandscapes", "caribouMovement", "fireSpread"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
8: simInit(times = list(start = 0, end = 10, timeunit = "year"), params = list(.globals = list(
       burnStats = "npixelsburned", stackName = "landscape"), randomLandscapes = list(
       .plotInitialTime = NA, .plotInterval = NA), caribouMovement = list(.plotInitialTime = NA, 
       .plotInterval = NA, torus = TRUE), fireSpread = list(.plotInitialTime = NA, .plotInterval = NA)), 
       modules = list("randomLandscapes", "caribouMovement", "fireSpread"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
9: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
10: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
11: saveRDS(allPkgsDESC, file = .snap)
12: gzfile(file, mode)

── 30. Error: spades calls with different signatures don't work (@test-simulatio
cannot open the connection
1: simInit(times, params, modules, paths = paths) at testthat/test-simulation.R:207
2: simInit(times, params, modules, paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 0, timeunit = "year"), params = list(.globals = list(
       burnStats = "npixelsburned", stackName = "landscape"), randomLandscapes = list(
       nx = 20, ny = 20)), modules = list("randomLandscapes", "fireSpread"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 0, timeunit = "year"), params = list(.globals = list(
       burnStats = "npixelsburned", stackName = "landscape"), randomLandscapes = list(
       nx = 20, ny = 20)), modules = list("randomLandscapes", "fireSpread"), objects = list(), 
       paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 31. Error: spades calls with different signatures don't work (@test-simulatio
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-simulation.R:154
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 32. Error: simInit with R subfolder scripts (@test-simulation.R#235)  ───────
cannot open the connection
1: simInit(modules = "child1", paths = list(modulePath = tmpdir)) at testthat/test-simulation.R:235
2: simInit(modules = "child1", paths = list(modulePath = tmpdir))
3: do.call("simInit", args = li)
4: simInit(modules = list("child1"), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"))
5: simInit(modules = list("child1"), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"))
6: do.call("simInit", args = li)
7: simInit(times = list(start = 0, end = 10), params = list(), modules = list("child1"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
8: simInit(times = list(start = 0, end = 10), params = list(), modules = list("child1"), 
       objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
9: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
10: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
11: saveRDS(allPkgsDESC, file = .snap)
12: gzfile(file, mode)

── 33. Error: simInit with R subfolder scripts (@test-simulation.R#224)  ───────
package 'reproducible' is required by 'SpaDES.core' so will not be detached
1: detach("package:reproducible") at testthat/test-simulation.R:224
2: stop(gettextf("package %s is required by %s so will not be detached", sQuote(pkgname), 
       sQuote(.rmpkg(pkg))), call. = FALSE, domain = NA)

── 34. Error: simulation runs with simInit with duplicate modules named (@test-s
cannot open the connection
1: expect_true(any(grepl(capture_messages(mySim <- simInit(times, params, modules, objects = list(), 
       paths)), pattern = "Duplicate module"))) at testthat/test-simulation.R:255
2: quasi_label(enquo(object), label)
3: eval_bare(get_expr(quo), get_env(quo))
4: grepl(capture_messages(mySim <- simInit(times, params, modules, objects = list(), 
       paths)), pattern = "Duplicate module")
5: capture_messages(mySim <- simInit(times, params, modules, objects = list(), paths))
6: withCallingHandlers(code, message = function(condition) {
       out$push(condition)
       invokeRestart("muffleMessage")
   })
7: simInit(times, params, modules, objects = list(), paths)
8: simInit(times, params, modules, objects = list(), paths)
9: do.call("simInit", args = li)
10: simInit(times = list(start = 0, end = 10, timeunit = "year"), params = list(randomLandscapes = list(
       .plotInitialTime = NA, .plotInterval = NA), caribouMovement = list(.plotInitialTime = NA, 
       .plotInterval = NA, torus = TRUE)), modules = list("randomLandscapes", "randomLandscapes", 
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
11: simInit(times = list(start = 0, end = 10, timeunit = "year"), params = list(randomLandscapes = list(
       .plotInitialTime = NA, .plotInterval = NA), caribouMovement = list(.plotInitialTime = NA, 
       .plotInterval = NA, torus = TRUE)), modules = list("randomLandscapes", "randomLandscapes", 
       "caribouMovement"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
12: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
13: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
14: saveRDS(allPkgsDESC, file = .snap)
15: gzfile(file, mode)

── 35. Error: timeunit works correctly (@test-timeunits.R#12)  ─────────────────
cannot open the connection
1: simInit(times, params, modules, objects = list(), paths = paths) at testthat/test-timeunits.R:12
2: simInit(times, params, modules, objects = list(), paths = paths)
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape"), randomLandscapes = list(.plotInitialTime = NA, .plotInterval = NA), 
       caribouMovement = list(.plotInitialTime = NA, .plotInterval = NA), fireSpread = list(
           .plotInitialTime = NA, .plotInterval = NA)), modules = list("randomLandscapes", 
       "caribouMovement", "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(.globals = list(burnStats = "npixelsburned", 
       stackName = "landscape"), randomLandscapes = list(.plotInitialTime = NA, .plotInterval = NA), 
       caribouMovement = list(.plotInitialTime = NA, .plotInterval = NA), fireSpread = list(
           .plotInitialTime = NA, .plotInterval = NA)), modules = list("randomLandscapes", 
       "caribouMovement", "fireSpread"), objects = list(), paths = list(modulePath = "/homero/tomas/cran/rlibro/lib/SpaDES.core/sampleModules"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

── 36. Error: timeunits with child and parent modules work correctly (@test-time
cannot open the connection
1: simInit(modules = list("grandpar1", "par1"), paths = list(modulePath = tmpdir)) at testthat/test-timeunits.R:152
2: simInit(modules = list("grandpar1", "par1"), paths = list(modulePath = tmpdir))
3: do.call("simInit", args = li)
4: simInit(times = list(start = 0, end = 10), params = list(), modules = list("grandpar1", 
       "par1"), objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
5: simInit(times = list(start = 0, end = 10), params = list(), modules = list("grandpar1", 
       "par1"), objects = list(), paths = list(modulePath = "/tmp/RtmpQNjY1P/test_timeunits"), 
       inputs = structure(list(), row.names = integer(0), class = "data.frame"), outputs = structure(list(), row.names = integer(0), class = "data.frame"), 
       loadOrder = character(0))
6: Require(c(unique(unlist(reqdPkgs), "SpaDES.core")))
7: installedVersionsQuick(libPathListFiles, libPath, standAlone = standAlone, basename(libPathListFiles))
8: saveRDS(allPkgsDESC, file = .snap)
9: gzfile(file, mode)

══ testthat results  ═══════════════════════════════════════════════════════════
OK: 110 SKIPPED: 31 FAILED: 36
1. Error: test cache (@test-cache.R#15) 
2. Error: test cache (@test-cache.R#7) 
3. Error: test event-level cache (@test-cache.R#70) 
4. Error: test event-level cache (@test-cache.R#63) 
5. Error: test module-level cache (@test-cache.R#126) 
6. Error: test module-level cache (@test-cache.R#114) 
7. Error: test .prepareOutput (@test-cache.R#199) 
8. Error: test .prepareOutput (@test-cache.R#185) 
9. Error: test .robustDigest for simLists (@test-cache.R#260) 
1. ...

Error: testthat unit tests failed
Execution halted
